import "std/libc"
import "std/array"
import "std/map"
import "std/mem"
import "std/string"

import "ast"
import "lex"
import "types"
import "module"
import "lita"
import "phase_result"
import "intern"
import "common"

@asStr
public enum SymbolKind {
    TYPE,
    VAR,
    FUNC,
}

@asStr
public enum SymbolState {
    UNRESOLVED = 0,
    RESOLVING,
    RESOLVED,
    ERROR
}

public enum SymbolFlags {
    // If this symbol was defined in function scope
    IS_LOCAL                = (1<<1),
    IS_FOREIGN              = (1<<2),
    IS_CONSTANT             = (1<<3),
    IS_USING                = (1<<4),
    IS_TYPE                 = (1<<5),
    IS_INCOMPLETE           = (1<<6),
    IS_GENERIC_TEMPLATE     = (1<<7),
    IS_BUILTIN              = (1<<8),
    IS_FROM_GENERIC_TEMPLATE= (1<<9),
    IS_IMPORTED             = (1<<10),
    IS_PUBLIC               = (1<<11),
    IS_EMITTED              = (1<<12),
    IS_TEST                 = (1<<13),
    IS_ALIAS                = (1<<14),
    IS_MAIN                 = (1<<15),
    IS_METHOD               = (1<<16),
    IS_TRAIT                = (1<<17),
    IS_TRAIT_METHOD         = (1<<18),
    IS_TRAIT_GENERATED      = (1<<19),
    IS_GENERATED            = (1<<20),
    IS_NOTE                 = (1<<21),

    // Marked for reset for incremental compliation
    IS_MARKED_RESET         = (1<<22),
    IS_HIDDEN               = (1<<23),
    IS_FROM_PREPROCESSOR    = (1<<24),

    // To control name generation
    IS_EXTERN               = (1<<25),
}

public const MAX_SYMBOL_NAME = 256;

public struct Symbol {
    kind: SymbolKind
    name: InternedString
    state: SymbolState
    decl: *Decl
    type: *TypeInfo

    usingParent: *Symbol
    declared: *Module
    usingModule: *Module
    flags: i32
    val: Value

    // TODO: put in struct
    genericCallsiteModule: *Module
    genericArgs: Array<*TypeInfo>
    genericParams: Array<GenericParam>
}

public func (this: *Symbol) isGenericCapable() : bool {
    return this.flags & SymbolFlags.IS_GENERIC_TEMPLATE ||
           this.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE
}

public enum ScopeKind {
    MODULE,
    FUNC,
}

public struct ProgramSymbols {
    root: *Module
    values: Array<*Symbol>
    symbolTypes: Array<*Symbol>
    symbolFuncs: Array<*Symbol>
    mainEntry: *Symbol
    interfaceImpls: Map<Typeid, Array<Typeid>>
}

public struct Scope {
    kind: ScopeKind
    allocator: *const Allocator
    result: *PhaseResult
    parent: *Scope
    symbolTypes: Map<InternedString, *Symbol>
    symbolFuncs: Map<InternedString, *Symbol>

    module: *Module
}

public func NewScope(
    kind: ScopeKind,
    parent: *Scope,
    result: *PhaseResult,
    module: *Module,
    allocator: *const Allocator) : *Scope {

    var scope = new<Scope>(allocator)
    scope.init(kind, parent, result, module, allocator)
    return scope
}

public func (scope: *Scope) init(kind: ScopeKind,
                                 parent: *Scope,
                                 result: *PhaseResult,
                                 module: *Module,
                                 allocator: *const Allocator) {
    scope.kind = kind
    scope.allocator = allocator
    scope.parent = parent
    scope.result = result
    scope.module = module
    scope.symbolTypes = InternMap<*Symbol>(null, 16, allocator)
    scope.symbolFuncs = InternMap<*Symbol>(null, 16, allocator)
}

public func (scope: *Scope) initIncrementalBuild() {
    scope.markReset(&scope.symbolTypes)
    scope.markReset(&scope.symbolFuncs)
}

public func (scope: *Scope) postIncrementalBuild() {
    scope.cleanMarked(&scope.symbolTypes)
    scope.cleanMarked(&scope.symbolFuncs)
}

public func (s: *Scope) lookupFunc(name: InternedString) : *Symbol {
    var sym = s.symbolFuncs.get(name)
    if(sym && !(sym.flags & SymbolFlags.IS_MARKED_RESET)) {
        return sym
    }

    if(!s.parent) {
        return null
    }

    return s.parent.lookupFunc(name)
}

public func (s: *Scope) lookup(name: InternedString, includeFuncs: bool = true) : *Symbol {
    var sym: *Symbol = null;

    if(includeFuncs) {
        sym = s.symbolFuncs.get(name)
        if(sym && !(sym.flags & SymbolFlags.IS_MARKED_RESET)) {
            return sym
        }
    }

    sym = s.symbolTypes.get(name)
    if(sym && !(sym.flags & SymbolFlags.IS_MARKED_RESET)) {
        return sym
    }

    if(!s.parent) {
        return null
    }

    return s.parent.lookup(name, includeFuncs)
}

public func (this: *Scope) importSymbolWithAlias(importSrcPos: SrcPos,
                                                 name: InternedString,
                                                 alias: InternedString,
                                                 symbol: *Symbol) {

    var buffer = [MAX_SYMBOL_NAME]char{};

    var fullName = StringInit(buffer, MAX_SYMBOL_NAME, 0)
    fullName.appendStrn(alias.buffer, alias.length)
    fullName.appendStrn("::", 2)
    fullName.appendStrn(name.buffer, name.length)

    var nameIntern = this.module.lita.strings.internCopy(fullName.cStrConst(), fullName.length)
    this.importSymbol(importSrcPos, nameIntern, symbol)
}


public func (this: *Scope) importSymbol(importSrcPos: SrcPos,
                                        name: InternedString,
                                        symbol: *Symbol) {

    var symbolStorage = &this.symbolFuncs;
    if(symbol.kind != SymbolKind.FUNC) {
        symbolStorage = &this.symbolTypes
    }

    if(symbolStorage.contains(name) && !symbol.decl.hasNote("generated")) {
        var existingSym = symbolStorage.get(name)

        // if this symbol was previously defined and we're doing
        // an incremental build, go ahead with the import -- if/when
        // the symbol gets a declaration in this module, it will error
        // there
        if(!(existingSym.flags & SymbolFlags.IS_MARKED_RESET)) {
            var decl = existingSym.decl

            this.result.addError(importSrcPos, "can't import symbol '%.*s' defined in '%s:%d' because it is already defined in '%s:%d'",
                name.length, name.buffer,
                symbol.decl.startPos.filename, symbol.decl.startPos.lineNumber,
                decl.startPos.filename, decl.startPos.lineNumber)
            return;
        }
    }

    symbolStorage.put(name, symbol);
}

public func (this: *Scope) removeSymbol(symbol: *Symbol) {
    var symbolStorage = &this.symbolFuncs

    if(symbol.kind != SymbolKind.FUNC) {
        symbolStorage = &this.symbolTypes
    }

    // TODO: Performance!
    // TODO: We're piercing into the details of Map implementation
    //       TERRIBLE!!!
    for(var i = 0; i < symbolStorage.capacity; i += 1) {
        var value = symbolStorage.values[i]
        if(!value) {
            continue
        }
        if(value == symbol) {
            var key = symbolStorage.keys[i].key
            symbolStorage.remove(key)
            return;
        }
    }
}

public func (this: *Scope) addSymbol(name: InternedString,
                                     module: *Module,
                                     decl: *Decl,
                                     flags: i32) : *Symbol {

    var symbolStorage = &this.symbolTypes

    var isFunc = decl.kind == StmtKind.FUNC_DECL
    if(isFunc) {
        symbolStorage = &this.symbolFuncs
    }

    var sym: *Symbol = null;
    var isRebuild = this.module.flags & ModuleFlags.INCREMENTAL_COMPILATION;

    if(symbolStorage.contains(name)) {
        var isError = true

        // if we are incrementally rebuilding this module,
        // we will allow for recreating this existing symbol
        // if it's marked
        if(isRebuild) {
            sym = symbolStorage.get(name)
            if(sym.flags & SymbolFlags.IS_MARKED_RESET) {
                sym.flags &= ~SymbolFlags.IS_MARKED_RESET
                isError = false
            }
        }

        // We allow for redefining annotated generated
        // types, as this types can be redefined by
        // the preprocessor or the compiler
        if(decl.hasNote("generated")) {
            isError = false
        }

        if(isError) {
            var existingSym = symbolStorage.get(name)
            var decl = existingSym.decl
            this.result.addError(decl.startPos, "symbol '%.*s' already defined in %s:%d",
                name.length, name.buffer, decl.startPos.filename, decl.startPos.lineNumber)
            return null;
        }
    }

    var isNewType = (decl.kind == StmtKind.FUNC_DECL   ||
                     decl.kind == StmtKind.STRUCT_DECL ||
                     decl.kind == StmtKind.UNION_DECL  ||
                     decl.kind == StmtKind.TRAIT_DECL  ||
                     decl.kind == StmtKind.TYPEDEF_DECL||
                     decl.kind == StmtKind.NOTE_DECL   ||
                     decl.kind == StmtKind.ENUM_DECL)

    if(this.kind == ScopeKind.FUNC) {
        if(!isNewType) {
            flags |= SymbolFlags.IS_LOCAL
        }
    }

    if(decl.hasNote("foreign")) {
        flags |= SymbolFlags.IS_FOREIGN
    }

    if(decl.hasNote("generated")) {
        flags |= SymbolFlags.IS_GENERATED
    }

    if(decl.hasNote("hidden")) {
        flags |= SymbolFlags.IS_HIDDEN
    }

    if(decl.hasNote("extern")) {
        flags |= SymbolFlags.IS_EXTERN
    }

    if(decl.attributes.isPublic) {
        flags |= SymbolFlags.IS_PUBLIC
    }

    if(isNewType) {
        flags |= SymbolFlags.IS_TYPE
    }

    var kind = SymbolKind.VAR
    switch(decl.kind) {
        case StmtKind.TYPEDEF_DECL: {
            flags |= SymbolFlags.IS_ALIAS
            // fallthru
        }
        case StmtKind.NOTE_DECL:
        case StmtKind.ENUM_DECL:
        case StmtKind.TRAIT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            kind = SymbolKind.TYPE

            if(decl.kind == StmtKind.TRAIT_DECL) {
                flags |= SymbolFlags.IS_TRAIT
            }

            if(decl.kind == StmtKind.NOTE_DECL) {
                flags |= SymbolFlags.IS_NOTE
                flags &= ~SymbolFlags.IS_TYPE
            }
            break;
        }
        case StmtKind.FUNC_DECL: {
            kind = SymbolKind.FUNC
            if(decl.hasNote("test")) {
                flags |= SymbolFlags.IS_TEST
            }

            var funcDecl = decl as (*FuncDecl)
            if(funcDecl.flags & FuncFlags.IS_METHOD) {
                flags |= SymbolFlags.IS_METHOD
            }
            break;
        }
        case StmtKind.CONST_DECL: {
            flags |= SymbolFlags.IS_CONSTANT
            /* fallthru */
        }
        default: {
            kind = SymbolKind.VAR
            break;
        }
    }

    var isNewSym = sym == null
    if(isNewSym) {
        sym = new<Symbol>(this.allocator);
        sym.type = null
    }

    sym.kind = kind
    sym.name = name
    sym.state = SymbolState.UNRESOLVED
    sym.decl = decl
    sym.declared = module
    sym.flags = flags

    decl.sym = sym

    if(isNewSym) {
        symbolStorage.put(sym.name, sym)
    }
    return sym
}


// TEMP
public func (this: *Scope) print(header: *const char) {
    printf("Scope %s {\n", header)
    for(var it = this.symbolTypes.iter(); it.hasNext();) {
        var symbol = it.next().value;
        printf("   '%.*s'\n", symbol.name.length, symbol.name.buffer)
    }

    for(var it = this.symbolFuncs.iter(); it.hasNext();) {
        var symbol = it.next().value;
        printf("   '%.*s'\n", symbol.name.length, symbol.name.buffer)
    }
    printf("}\n")
}

func (this: *Scope) markReset(symbols: *Map<InternedString, *Symbol>) {
    for(var it = symbols.iter(); it.hasNext();) {
        var entry = it.next()
        var symName = entry.key;
        var symbol = entry.value;

        var isGenericFromThisModule = symbol.genericCallsiteModule != null
                                   && symbol.genericCallsiteModule.equals(this.module)

        // remove entries not declared in this module
        // so that they can be reimported if necessary
        if(!isGenericFromThisModule && !symbol.declared.equals(this.module)) {
            it.remove()
            continue
        }

        if(symbol.flags & SymbolFlags.IS_FROM_PREPROCESSOR) {
            this.removeSymbolFromModules(symbol)
            it.remove()
            continue
        }

        symbol.flags |= SymbolFlags.IS_MARKED_RESET
        symbol.state = SymbolState.UNRESOLVED
        symbol.decl = null
        // DO NOT clear symbol.type, this is used as a cache and allows
        // for type look up and equality
        // symbol.type = null
    }
}

func (this: *Scope) cleanMarked(symbols: *Map<InternedString, *Symbol>) {
    for(var it = symbols.iter(); it.hasNext();) {
        var entry = it.next()
        var symbol = entry.value;

        var isGenericFromThisModule = symbol.genericCallsiteModule != null
                                   && symbol.genericCallsiteModule.equals(this.module)


        if(!isGenericFromThisModule && !symbol.declared.equals(this.module)) {
            continue
        }

        // Remove any entries that haven't been stored again
        // this means they were deleted
        if(symbol.flags & SymbolFlags.IS_MARKED_RESET) {
            this.removeSymbolFromModules(symbol)
            it.remove()
        }
    }
}

func (this: *Scope) removeSymbolFromModules(symbol: *Symbol) {
    for(var it = this.module.importedBy.iter(); it.hasNext();) {
        var entry = it.next()
        var m = entry.value.module
        m.symbols.removeSymbol(symbol)
    }
}
