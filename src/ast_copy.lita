import "std/mem"
import "std/array"
import "std/assert"
import "std/string_buffer"
import "std/string_view"
import "std/libc"
import "std/system"

import "ast"
import "ast_new"
import "lex"
import "symbols"
import "types"
import "common"
import "lita"
import "module"
import "checker"
import "parser"
import "intern"

public func NewTokenNameIntern(token: Token, strings: *Strings) : InternedString {
    if(token.type != TokenType.IDENTIFIER && token.type != TokenType.STRING) {
        var text = tokenText[token.type]
        return strings.internCopy(text, strlen(text))
    }

    return strings.internCopy(token.value.str.buffer, token.value.str.length)
}

public func CopyTypeSpecs(specs: Array<*TypeSpec>, module: *Module) : Array<*TypeSpec> {
    if(specs.empty()) {
        return Array<*TypeSpec>{
            0
        }
    }

    var result = Array<*TypeSpec>{}
    result.init(specs.size(), module.allocator)

    for(var i = 0; i < specs.size(); i += 1) {
        var spec = specs.get(i)
        result.add(CopyTypeSpec(spec, module))
    }

    return result
}

public func CopyTypeSpec(spec: *TypeSpec, module: *Module) : *TypeSpec {
    if(spec == null) {
        return null;
    }

    // TODO: Support incremental compilation
    var copy = NewTypeSpec(spec.kind, spec.pos, &module.typeSpecAllocator)
    copy.base = CopyTypeSpec(spec.base, module)

    switch(spec.kind) {
        case TypeSpecKind.NONE: {
            return copy
        }
        case TypeSpecKind.ARRAY: {
            var originalArray = spec
            var copyArray = copy
            if(originalArray.numElements) {
                copyArray.numElements = CopyExpr(originalArray.numElements, module)
            }
            return copyArray as (*TypeSpec)
        }
        case TypeSpecKind.PTR:
        case TypeSpecKind.CONST: {
            return copy
        }
        case TypeSpecKind.NAME: {
            var originalName = spec
            var copyName = copy
            copyName.name = originalName.name
            copyName.genericArgs = CopyTypeSpecs(originalName.genericArgs, module)
            return copy
        }
        case TypeSpecKind.FUNC_PTR: {
            var original = spec
            var copyFunc = copy
            copyFunc.args = CopyTypeSpecs(original.args, module)
            copyFunc.ret = CopyTypeSpec(original.ret, module)
            copyFunc.hasVarargs = original.hasVarargs
            copyFunc.genericParams.init(original.genericParams.size(), module.allocator)
            for(var i = 0; i < original.genericParams.size(); i+=1) {
                var param = original.genericParams.get(i)
                copyFunc.genericParams.add(param)
            }
            return copy;
        }
        default: {
            assert(false)
        }
    }

    return null
}

public func CopyDecl(decl: *Decl, module: *Module) : *Decl {
    if(!decl) return null;

    switch(decl.kind) {
        case StmtKind.IMPORT_DECL: {
            assert(false); // don't allow
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var original = decl as (*VarDecl)
            var copy = NewVarDecl(original.startPos,
                                  original.endPos,
                                  original.name,
                                  CopyTypeSpec(original.typeSpec, module),
                                  CopyExpr(original.expr, module),
                                  module.allocator)
            if(decl.kind == StmtKind.CONST_DECL) {
                copy.kind = StmtKind.CONST_DECL
            }
            return copy
        }
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.TRAIT_DECL: {
            return CopyAggregateDecl(decl as (*AggregateDecl), module) as (*Decl)
        }
        case StmtKind.ENUM_DECL:
            assert(false) // not implemented yet??
        case StmtKind.FUNC_DECL: {
            return CopyFuncDecl(decl as (*FuncDecl), module) as (*Decl)
        }
        case StmtKind.TYPEDEF_DECL: {
            return CopyTypedefDecl(decl as (*TypedefDecl), module) as (*Decl)
        }
        case StmtKind.PARAM_DECL: {
            var original = decl as (*ParameterDecl)
            var copy = NewParameterDecl(original.startPos,
                                        original.endPos,
                                        original.name,
                                        CopyTypeSpec(original.type, module),
                                        CopyExpr(original.defaultExpr, module),
                                        original.attributes.isUsing,
                                        module.allocator)
            return copy
        }
        case StmtKind.NATIVE_DECL: {
            return decl;
        }
        case StmtKind.POISON_DECL:
            return decl;
        default:
            assert(false)
    }
    return null
}

public func CopyCallArgs(args: *Array<CallArg>, module: *Module) : Array<CallArg> {
    if(args.empty()) {
        return Array<CallArg>{}
    }
    var result = ArrayInit<CallArg>(args.size(), module.allocator)
    for(var i = 0; i < args.size(); i += 1) {
        var arg = args.get(i)
        var argExpr = CopyExpr(arg.argExpr, module)
        result.add(CallArg {
            .argExpr = argExpr,
            .argName = arg.argName
        })
    }

    return result
}

public func CopyExprs(exprs: *Array<*Expr>, module: *Module) : Array<*Expr> {
    if(exprs.empty()) {
        return Array<*Expr>{}
    }
    var result = ArrayInit<*Expr>(exprs.size(), module.allocator)
    for(var i = 0; i < exprs.size(); i += 1) {
        var copy = CopyExpr(exprs.get(i), module)
        result.add(copy)
    }

    return result
}

public func CopyStmts(stmts: *Array<*Stmt>, module: *Module) : Array<*Stmt> {
    if(stmts.empty()) {
        return Array<*Stmt>{}
    }
    var result = ArrayInit<*Stmt>(stmts.size(), module.allocator)
    for(var i = 0; i < stmts.size(); i += 1) {
        var copy = CopyStmt(stmts.get(i), module)
        result.add(copy)
    }

    return result
}


public func CopyExpr(expr: *Expr, module: *Module) : *Expr {
    if(!expr) return null;

    switch(expr.kind) {
        case StmtKind.ARRAY_DESIGNATION_EXPR: {
            var original = expr as (*ArrayDesignationExpr)
            var copy = NewArrayDesignationExpr(original.startPos,
                                               original.endPos,
                                               CopyExpr(original.index, module),
                                               CopyExpr(original.value, module),
                                               module.allocator)
            return copy
        }
        case StmtKind.ARRAY_INIT_EXPR: {
            var original = expr as (*ArrayInitExpr)
            var copy = NewArrayInitExpr(original.startPos,
                                        original.endPos,
                                        CopyTypeSpec(original.type, module),
                                        CopyExprs(original.values, module),
                                        module.allocator)
            return copy
        }
        case StmtKind.BINARY_EXPR: {
            var original = expr as (*BinaryExpr)
            var copy = NewBinaryExpr(original.startPos,
                                     original.endPos,
                                     CopyExpr(original.left, module),
                                     original.operator,
                                     CopyExpr(original.right, module),
                                     module.allocator)
            return copy
        }
        case StmtKind.BOOLEAN_EXPR: {
            return expr // nothing to copy
        }
        case StmtKind.CAST_EXPR: {
            var original = expr as (*CastExpr)
            var copy = NewCastExpr(original.startPos,
                                   original.endPos,
                                   CopyExpr(original.exprToCast, module),
                                   CopyTypeSpec(original.castTo, module),
                                   module.allocator)
            return copy
        }
        case StmtKind.CHAR_EXPR: {
            return expr // nothing to copy
        }
        case StmtKind.FUNC_CALL_EXPR: {
            var original = expr as (*FuncCallExpr)
            var copy = NewFuncCallExpr(original.startPos,
                                       original.endPos,
                                       CopyExpr(original.object, module),
                                       CopyCallArgs(original.arguments, module),
                                       CopyTypeSpecs(original.genericArgs, module),
                                       module.allocator)
            return copy
        }
        case StmtKind.FUNC_IDENTIFIER_EXPR: {
            var original = expr as (*IdentifierExpr)
            var copy = NewIdentifierExpr(original.startPos,
                                         original.endPos,
                                         CopyTypeSpec(original.type, module),
                                         module.allocator)
            copy.kind = StmtKind.FUNC_IDENTIFIER_EXPR
            return copy
        }
        case StmtKind.GET_EXPR:{
            var original = expr as (*GetExpr)
            var copy = NewGetExpr(original.startPos,
                                  original.endPos,
                                  CopyExpr(original.object, module),
                                  CopyExpr(original.field, module) as (*IdentifierExpr),
                                  module.allocator)
            return copy
        }
        case StmtKind.GROUP_EXPR: {
            var original = expr as (*GroupExpr)
            var copy = NewGroupExpr(original.startPos,
                                    original.endPos,
                                    CopyExpr(original.groupedExpr, module),
                                    module.allocator)
            return copy
        }
        case StmtKind.IDENTIFIER_EXPR: {
            var original = expr as (*IdentifierExpr)
            var copy = NewIdentifierExpr(original.startPos,
                                         original.endPos,
                                         CopyTypeSpec(original.type, module),
                                         module.allocator)
            return copy
        }
        case StmtKind.INIT_ARG_EXPR: {
            var original = expr as (*InitArgExpr)
            var copy = NewInitArgExpr(original.startPos,
                                      original.endPos,
                                      original.fieldName,
                                      original.argPosition,
                                      CopyExpr(original.value, module),
                                      module.allocator)
            return copy
        }
        case StmtKind.INIT_EXPR: {
            var original = expr as (*InitExpr)
            var arguments = Array<*InitArgExpr>{}
            if(!original.arguments.empty()) {
                arguments.init(original.arguments.size(), module.allocator)
            }

            for(var i = 0; i < original.arguments.size(); i += 1) {
                var copy = CopyExpr(original.arguments.get(i), module) as (*InitArgExpr)
                arguments.add(copy)
            }

            var copy = NewInitExpr(original.startPos,
                                   original.endPos,
                                   CopyTypeSpec(original.type, module),
                                   arguments,
                                   module.allocator)
            return copy
        }
        case StmtKind.NULL_EXPR: {
            return expr // nothing to copy
        }
        case StmtKind.NUMBER_EXPR: {
            return expr // nothing to copy
        }
        case StmtKind.SET_EXPR: {
            var original = expr as (*SetExpr)
            var copy = NewSetExpr(original.startPos,
                                  original.endPos,
                                  CopyExpr(original.object, module),
                                  CopyExpr(original.field, module) as (*IdentifierExpr),
                                  original.operator,
                                  CopyExpr(original.value, module),
                                  module.allocator)
            return copy
        }
        case StmtKind.OFFSET_OF_EXPR: {
            var original = expr as (*OffsetOfExpr)
            var copy = NewOffsetOfExpr(original.startPos,
                                       original.endPos,
                                       CopyTypeSpec(original.type, module),
                                       original.field,
                                       module.allocator)
            return copy
        }
        case StmtKind.SIZE_OF_EXPR: {
            var original = expr as (*SizeOfExpr)
            var copy = NewSizeOfExpr(original.startPos,
                                     original.endPos,
                                     CopyExpr(original.sizeOfExpr, module),
                                     module.allocator)
            return copy
        }
        case StmtKind.STRING_EXPR: {
            return expr // nothing to copy
        }
        case StmtKind.SUBSCRIPT_GET_EXPR: {
            var original = expr as (*SubscriptGetExpr)
            var copy = NewSubscriptGetExpr(original.startPos,
                                           original.endPos,
                                           CopyExpr(original.object, module),
                                           CopyExpr(original.index, module),
                                           module.allocator)
            return copy
        }
        case StmtKind.SUBSCRIPT_SET_EXPR: {
            var original = expr as (*SubscriptSetExpr)
            var copy = NewSubscriptSetExpr(original.startPos,
                                           original.endPos,
                                           CopyExpr(original.object, module),
                                           CopyExpr(original.index, module),
                                           original.operator,
                                           CopyExpr(original.value, module),
                                           module.allocator)
            return copy
        }
        case StmtKind.TERNARY_EXPR: {
            var original = expr as (*TernaryExpr)
            var copy = NewTernaryExpr(original.startPos,
                                      original.endPos,
                                      CopyExpr(original.cond, module),
                                      CopyExpr(original.then, module),
                                      CopyExpr(original.other, module),
                                      module.allocator)
            return copy
        }
        case StmtKind.TYPE_IDENTIFIER_EXPR: {
            var original = expr as (*TypeIdentifierExpr)
            var copy = NewTypeIdentifierExpr(original.startPos,
                                             original.endPos,
                                             CopyTypeSpec(original.type, module),
                                             module.allocator)
            return copy
        }
        case StmtKind.TYPE_OF_EXPR: {
            var original = expr as (*TypeOfExpr)
            var copy = NewTypeOfExpr(original.startPos,
                                     original.endPos,
                                     CopyExpr(original.typeOfExpr, module),
                                     CopyTypeSpec(original.type, module),
                                     module.allocator)
            return copy
        }
        case StmtKind.UNARY_EXPR: {
            var original = expr as (*UnaryExpr)
            var copy = NewUnaryExpr(original.startPos,
                                    original.endPos,
                                    original.operator,
                                    CopyExpr(original.unaryExpr, module),
                                    module.allocator)
            return copy
        }
        case StmtKind.POISON_EXPR: {
            return expr
        }
        default: {
            assert(false)
        }
    }
    return null
}

public func CopyStmt(stmt: *Stmt, module: *Module) : *Stmt {
    if(!stmt) return null;

    switch(stmt.kind) {
        case StmtKind.BLOCK_STMT: {
            var original = stmt as (*BlockStmt)
            var copy = NewBlockStmt(original.startPos,
                                    original.endPos,
                                    CopyStmts(original.stmts, module),
                                    module.allocator)
            return copy
        }
        case StmtKind.BREAK_STMT: {
            return stmt; // nothing to copy
        }
        case StmtKind.COMP_STMT: {
            var original = stmt as (*CompStmt)
            var end: *Stmt = null
            if(original.end != null) {
                end = &original.end.stmt
            }

            var copy = NewCompStmt(original.startPos,
                                   original.endPos,
                                   original.type,
                                   original.expr,
                                   CopyStmts(original.body, module),
                                   CopyStmt(end, module) as (*CompStmt),
                                   original.isScriptLoad,
                                   original.isStatic,
                                   module.allocator)
            return copy
        }
        case StmtKind.CONTINUE_STMT: {
            return stmt // nothing to copy
        }
        case StmtKind.DEFER_STMT: {
            var original = stmt as (*DeferStmt)
            var copy = NewDeferStmt(original.startPos,
                                    original.endPos,
                                    CopyStmt(original.deferedStmt, module),
                                    module.allocator)
            return copy
        }
        case StmtKind.DO_WHILE_STMT: {
            var original = stmt as (*DoWhileStmt)
            var copy = NewDoWhileStmt(original.startPos,
                                    original.endPos,
                                    CopyExpr(original.cond, module),
                                    CopyStmt(original.body, module),
                                    module.allocator)
            return copy
        }
        case StmtKind.EMPTY_STMT: {
            return stmt; // nothing to copy
        }
        case StmtKind.FOR_STMT: {
            var original = stmt as (*ForStmt)
            var copy = NewForStmt(original.startPos,
                                  original.endPos,
                                  CopyStmt(original.init, module),
                                  CopyExpr(original.cond, module),
                                  CopyStmt(original.post, module),
                                  CopyStmt(original.body, module),
                                  module.allocator)
            return copy
        }
        case StmtKind.FUNC_BODY_STMT: {
            var original = stmt as (*FuncBodyStmt)
            var copy = NewBlockStmt(original.startPos,
                                    original.endPos,
                                    CopyStmts(original.stmts, module),
                                    module.allocator)
            copy.kind = StmtKind.FUNC_BODY_STMT
            return copy
        }
        case StmtKind.GOTO_STMT: {
            return stmt // nothing to copy
        }
        case StmtKind.IF_STMT: {
            var original = stmt as (*IfStmt)
            var copy = NewIfStmt(original.startPos,
                                 original.endPos,
                                 CopyExpr(original.cond, module),
                                 CopyStmt(original.then, module),
                                 CopyStmt(original.elseStmt, module),
                                 module.allocator)
            return copy
        }
        case StmtKind.LABEL_STMT: {
            return stmt // nothing to copy
        }
        case StmtKind.MODULE_STMT: {
            assert(false); // we shouldn't be copying modules
        }
        case StmtKind.NOTE_STMT: {
            return stmt // nothing to copy
        }
        case StmtKind.PARAMETERS_STMT: {
            var original = stmt as (*ParametersStmt)
            var params = Array<*ParameterDecl>{}
            if(!original.params.empty()) {
                params.init(original.params.size(), module.allocator)
            }
            for(var i = 0; i < original.params.size(); i += 1) {
                var copy = CopyStmt(original.params.get(i), module) as (*ParameterDecl)
                params.add(copy)
            }

            var copy = NewParametersStmt(original.startPos,
                                         original.endPos,
                                         params,
                                         original.isVararg,
                                         module.allocator)
            return copy
        }
        case StmtKind.RETURN_STMT: {
            var original = stmt as (*ReturnStmt)
            var copy = NewReturnStmt(original.startPos,
                                     original.endPos,
                                     CopyExpr(original.expr, module),
                                     module.allocator)
            return copy
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var original = stmt as (*SwitchCaseStmt)
            var copy = NewSwitchCaseStmt(original.startPos,
                                         original.endPos,
                                        CopyExpr(original.cond, module),
                                        CopyStmt(original.body, module),
                                        module.allocator)
            return copy
        }
        case StmtKind.SWITCH_STMT:{
            var original = stmt as (*SwitchStmt)
            var cases = Array<*SwitchCaseStmt>{}
            if(!original.cases.empty()) {
                cases.init(original.cases.size(), module.allocator)
            }
            for(var i = 0; i < original.cases.size(); i += 1) {
                var copy = CopyStmt(original.cases.get(i), module) as (*SwitchCaseStmt)
                cases.add(copy)
            }

            var copy = NewSwitchStmt(original.startPos,
                                     original.endPos,
                                     CopyExpr(original.cond, module),
                                     cases,
                                     CopyStmt(original.defaultStmt, module),
                                     module.allocator)
            return copy
        }
        case StmtKind.ENUM_FIELD_DECL:
        case StmtKind.ENUM_FIELD_ENTRY_DECL:
        case StmtKind.STRUCT_FIELD_DECL:
        case StmtKind.UNION_FIELD_DECL:
        case StmtKind.TRAIT_FIELD_DECL:
        case StmtKind.VAR_FIELD_DECL:{
            assert(false) // shouldn't reach here -- handled in CopyAggregateDecl
        }
        case StmtKind.WHILE_STMT: {
            var original = stmt as (*WhileStmt)
            var copy = NewWhileStmt(original.startPos,
                                    original.endPos,
                                    CopyExpr(original.cond, module),
                                    CopyStmt(original.body, module),
                                    module.allocator)
            return copy
        }
        default: {
            if(IsExpr(stmt)) {
                return CopyExpr(stmt as (*Expr), module) as (*Stmt)
            }
            if(IsDecl(stmt)) {
                return CopyDecl(stmt as (*Decl), module) as (*Stmt)
            }

            assert(false)
        }
    }

    return null
}

public func CopyAggregateDecl(decl: *AggregateDecl, module: *Module) : *AggregateDecl {
    var copy = NewAggregateDecl(decl.startPos,
                                decl.endPos,
                                decl.kind,
                                decl.name,
                                decl.genericParams.copy(module.allocator),
                                Array<FieldStmt>{},
                                decl.flags,
                                module.allocator) as (*AggregateDecl)

    copy.attributes = decl.attributes
    copy.fields = ArrayInit<FieldStmt>(decl.fields.size(), module.allocator)

    for(var i = 0; i < decl.fields.size(); i+=1) {
        var field = decl.fields.get(i)
        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL: {
                var o = field.traitField
                var traitField = NewTraitFieldDecl(o.startPos,
                                                  o.endPos,
                                                  o.name,
                                                  CopyTypeSpec(o.type, module),
                                                  o.attributes,
                                                  module.allocator) as (*TraitFieldDecl)

                var copyField = FieldStmt {
                    .kind = StmtKind.TRAIT_FIELD_DECL,
                    .traitField = traitField
                }
                copy.fields.add(copyField)
                copy.node.becomeParentOf(traitField)
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                var o = field.varField
                var varField = NewVarFieldDecl(o.startPos,
                                               o.endPos,
                                               o.name,
                                               CopyTypeSpec(o.type, module),
                                               o.attributes,
                                               CopyExpr(o.defaultExpr, module),
                                               module.allocator) as (*VarFieldDecl)

                var copyField = FieldStmt {
                    .kind = StmtKind.VAR_FIELD_DECL,
                    .varField = varField
                }
                copy.fields.add(copyField)
                copy.node.becomeParentOf(varField)
                break;
            }
            case StmtKind.ENUM_FIELD_DECL: {
                var copyField = FieldStmt {
                    .kind = StmtKind.ENUM_FIELD_DECL,
                    .enumField = field.enumField
                }
                copy.fields.add(copyField)
                copy.node.becomeParentOf(field.enumField)
                break;
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                var aggField = field.aggregateField
                var copyField = FieldStmt {
                    .kind = field.kind,
                    .aggregateField = CopyAggregateDecl(aggField, module)
                }
                copy.fields.add(copyField)
                copy.node.becomeParentOf(copyField.aggregateField)
                break;
            }
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }
    return copy;
}


public func CopyFuncDecl(decl: *FuncDecl, module: *Module) : *FuncDecl {
    var copy = NewFuncDecl(decl.startPos,
                           decl.endPos,
                           decl.name,
                           decl.genericParams.copy(module.allocator),
                           CopyParameters(decl.params, module),
                           CopyStmt(decl.body, module),
                           CopyTypeSpec(decl.returnType, module),
                           decl.flags,
                           module.allocator)
    copy.attributes = decl.attributes
    return copy as (*FuncDecl)
}

public func CopyParameters(params: ParametersStmt, module: *Module) : *ParametersStmt {
    var paramDecls = Array<*ParameterDecl>{}
    paramDecls.init(params.params.size(), module.allocator)

    for(var i = 0; i < params.params.size(); i+=1) {
        var decl = params.params.get(i)
        var copy = NewParameterDecl(decl.startPos,
                                    decl.endPos,
                                    decl.name,
                                    CopyTypeSpec(decl.type, module),
                                    CopyExpr(decl.defaultExpr, module),
                                    decl.attributes.isUsing,
                                    module.allocator) as (*ParameterDecl)
        copy.attributes = decl.attributes
        paramDecls.add(copy)
    }

    var paramsCopy = NewParametersStmt(params.startPos,
                                       params.endPos,
                                       paramDecls,
                                       params.isVararg,
                                       module.allocator)
    return paramsCopy as (*ParametersStmt)
}


public func CopyTypedefDecl(decl: *TypedefDecl, module: *Module) : *TypedefDecl {
    var copy = NewTypedefDecl(decl.startPos,
                              decl.endPos,
                              decl.name,
                              decl.genericParams.copy(module.allocator),
                              CopyTypeSpec(decl.type, module),
                              module.allocator)
    copy.attributes = decl.attributes
    return copy as (*TypedefDecl)
}

public func AstInsertText(node: *Node, text: *const char, index: i32, module: *Module, lita: *Lita) {
    // TODO: Support incremental compilation
    var parser = ParserInit(node.startPos.filename, text, strlen(text), module, lita)
    var stmt = parser.statement()

    AstInsert(node, stmt, index, module, lita)
}


@doc("""
    Inserts a stmt inside another AstNode.

    Right now only FuncDecl is supported.
""")
public func AstInsert(node: *Node, stmt: *Stmt, index: i32, module: *Module, lita: *Lita) {

    switch(node.kind) {
        case StmtKind.FUNC_DECL: {
            var funcDecl = node as (*FuncDecl)
            if(!funcDecl.body) {
                funcDecl.body = funcDecl.node.becomeParentOf(stmt)
            }
            else {
                if(funcDecl.body.kind == StmtKind.FUNC_BODY_STMT) {
                    var body = funcDecl.body as (*FuncBodyStmt)
                    body.stmts.insertAt(index, stmt)
                    body.node.becomeParentOf(stmt)
                }
                else {
                    var stmts = ArrayInit<*Stmt>(8, module.allocator)
                    if(index) {
                        stmts.add(funcDecl.body)
                        stmts.add(stmt)
                    }
                    else {
                        stmts.add(stmt)
                        stmts.add(funcDecl.body)
                    }

                    funcDecl.body = NewFuncBodyStmt(index ? funcDecl.body.startPos : stmt.startPos,
                                                    index ? stmt.endPos : funcDecl.body.endPos,
                                                    stmts,
                                                    module.allocator)

                }
            }
            break
        }
        default: {
            // NOT implemented yet!!
            printf("Assert AstInsert: %s\n", StmtKindAsStr(node.kind))
            assert(false)
        }
    }
}


public func AstAddImport(lita: *Lita,
                         checker: *TypeChecker,
                         module: *Module,
                         importModule: *Module) : *const char {

    @static var moduleNameIndex: i32;

    for(var i = 0; i < module.ast.imports.size(); i += 1) {
        var importStmt = module.ast.imports.get(i)
        if(!importStmt.moduleId) {
            continue
        }

        if(strncmp(importStmt.moduleId.filename,
                   importModule.id.filename, MAX_PATH) == 0) {
            if(importStmt.alias.token.type == TokenType.IDENTIFIER) {
                return importStmt.alias.token.asString()
            }
            else {
                // this is already being imported and doesn't have an alias
                return null
            }
        }
    }

    var strings = lita.strings

    // this module isn't being imported, so we must inject an import
    // statement for it; but also give it an alias that *shouldn't*
    // collide with other imports
    var name = Identifier {
        .str = importModule.id.name,
        .token = Token {
            .type = TokenType.IDENTIFIER,
            .pos = module.ast.startPos,
            .value = Value{.str = importModule.id.name.view}
        }
    }
//////////////////////////////////////////////////
// TODO: String intern -- don't allocate here, instead do a internCopy
//////////////////////////////////////////////////
    var sb = StringBufferInit(16, lita.allocator)
    sb.append("____%d", moduleNameIndex += 1)

    var alias = Identifier {
        .str = lita.strings.internCopy(sb.cStr(), sb.length),
        .token = Token {
            .type = TokenType.IDENTIFIER,
            .pos = module.ast.startPos,
            .value = Value{ .str = StringViewInit(sb.cStr(), sb.length)}
        }
    }
    var importStmt = NewImportDecl(module.ast.startPos,
                                    module.ast.startPos,
                                    name,
                                    alias,
                                    false,
                                    lita.allocator) as (*ImportDecl)

    importStmt.moduleId = &importModule.id
    module.ast.imports.add(importStmt)

    checker.enterModule(module)
    defer checker.leaveModule()
    checker.createImportSymbols(importStmt)

    return sb.cStr()
}