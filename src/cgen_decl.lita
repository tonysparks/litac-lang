import "std/assert"
import "std/string_buffer"
import "std/string"
import "std/libc"
import "std/array"
import "std/map"

import "ast"
import "types"
import "module"
import "symbols"
import "lita"
import "phase_result"
import "lex"
import "common"
import "cgen"

public func (this: using *CGen) emitVarDecl(decl: *VarDecl) {
    assert(decl.sym != null)

    if(decl.sym.flags & SymbolFlags.IS_FOREIGN) {
        return;
    }

    decl.sym.flags |= SymbolFlags.IS_EMITTED

    this.emitNotes(decl.attributes)
    this.emitLineInfo(decl.stmt)

    var name = this.cName(decl.sym)
    if(decl.sym.flags & SymbolFlags.IS_CONSTANT && decl.expr.isConstExpr()) {
        assert(decl.expr != null)

        buf.appendStr("\n#define ")
        this.emitStr(name)

        buf.appendStrn(" (", 2)
        this.emitStmt(decl.expr)
        buf.appendStrn(")", 1)


        // If this isn't a global variable, we need to #undef
        // this once we leave the current scope
        if(decl.sym.flags & SymbolFlags.IS_LOCAL) {
            if(this.currentScope.constDefs.empty()) {
                this.currentScope.constDefs.init(16, this.lita.allocator)
            }

            this.currentScope.constDefs.add(name)
        }
    }
    else {
        buf.appendStr(this.cTypeDecl(decl.sym.type, name))
        if(decl.expr) {
            buf.appendStrn(" = ", 3)
            if(!this.emitTraitCast(decl.expr)) {
                this.emitStmt(decl.expr)
            }
        }
        buf.appendStrn(";", 1)
    }
}

public func (this: using *CGen) emitFuncDeclSignature(decl: *FuncDecl, name: *const char) {
    assert(decl.sym != null)

    if(decl.sym.flags & SymbolFlags.IS_FOREIGN) {
        return;
    }

    this.emitNotes(decl.attributes)
    this.emitLineInfo(decl.stmt)

    var funcInfo = decl.sym.type
    if(funcInfo.returnType.kind == TypeKind.FUNC_PTR) {
        var funcPtrInfo = funcInfo.returnType
        buf.append("%s (*%s(", this.cType(funcPtrInfo.returnType), name)
    }
    else {
        buf.append("%s %s(", this.cType(funcInfo.returnType), name)
    }

    var decayArrays = true
    var i = 0
    var tmp = StringBufferInit(256, this.allocator)
    for(; i < funcInfo.funcDecl.params.size(); i += 1) {
        if(i > 0) {
            buf.appendStrn(",", 1)
        }

        var param = funcInfo.funcDecl.params.get(i)
        buf.appendStr(this.cTypeDecl(param.sym.type, this.prefix(param.sym.name.view, &tmp), decayArrays))
        tmp.clear()
    }

    if(funcInfo.funcDecl.flags & FuncFlags.HAS_VARARGS) {
        if(i > 0) {
            buf.appendStrn(",", 1)
        }
        buf.appendStrn("...", 3)
    }

    buf.appendStrn(")", 1)

    if(funcInfo.returnType.kind == TypeKind.FUNC_PTR) {
        var funcPtrInfo = funcInfo.returnType
        buf.appendStrn(")  (", 4)

        var j = 0
        for(; j < funcPtrInfo.paramDecls.size(); j+=1) {
            if(j > 0) {
                buf.appendStrn(",", 1)
            }

            buf.appendStr(this.cType(funcPtrInfo.paramDecls.get(j)))
        }
        if(funcPtrInfo.hasVarargs) {
            if(j > 0) {
                buf.appendStrn(",", 1)
            }
            buf.appendStrn("...", 3)
        }
        buf.appendStrn(")", 1)
    }
}

public func (this: using *CGen) emitFuncDecl(decl: *FuncDecl) {
    assert(decl != null)

    if(decl.sym.flags & SymbolFlags.IS_FOREIGN) {
        return;
    }

    decl.sym.flags |= SymbolFlags.IS_EMITTED

    var name = this.cName(decl.sym)
    this.emitFuncDeclSignature(decl, name)
    this.emitStrn(" {", 2)
    // mark our current index into this function, so that
    // we can add in temp variables
    this.funcIndex = this.buf.length

    if(decl.body) {
        this.currentFunc = decl.sym.type
        this.emitStmt(decl.body)
        this.currentFunc = null
    }
    this.emitStrn("}\n", 2)
}


public func (this: using *CGen) emitAggregateDecl(decl: *AggregateDecl) {
    assert(decl.sym != null)


    if(decl.sym.flags & SymbolFlags.IS_FOREIGN) {
        return;
    }

    if(decl.flags & AggregateFlags.IS_EMBEDDED && this.aggregateLevel < 1) {
        return;
    }

    decl.sym.flags |= SymbolFlags.IS_EMITTED

    this.aggregateLevel += 1
    defer this.aggregateLevel -= 1

    this.emitNotes(decl.attributes)
    this.emitLineInfo(decl.stmt)

    var name = this.cName(decl.sym)

    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
        name = ""
    }

    this.emit("%s %s {", decl.kind == StmtKind.UNION_DECL ? "union" : "struct", name)
    for(var i = 0; i < decl.fields.size(); i+=1) {
        var field = decl.fields.get(i)
        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL: {
                /* delegated to the virtual table */
                break;
            }
            case StmtKind.VAR_FIELD_DECL: {
                this.emitStmt(field.varField)
                break;
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                this.emitStmt(field.aggregateField.decl)
                break;
            }
            case StmtKind.ENUM_FIELD_DECL: {
                var decl = field.enumField.decl
                this.emit("enum %s %.*s;\n", this.cTypeName(decl.sym.type), decl.name.str.length, decl.name.str.buffer)
                break;
            }
            default: {
            }
        }
    }

    // for traits, we add the virtual table and this pointers
    if(decl.sym.flags & SymbolFlags.IS_TRAIT) {
        var root = this.lita.programSymbols.root
        assert(root != null)

        // we put all generated trait tables in the root module, so therefore we have to manually
        // name mangle the vtable name
        var vtableName = [MAX_SYMBOL_NAME]char;
        var vtableNameStr = StringInit(vtableName, MAX_SYMBOL_NAME, 0)
        var escapedName = this.escapeNameStr(decl.sym.name)
        var module = root

        var len = vtableNameStr.format("%s%.*s__%.*s",
            this.options.cPrefix,
            module.id.name.length,
            module.id.name.buffer,
            escapedName.length,
            escapedName.buffer)

        this.emit("%s__VirtualTable* __vtable;\n", vtableNameStr.cStr())

        this.emitStrn("void* __this;", 13)
    }
    // address bugs that don't allow empty structs/unions
    else if(decl.fields.empty()) {
        this.emitStr("int __dummy;")
    }

    this.emitStrn("}", 1)
    if(this.aggregateLevel > 1) {
        if(decl.name.str.length) {
            this.emitStrn(" ", 1)
            this.emitStrn(decl.name.str.buffer, decl.name.str.length)
        }
    }
    this.emitStrn(";\n", 2)
    this.emitNotes(decl.attributes, false)
}


public func (this: using *CGen) emitEnumDecl(decl: *EnumDecl) {
    assert(decl.sym != null)


    if(decl.sym.flags & SymbolFlags.IS_FOREIGN) {
        return;
    }

    decl.sym.flags |= SymbolFlags.IS_EMITTED

    this.emitNotes(decl.attributes)
    this.emitLineInfo(decl.stmt)

    var name = this.cName(decl.sym)

    this.emit("typedef enum %s {", name)
    for(var i = 0; i < decl.fields.size(); i+=1) {
        if(i > 0) {
            this.emit(",\n")
        }

        var field = decl.fields.get(i)
        this.emit("%s_%.*s", name, field.name.str.length, field.name.str.buffer)
        if(field.value) {
            this.emitStrn(" = ", 3)
            this.emitStmt(field.value)
        }
    }
    this.emit("} %s;\n", name)

    // TODO: enumAsStr function
}