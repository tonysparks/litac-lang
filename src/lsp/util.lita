import "std/libc"
import "std/array"
import "std/map"
import "std/assert"

import "lsp/lsp"
import "lsp/protocol"

import "lex"
import "ast"
import "types"
import "symbols"
import "common"
import "module"

public enum SourceLocationKind {
    NONE,
    AST,
    TYPE,
}

@doc("The ast node at a particular location in the source code")
public struct SourceLocation {
    kind: SourceLocationKind
    module: *Module
    location: Location
    union {
        node: *Node
        type: *TypeSpec
    }
}

func PosToRange(srcPos: SrcPos, range: *Range) {
    var lineNumber = MAX(0, srcPos.lineNumber - 1)

    var offset = MAX(0, (srcPos.start - srcPos.lineStart) as (i32))
    range.start.character = offset
    range.start.line = lineNumber

    offset = MAX(1, (srcPos.end - srcPos.start) as (i32))
    range.end.character = offset
    range.end.line = lineNumber
}

public func IsSrcPosAtPosition(srcPos: *SrcPos, pos: Position) : bool {
    if(!srcPos) {
        return false
    }

    if(!srcPos.start) {
        return false
    }

    var fromIndex = srcPos.position
    var toIndex = fromIndex + (srcPos.end - srcPos.start) as (i32)

    if((pos.line+1) == srcPos.lineNumber) {
        if(pos.character >= fromIndex && pos.character <= toIndex) {
            return true
        }
    }

    return false
}

public struct SourceLookup {
    lsp: *LspServer
    lookupPos: Position
    result: SourceLocation
}

public func (this: *SourceLookup) findAstNodeByPosition(moduleAst: *ModuleStmt, pos: Position) : SourceLocation {
    if(!moduleAst) {
        return SourceLocation{}
    }

    this.visitStmt(moduleAst)

    return this.result
}

func (this: *SourceLookup) isNodeAtPos(node: *Node) : bool {
    if(!node) {
        return false
    }

    var srcPos = node.startPos
    if(this.isSrcAtPos(srcPos)) {
        this.result.kind = SourceLocationKind.AST
        this.result.node = node
        PosToRange(srcPos, &this.result.location.range)
        return true
    }

    return false
}

func (this: *SourceLookup) isSrcAtPos(srcPos: *SrcPos) : bool {
    if(!srcPos) {
        return false
    }

    if(IsSrcPosAtPosition(srcPos, this.lookupPos)) {
        PosToRange(srcPos, &this.result.location.range)
        return true
    }

    return false
}

func (this: *SourceLookup) isTokenAtPos(token: Token) : bool {
    if(IsSrcPosAtPosition(token.pos, this.lookupPos)) {
        PosToRange(token.pos, &this.result.location.range)
        return true
    }

    return false
}

func (this: *SourceLookup) isTypeAtPos(type: *TypeSpec) : bool {
    if(!type) {
        return false
    }

    switch(type.kind) {
        case TypeSpecKind.ARRAY: {
            var arraySpec = type
            if(arraySpec.numElements) {
                if(this.visitExpr(arraySpec.numElements)) {
                    return true
                }
            }
            if(this.isTypeAtPos(arraySpec.base)) {
                return true
            }
            break
        }
        case TypeSpecKind.PTR: {
            if(this.isTypeAtPos(type.base)) {
                return true
            }
            break
        }
        case TypeSpecKind.CONST: {
            if(this.isTypeAtPos(type.base)) {
                return true
            }
            break
        }
        case TypeSpecKind.NAME: {
            var name = type
            for(var i = 0; i < name.genericArgs.size(); i += 1) {
                var param = name.genericArgs.get(i)
                if(this.isTypeAtPos(param)) {
                    return true
                }
            }
            break
        }
        case TypeSpecKind.FUNC_PTR: {
            var funcPtr = type
            for(var i = 0; i < funcPtr.genericParams.size(); i += 1) {
                var param = funcPtr.genericParams.getPtr(i)
                if(this.isTokenAtPos(param.name.token)) {
                    return true
                }
            }

            for(var i = 0; i < funcPtr.args.size(); i += 1) {
                var param = funcPtr.args.get(i)
                if(this.isTypeAtPos(param)) {
                    return true
                }
            }

            if(this.isTypeAtPos(funcPtr.base)) {
                return true
            }

            if(this.isTypeAtPos(funcPtr.ret)) {
                return true
            }
            break
        }
        case TypeSpecKind.NONE:
        default: {
        }
    }

    if(this.isSrcAtPos(type.pos)) {
        this.result.kind = SourceLocationKind.TYPE
        this.result.type = type
        return true
    }

    return false
}


func (this: *SourceLookup) isDeclAtPos(decl: *Decl) : bool {
    if(!decl) {
        return false
    }

    if(this.isTokenAtPos(decl.name.token)) {
        this.result.kind = SourceLocationKind.AST
        this.result.node = &decl.stmt.node
        PosToRange(decl.name.token.pos, &this.result.location.range)
        return true
    }

    return this.isNodeAtPos(decl.node)
}

func (this: *SourceLookup) visitDecl(node: *Decl) : bool {
    if(!node) return false;

    switch(node.kind) {
        case StmtKind.IMPORT_DECL: {
            var decl = node as (*ImportDecl)

            if(decl.alias.token.type == TokenType.IDENTIFIER) {
                if(this.isTokenAtPos(decl.alias.token)) {
                    this.result.kind = SourceLocationKind.AST
                    this.result.node = &decl.stmt.node
                    return true
                }
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var decl = node as (*VarDecl)

            if(this.visitExpr(decl.expr)) {
                return true
            }

            if(this.isTypeAtPos(decl.typeSpec)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.TRAIT_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL: {
            var decl = node as (*AggregateDecl)
            for(var i = 0; i < decl.fields.size(); i += 1) {
                var field = decl.fields.getPtr(i)
                switch(field.kind) {
                    case StmtKind.TRAIT_FIELD_DECL: {
                        if(this.visitDecl(field.traitField)) {
                            return true
                        }
                        break
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        if(this.visitDecl(field.varField)) {
                            return true
                        }
                        break
                    }
                    case StmtKind.ENUM_FIELD_DECL: {
                        if(this.visitDecl(field.enumField)) {
                            return true
                        }
                        break
                    }
                    case StmtKind.STRUCT_FIELD_DECL:
                    case StmtKind.UNION_FIELD_DECL: {
                        if(this.visitDecl(field.aggregateField)) {
                            return true
                        }
                        break
                    }
                    default: assert(false)
                }
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.ENUM_DECL: {
            var decl = node as (*EnumDecl)
            for(var i = 0; i < decl.fields.size(); i += 1) {
                var field = decl.fields.get(i)
                if(this.visitDecl(field)) {
                    return true
                }
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.FUNC_DECL: {
            var decl = node as (*FuncDecl)

            if(this.visitStmt(decl.params)) {
                return true
            }

            if(this.visitStmt(decl.body)) {
                return true
            }

            if(this.isTypeAtPos(decl.returnType)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }

            break
        }
        case StmtKind.TYPEDEF_DECL: {
            var decl = node as (*TypedefDecl)

            if(this.isTypeAtPos(decl.type)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.PARAM_DECL: {
            var decl = node as (*ParameterDecl)
            if(decl.defaultExpr) {
                if(this.visitExpr(decl.defaultExpr)) {
                    return true
                }
            }
            if(this.isTypeAtPos(decl.type)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.NATIVE_DECL: {
            var decl = node as (*NativeDecl)
            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.NOTES_DECL: {
            // TODO - search all notes of the same type
            break
        }
        case StmtKind.ENUM_FIELD_ENTRY_DECL: {
            var decl = node as (*EnumFieldEntryDecl)

            if(this.visitExpr(decl.value)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.TRAIT_FIELD_DECL: {
            var decl = node as (*TraitFieldDecl)

            if(this.isTypeAtPos(decl.type)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.VAR_FIELD_DECL: {
            var decl = node as (*VarFieldDecl)

            if(this.visitExpr(decl.defaultExpr)) {
                return true
            }

            if(this.isTypeAtPos(decl.type)) {
                return true
            }

            if(this.isDeclAtPos(decl)) {
                return true
            }
            break
        }
        case StmtKind.ENUM_FIELD_DECL:
        case StmtKind.STRUCT_FIELD_DECL:
        case StmtKind.UNION_FIELD_DECL: {
            assert(false) // should be handled by respective declarations
            break
        }
        case StmtKind.POISON_DECL: {
            break
        }
        default:
    }

    return false
}


func (this: *SourceLookup) visitStmt(node: *Stmt) : bool {
    if(!node) return false;

    if(IsExpr(node)) {
        return this.visitExpr(node as (*Expr))
    }

    if(IsDecl(node)) {
        return this.visitDecl(node as (*Decl))
    }

    switch(node.kind) {
        case StmtKind.BLOCK_STMT: {
            var stmt = node as (*BlockStmt)
            for(var i = 0; i < stmt.stmts.size(); i += 1) {
                var s = stmt.stmts.get(i)
                if(this.visitStmt(s)) {
                    return true
                }
            }
            break
        }
        case StmtKind.DEFER_STMT: {
            var stmt = node as (*DeferStmt)
            if(this.visitStmt(stmt.deferedStmt)) {
                return true
            }
            break
        }
        case StmtKind.DO_WHILE_STMT: {
            var stmt = node as (*DoWhileStmt)
            if(this.visitExpr(stmt.cond)) {
                return true
            }
            if(this.visitStmt(stmt.body)) {
                return true
            }
            break
        }
        case StmtKind.FOR_STMT: {
            var stmt = node as (*ForStmt)
            if(this.visitStmt(stmt.init)) {
                return true
            }
            if(this.visitExpr(stmt.cond)) {
                return true
            }
            if(this.visitStmt(stmt.post)) {
                return true
            }
            if(this.visitStmt(stmt.body)) {
                return true
            }
            break
        }
        case StmtKind.FUNC_BODY_STMT: {
            var stmt = node as (*FuncBodyStmt)
            for(var i = 0; i < stmt.stmts.size(); i += 1) {
                var s = stmt.stmts.get(i)
                if(this.visitStmt(s)) {
                    return true
                }
            }
            break
        }
        case StmtKind.IF_STMT: {
            var stmt = node as (*IfStmt)
            if(this.visitExpr(stmt.cond)) {
                return true
            }

            if(this.visitStmt(stmt.then)) {
                return true
            }

            if(this.visitStmt(stmt.elseStmt)) {
                return true
            }
            break
        }
        case StmtKind.MODULE_STMT: {
            var stmt = node as (*ModuleStmt)
            for(var i = 0; i < stmt.imports.size(); i += 1) {
                var imp = stmt.imports.get(i)
                if(this.visitDecl(imp)) {
                    return true
                }
            }

            for(var i = 0; i < stmt.notes.size(); i += 1) {
                var n = stmt.notes.get(i)
                if(this.visitStmt(n)) {
                    return true
                }
            }

            for(var i = 0; i < stmt.declarations.size(); i += 1) {
                var d = stmt.declarations.get(i)
                if(this.visitDecl(d)) {
                    return true
                }
            }
            break
        }
        case StmtKind.PARAMETERS_STMT: {
            var stmt = node as (*ParametersStmt)

            for(var i = 0; i < stmt.params.size(); i += 1) {
                var p = stmt.params.get(i)
                if(this.visitDecl(p)) {
                    return true
                }
            }
            break
        }
        case StmtKind.RETURN_STMT: {
            var stmt = node as (*ReturnStmt)
            if(this.visitExpr(stmt.expr)) {
                return true
            }
            break
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var stmt = node as (*SwitchCaseStmt)
            if(this.visitExpr(stmt.cond)) {
                return true
            }
            if(this.visitStmt(stmt.body)) {
                return true
            }
            break
        }
        case StmtKind.SWITCH_STMT: {
            var stmt = node as (*SwitchStmt)
            if(this.visitExpr(stmt.cond)) {
                return true
            }

            for(var i = 0; i < stmt.cases.size(); i += 1) {
                var s = stmt.cases.get(i)
                if(this.visitStmt(s)) {
                    return true
                }
            }

            if(this.visitStmt(stmt.defaultStmt)) {
                return true
            }
            break
        }
        case StmtKind.WHILE_STMT: {
            var stmt = node as (*WhileStmt)
            if(this.visitExpr(stmt.cond)) {
                return true
            }
            if(this.visitStmt(stmt.body)) {
                return true
            }
            break
        }
        case StmtKind.BREAK_STMT: {
            break
        }
        case StmtKind.CONTINUE_STMT: {
            break
        }
        case StmtKind.EMPTY_STMT: {
            break
        }
        case StmtKind.GOTO_STMT: {
            break
        }
        case StmtKind.COMP_STMT: {
            break
        }
        case StmtKind.LABEL_STMT: {
            break
        }
        case StmtKind.NOTE_STMT: {
            break
        }
        default:
    }

    return false
}

func (this: *SourceLookup) visitExpr(node: *Expr) : bool {
    if(!node) return false;

    switch(node.kind) {
        case StmtKind.ARRAY_DESIGNATION_EXPR: {
            var expr = node as (*ArrayDesignationExpr)
            if(this.visitExpr(expr.value)) {
                return true
            }
            if(this.visitExpr(expr.index)) {
                return true
            }
            break
        }
        case StmtKind.ARRAY_INIT_EXPR: {
            var expr = node as (*ArrayInitExpr)

            if(this.isTypeAtPos(expr.type)) {
                return true
            }

            for(var i = 0; i < expr.values.size(); i += 1) {
                var e = expr.values.get(i)
                if(this.visitExpr(e)) {
                    return true
                }
            }
            break
        }
        case StmtKind.BINARY_EXPR: {
            var expr = node as (*BinaryExpr)
            if(this.visitExpr(expr.left)) {
                return true
            }
            if(this.visitExpr(expr.right)) {
                return true
            }
            break
        }
        case StmtKind.CAST_EXPR: {
            var expr = node as (*CastExpr)
            if(this.visitExpr(expr.exprToCast)) {
                return true
            }
            if(this.isTypeAtPos(expr.castTo)) {
                return true
            }
            break
        }
        case StmtKind.FUNC_CALL_EXPR: {
            var expr = node as (*FuncCallExpr)

            /* NOTE: This is already accounted for in the visitExpr(expr.object)
            for(var i = 0; i < expr.genericArgs.size(); i += 1) {
                var arg = expr.genericArgs.get(i)
                if(this.isTypeAtPos(arg)) {
                    var name = arg as (*NameTypeSpec)
                    this.lsp.log("Found type: ~%s\n", name.name)
                    if(name.typeInfo) {
                        this.lsp.log("TypeInfo: ~%s\n", TypeKindAsStr(name.typeInfo.kind))
                    }
                    else {
                        this.lsp.log("No TypeInfo\n")
                    }
                    return true
                }
            }*/

            if(this.visitExpr(expr.object)) {
                return true
            }
            for(var i = 0; i < expr.arguments.size(); i += 1) {
                var arg = expr.arguments.get(i).argExpr
                if(this.visitExpr(arg)) {
                    return true
                }
            }
            break
        }
        case StmtKind.FUNC_IDENTIFIER_EXPR:
        case StmtKind.IDENTIFIER_EXPR: {
            var expr = node as (*IdentifierExpr)
            if(this.isTypeAtPos(expr.type)) {
                this.result.kind = SourceLocationKind.AST
                this.result.node = &expr.node
                return true
            }
            break
        }
        case StmtKind.TYPE_IDENTIFIER_EXPR: {
            var expr = node as (*TypeIdentifierExpr)
            if(this.isTypeAtPos(expr.type)) {
                return true
            }
            break
        }
        case StmtKind.GET_EXPR: {
            var expr = node as (*GetExpr)
            if(this.visitExpr(expr.object)) {
                return true
            }
            if(this.visitExpr(expr.field)) {
                // do the full get expression, so we know
                // this is a field access
                this.result.kind = SourceLocationKind.AST
                this.result.node = &node.stmt.node
                return true
            }
            break
        }
        case StmtKind.GROUP_EXPR: {
            var expr = node as (*GroupExpr)
            if(this.visitExpr(expr.groupedExpr)) {
                return true
            }
            break
        }

        case StmtKind.INIT_EXPR: {
            var expr = node as (*InitExpr)
            if(this.isTypeAtPos(expr.type)) {
                return true
            }
            for(var i = 0; i < expr.genericArgs.size(); i += 1) {
                var arg = expr.genericArgs.get(i)
                if(this.isTypeAtPos(arg)) {
                    return true
                }
            }
            for(var i = 0; i < expr.arguments.size(); i += 1) {
                var arg = expr.arguments.get(i)
                if(this.visitExpr(arg)) {
                    return true
                }
            }
            break
        }
        case StmtKind.INIT_ARG_EXPR: {
            var expr = node as (*InitArgExpr)

            if(this.visitExpr(expr.value)) {
                return true
            }

            if(expr.fieldName.token.type == TokenType.IDENTIFIER) {
                if(this.isTokenAtPos(expr.fieldName.token)) {
                    this.result.kind = SourceLocationKind.AST
                    this.result.node = &node.stmt.node
                    return true
                }
            }
            break
        }
        case StmtKind.OFFSET_OF_EXPR: {
            var expr = node as (*OffsetOfExpr)
            if(this.isTypeAtPos(expr.type)) {
                return true
            }

            if(expr.field.token.type == TokenType.IDENTIFIER) {
                if(this.isTokenAtPos(expr.field.token)) {
                    // TODO: Field reference
                    return true
                }
            }
            break
        }
        case StmtKind.SET_EXPR: {
            var expr = node as (*SetExpr)
            if(this.visitExpr(expr.object)) {
                return true
            }
            if(this.visitExpr(expr.field)) {
                // do the full get expression, so we know
                // this is a field access
                this.result.kind = SourceLocationKind.AST
                this.result.node = &node.stmt.node
                return true
            }
            if(this.visitExpr(expr.value)) {
                return true
            }
            break
        }
        case StmtKind.SIZE_OF_EXPR: {
            var expr = node as (*SizeOfExpr)
            if(this.visitExpr(expr.sizeOfExpr)) {
                return true
            }
            break
        }

        case StmtKind.SUBSCRIPT_GET_EXPR: {
            var expr = node as (*SubscriptGetExpr)
            if(this.visitExpr(expr.object)) {
                return true
            }
            if(this.visitExpr(expr.index)) {
                return true
            }
            break
        }
        case StmtKind.SUBSCRIPT_SET_EXPR: {
            var expr = node as (*SubscriptSetExpr)
            if(this.visitExpr(expr.object)) {
                return true
            }
            if(this.visitExpr(expr.index)) {
                return true
            }
            if(this.visitExpr(expr.value)) {
                return true
            }
            break
        }
        case StmtKind.TERNARY_EXPR: {
            var expr = node as (*TernaryExpr)
            if(this.visitExpr(expr.cond)) {
                return true
            }
            if(this.visitExpr(expr.then)) {
                return true
            }
            if(this.visitExpr(expr.other)) {
                return true
            }
            break
        }

        case StmtKind.TYPE_OF_EXPR: {
            var expr = node as (*TypeOfExpr)
            if(this.isTypeAtPos(expr.type)) {
                return true
            }

            if(this.visitExpr(expr.typeOfExpr)) {
                return true
            }
            break
        }
        case StmtKind.UNARY_EXPR: {
            var expr = node as (*UnaryExpr)
            if(this.visitExpr(expr.unaryExpr)) {
                return true
            }
            break
        }

        case StmtKind.NULL_EXPR:
        case StmtKind.NUMBER_EXPR:
        case StmtKind.STRING_EXPR:
        case StmtKind.CHAR_EXPR:
        case StmtKind.BOOLEAN_EXPR:
        case StmtKind.POISON_EXPR: {
            break
        }
        default:
    }

    return false
}