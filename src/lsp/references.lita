import "std/libc"
import "std/assert"
import "std/json"
import "std/map"
import "std/array"
import "std/mem"
import "std/string/builder"
import "std/hash"

import "ast"
import "common"
import "lita"
import "lex"
import "parser"
import "types"
import "symbols"
import "module"

import "lsp/workspace"
import "lsp/protocol"
import "lsp/lsp"
import "lsp/util"


public struct Reference {
    type: Typeid
    pos: SrcPos
}

struct FieldReference {
    /* the parent structure typeid this fields belongs to */
    parent: Typeid
    /* the offset into the structure where the field is */
    offset: i32
    /* the source position */
    pos: SrcPos
}

public struct ReferenceDatabase {
    allocator: *const Allocator
    typeReferences: Array<Reference>
    fieldReferences: Array<FieldReference>
    symbols: Map<usize, Array<SrcPos>>
}


public func (this: *ReferenceDatabase) init(allocator: *const Allocator) {
    this.allocator = allocator

    const INITIAL_SIZE = 1024
    this.typeReferences.init(INITIAL_SIZE, allocator)
    this.fieldReferences.init(INITIAL_SIZE, allocator)
    this.symbols.init(Array<SrcPos>{}, INITIAL_SIZE, allocator)
}

public func (this: *ReferenceDatabase) addSymbolReference(symbol: *Symbol, pos: SrcPos) {
    if(!symbol) return;

    var ptr = symbol as (usize)
    if(!this.symbols.contains(ptr)) {
        var locations = ArrayInit<SrcPos>(16, this.allocator)
        this.symbols.put(ptr, locations)
    }

    var locations = this.symbols.getPtr(ptr)
    locations.add(pos)
}


public func (this: *ReferenceDatabase) addTypeReference(type: *TypeSpec) {
    if(!type) return;

    var base = type.getBaseType()
    if(!base) return;

    this.addTypeReferenceByTypeInfo(type.pos, base.typeInfo)
}

public func (this: *ReferenceDatabase) addTypeReferenceBySymbol(srcPos: SrcPos, sym: *Symbol) {
    if(sym && sym.type) {
        this.addTypeReferenceByTypeInfo(srcPos, sym.type)
    }
}

public func (this: *ReferenceDatabase) addTypeReferenceByTypeInfo(srcPos: SrcPos, typeInfo: *TypeInfo) {
    if(!typeInfo) return;

    typeInfo = typeInfo.getBaseType()

    // if this is a generic type, make sure to add references
    // to the base generic template - this allows for the generic template itself
    // to look up references
    if(IsGenericCapable(typeInfo)) {
        if(typeInfo.sym && typeInfo.sym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE) {
            var genInfo = typeInfo
            this.typeReferences.add(Reference {
                .type = genInfo.genericTypeid,
                .pos = srcPos
            })
        }
    }

    this.typeReferences.add(Reference {
        .type = typeInfo.typeid,
        .pos = srcPos
    })
}

public func (this: *ReferenceDatabase) addFieldReference(srcPos: SrcPos, parent: *TypeInfo, offset: i32) {
    if(!parent) return;

    this.fieldReferences.add(FieldReference {
        .parent = parent.typeid,
        .offset = offset,
        .pos = srcPos
    })
}

public func (this: *ReferenceDatabase) getSymbolReferences(symbol: *Symbol) : Array<SrcPos> {
    if(!symbol) return Array<SrcPos>{}

    var ptr = symbol as (usize)
    if(this.symbols.contains(ptr)) {
        var result = this.symbols.get(ptr)
        return result
    }

    return Array<SrcPos>{}
}

public func (this: *ReferenceDatabase) removeLocalSymbolReferences(module: *Module) {
    if(!module) return;

    for(var it = this.symbols.iter(); it.hasNext();) {
        var entry = it.next()
        var symbol = entry.key as (*Symbol)
        if(symbol && (symbol.flags & SymbolFlags.IS_LOCAL) && symbol.declared.equals(module)) {
            it.remove();
        }
    }
}


public func (this: *ReferenceDatabase) getTypeReferences(typeid: Typeid, results: *Array<SrcPos>) {
    for(var i = 0; i < this.typeReferences.size(); i += 1) {
        var ref = this.typeReferences.getPtr(i)
        if(ref.type == typeid) {
            results.add(ref.pos)
        }
    }
}

public func (this: *ReferenceDatabase) getFieldReferences(typeid: Typeid, offset: i32, results: *Array<SrcPos>) {
    for(var i = 0; i < this.fieldReferences.size(); i += 1) {
        var ref = this.fieldReferences.getPtr(i)
        if(ref.parent == typeid && ref.offset == offset) {
            results.add(ref.pos)
        }
    }
}

