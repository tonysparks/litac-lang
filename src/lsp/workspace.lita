import "std/libc"
import "std/array"
import "std/map"
import "std/json"
import "std/string_buffer"
import "std/string"
import "std/mem"
import "std/system"
import "std/assert"

import "lita"
import "phase_result"
import "symbols"
import "checker"
import "module"
import "ast"
import "lex"
import "types"
import "common"

import "lsp/lsp"
import "lsp/protocol"
import "lsp/references"
import "lsp/util"

public struct Workspace {
    allocator: *const Allocator
    lsp: *LspServer
    rootPath: *const char
    openedDocuments: Map<*const char, *Document>
}

public struct Document {
    filename: [MAX_PATH]char
    text: StringBuffer

    lineMap: Array<u32>
}

public func (this: *Workspace) init(lsp: *LspServer, alloc: *const Allocator) {
    this.allocator = alloc
    this.lsp = lsp
    this.openedDocuments = StrMap<*Document>(null, 64, this.allocator)
}

public func (this: *Workspace) setup(rootPath: *const char, rootUri: *const char) {
    this.rootPath = rootPath
    var lita = this.lsp.lita

    var filepath = [MAX_PATH]char{0};
    var pathStr = StringInit(filepath, MAX_PATH, 0);

    // TODO:
    // Defer full build compilation if no main is found
    // set what we can, but wait for user to open first file
    // and do full compilation based off of first file...

    pathStr.format("%s/src/main.lita", rootPath)
    this.lsp.log("Checking for main at: '%s'...", pathStr.cStr())

    if(!FileExists(pathStr.cStrConst())) {
        // TODO: Inspect the URI
        this.lsp.log("unable to find main.lita from '%s'\n", rootPath)
        return;
    }


    this.lsp.log("found!\n")

    GetAbsolutePath("", pathStr.cStr(), lita.options.inputFile)
    FilePath(lita.options.inputFile, lita.options.srcPath)

    var lib:*const char = GetEnv("LITAC_HOME")
    if(!lib) lib = "";

    GetAbsolutePath("", lib, lita.options.litaPath)

    this.lsp.log("Lita.inputFile = '%s'\nLita.srcPath = '%s'\nLita.libPath = '%s'\nLita.litaPath = '%s'\n",
        lita.options.inputFile,
        lita.options.srcPath,
        lita.options.libPath,
        lita.options.litaPath)

    lita.options.checkerOnly = true

    this.runDiagnostics(.docUri = null, .isFullBuild = true)
}

public func (this: *Workspace) isDocumentOpen(uri: *const char) : bool {
    if(!uri) return false;

    return this.openedDocuments.contains(uri)
}

public func (this: *Workspace) openDocument(uri: *const char, text: *const char) {
    if(!uri) return;

    var moduleUri = StringClone(uri, -1, this.allocator)

    var doc = new<Document>(this.allocator)
    doc.lineMap.init(256, this.allocator)
    doc.text = StringBufferInit(strlen(text), this.allocator)

    doc.setText(text)

    UriToFilePath(uri, doc.filename)

    this.openedDocuments.put(moduleUri, doc)
}

public func (this: *Workspace) closeDocument(uri: *const char) {
    if(!uri) return;

    var doc = this.openedDocuments.remove(uri)
    if(!doc) {
        // Remove from file cache
    }
}

public func (this: *Workspace) saveDocument(uri: *const char) {
    if(!uri) return;
    // TODO: Implement...
}

public func (this: *Workspace) changeDocument(change: *TextDocumentDidChange) {
    if(!change) return;

    var doc = this.openedDocuments.get(change.textDocument.uri)
    if(!doc) {
        return;
    }

    for(var i = 0; i < change.numOfContentChanges; i += 1) {
        var event = &change.contentChanges[i]
        if(event.hasRange) {
            doc.insert(event.range, event.text)
        }
        else {
            doc.setText(event.text)
        }
    }

    //this.lsp.log("Changed document: '%s'\n", doc.filename)
    this.runDiagnostics(change.textDocument.uri)

}

public func (this: *Workspace) documentSymbols(uri: *const char, alloc: *const Allocator) : *JsonNode {
    if(!uri) return null;

    var doc = this.openedDocuments.get(uri)
    this.lsp.log("Uri: '%s' has doc: %d\n", uri, doc != null)
    if(!doc) return null;

    /*var runResults = this.runDiagnostics(uri)
    if(!runResults.isReadable) {
        return null
    }*/

    var syms = &this.lsp.lita.programSymbols
    var results = CreateJsonArray(alloc)

    //this.lsp.log("Number of Symbols: %d\n", syms.values.size() + syms.symbolTypes.size() + syms.symbolFuncs.size())

    // Generics
    /*for(var it = this.lsp.lita.genericSymbols.iter(); it.hasNext();) {
        var entry = it.next()
        var sym = entry.value

        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }*/

    // Values
    for(var i = 0; i < syms.values.size(); i += 1) {
        var sym = syms.values.get(i)
        if(sym.flags & SymbolFlags.IS_HIDDEN) {
            continue
        }
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    // Types
    for(var i = 0; i < syms.symbolTypes.size(); i += 1) {
        var sym = syms.symbolTypes.get(i)
        if(sym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE) {
            continue
        }
        if(sym.flags & SymbolFlags.IS_HIDDEN) {
            continue
        }
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    // Show functions
    for(var i = 0; i < syms.symbolFuncs.size(); i += 1) {
        var sym = syms.symbolFuncs.get(i)
        if(sym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE) {
            continue
        }
        if(sym.flags & SymbolFlags.IS_HIDDEN) {
            continue
        }
        this.addDocumentSymbol(results, sym, doc.filename, alloc)
    }

    return results
}

func (this: *Workspace) addDocumentSymbol(results: *JsonNode, sym: *Symbol, docFilename: *const char, alloc: *const Allocator) {
    var absPath = [MAX_PATH]char{0}
    var path = GetAbsolutePath(this.rootPath, sym.declared.id.filename, absPath)

    if(PathEquals(path, docFilename)) {
        var info = SymbolToSymbolInformation(sym, this.rootPath, alloc)
        if(info) {
            results.add(info)
        }
    }
}

public func (this: *Workspace) references(uri: *const char, position: *JsonNode, alloc: *const Allocator) : *JsonNode {
    this.lsp.log("looking up references...\n")
    if(!uri || !position) return JSON_NULL;

    /*var runResults = this.runDiagnostics(uri)
    if(!runResults.isReadable) {
        return JSON_NULL
    }*/

    var location = this.getNodeAtSourcePos(uri, position)
    if(location.kind == SourceLocationKind.NONE) {
        return JSON_NULL
    }

    if(location.kind == SourceLocationKind.AST) {
        this.lsp.log("Found ast node: %s\n", StmtKindAsStr(location.node.kind))

        switch(location.node.kind) {
            case StmtKind.NATIVE_DECL:
            case StmtKind.TYPEDEF_DECL:
            case StmtKind.UNION_DECL:
            case StmtKind.STRUCT_DECL:
            case StmtKind.TRAIT_DECL:
            case StmtKind.ENUM_DECL:
            case StmtKind.FUNC_DECL: {
                var decl = location.node as (*Decl)

                // look for the type references
                if(decl.sym && decl.sym.type) {

                    var typeid = decl.sym.type.typeid
                    return this.findTypeReferences(typeid, alloc)
                }
                break
            }
            case StmtKind.TRAIT_FIELD_DECL: {
                var varField = location.node as (*TraitFieldDecl)
                var parentNode = varField.parent
                while(parentNode && (parentNode.kind == StmtKind.UNION_DECL || parentNode.kind == StmtKind.STRUCT_DECL)) {
                    var decl = parentNode as (*AggregateDecl)
                    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
                        parentNode = decl.parent
                    }
                    else {
                        var parentType = decl.sym.type
                        if(parentType) {
                            var aggInfo = parentType
                            var fieldResult = aggInfo.getFieldPosition(varField.name.str)
                            this.lsp.log("Getting field position: %d\n", fieldResult.position)
                            if(fieldResult.aggInfo) {
                                return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                            }
                        }
                        break
                    }
                }
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = location.node as (*VarFieldDecl)
                var parentNode = varField.parent
                while(parentNode && (parentNode.kind == StmtKind.UNION_DECL || parentNode.kind == StmtKind.STRUCT_DECL)) {
                    var decl = parentNode as (*AggregateDecl)
                    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
                        parentNode = decl.parent
                    }
                    else {
                        var parentType = decl.sym.type
                        if(parentType) {
                            var aggInfo = parentType
                            var fieldResult = aggInfo.getFieldPosition(varField.name.str)
                            this.lsp.log("Getting field position: %d\n", fieldResult.position)
                            if(fieldResult.aggInfo) {
                                return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                            }
                        }
                        break
                    }
                }
                break
            }
            case StmtKind.CONST_DECL:
            case StmtKind.VAR_DECL:
            case StmtKind.PARAM_DECL: {
                var decl = location.node as (*Decl)
                var result = this.lsp.lita.references.getSymbolReferences(decl.sym)
                return SrcPosToLocations(this.rootPath, &result, alloc)
            }
            case StmtKind.INIT_ARG_EXPR: {
                var arg = location.node as (*InitArgExpr)
                var parentNode = arg.parent
                if(parentNode && (parentNode.kind == StmtKind.INIT_EXPR)) {
                    var init = parentNode as (*InitExpr)
                    var parentType = init.operand.typeInfo
                    if(IsAggregate(parentType)) {
                        var aggInfo = parentType
                        var fieldResult = aggInfo.getFieldPosition(arg.fieldName.str)
                        if(fieldResult.aggInfo) {
                            this.lsp.log("Getting field position: %llu %d\n", fieldResult.aggInfo.typeid, fieldResult.position)
                            return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                        }
                    }
                }
                break
            }
            case StmtKind.FUNC_IDENTIFIER_EXPR: {
                var expr = location.node as (*IdentifierExpr)
                if(expr.sym && expr.sym.type) {
                    return this.findTypeReferences(expr.sym.type.typeid, alloc)
                }
                break
            }
            case StmtKind.IDENTIFIER_EXPR: {
                var expr = location.node as (*IdentifierExpr)
                var result = this.lsp.lita.references.getSymbolReferences(expr.sym)

                /*
                this.lsp.log("Reference for an identifier locations: {\n")
                for(var i = 0; i < result.size(); i += 1) {
                    var pos = result.get(i)
                    this.lsp.log("Filename: '%s':%d:%d\n", pos.filename, pos.lineNumber, pos.position)
                }
                for(var it = this.lsp.lita.references.symbols.iter(); it.hasNext();) {
                    var n = it.next()
                    this.lsp.log("Symbol: %p size: %d\n", n.key, n.value.size())
                }
                this.lsp.log("}\n")*/

                return SrcPosToLocations(this.rootPath, &result, alloc)
            }
            case StmtKind.GET_EXPR: {
                var expr = location.node as (*GetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()

                // if aggregate, check aggregate fields
                if(IsAggregate(base)) {
                    var aggInfo = base
                    var fieldResult = aggInfo.getFieldPosition(expr.field.type.name)
                    this.lsp.log("Getting field position: %d\n", fieldResult.position)
                    if(fieldResult.aggInfo) {
                        return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                    }
                }
                else if (base.kind == TypeKind.ENUM) {
                    var enumInfo = base
                    var index = enumInfo.getEnumFieldIndex(expr.field.type.name)
                    this.lsp.log("Getting enum position: %d\n", index)
                    return this.findFieldReferences(enumInfo.typeid, index, alloc)
                }

                // This might be a method call, we must check all functions in the entire program
                // for the method declaration
                // use the field operand vs. the field.sym because it's the one that always
                // gets resolved in the type checker phase
                if(!expr.field.operand.typeInfo) {
                    break
                }

                var fieldType = expr.field.operand.typeInfo.typeid

                for(var i = 0; i < this.lsp.lita.programSymbols.symbolFuncs.size(); i += 1) {
                    var fn = this.lsp.lita.programSymbols.symbolFuncs.get(i)
                    if(!(fn.flags & SymbolFlags.IS_METHOD)) {
                        continue
                    }

                    if(fn.type.typeid == fieldType) {
                        return this.findTypeReferences(fn.type.typeid, alloc)
                    }
                }

                break
            }
            case StmtKind.SET_EXPR: {
                var expr = location.node as (*SetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()
                if(IsAggregate(base)) {
                    var aggInfo = base
                    var fieldResult = aggInfo.getFieldPosition(expr.field.type.name)
                    if(fieldResult.aggInfo) {
                        return this.findFieldReferences(fieldResult.aggInfo.typeid, fieldResult.position, alloc)
                    }
                }
                else if (base.kind == TypeKind.ENUM) {
                    var enumInfo = base
                    var index = enumInfo.getEnumFieldIndex(expr.field.type.name)
                    this.lsp.log("Getting enum position: %d\n", index)
                    return this.findFieldReferences(enumInfo.typeid, index, alloc)
                }
                break
            }
            default: {
            }
        }
    }
    else if(location.kind == SourceLocationKind.TYPE) {
        this.lsp.log("Found type: %s\n", TypeSpecKindAsStr(location.type.kind))
        if(!location.type.typeInfo) {
            return JSON_NULL
        }

        var typeid = location.type.typeInfo.typeid
        this.lsp.log("~typeid: %llu\n", typeid)
        return this.findTypeReferences(typeid, alloc)
    }

    return JSON_NULL
}


func (this: *Workspace) findTypeReferences(typeid: Typeid, alloc: *const Allocator) : *JsonNode {
    var results = ArrayInit<SrcPos>(64, alloc)
    this.lsp.lita.references.getTypeReferences(typeid, &results)

    return SrcPosToLocations(this.rootPath, &results, alloc)
}


func (this: *Workspace) findFieldReferences(typeid: Typeid, offset: i32, alloc: *const Allocator) : *JsonNode {
    var results = ArrayInit<SrcPos>(64, alloc)
    this.lsp.lita.references.getFieldReferences(typeid, offset, &results)

    return SrcPosToLocations(this.rootPath, &results, alloc)
}

func (this: *Workspace) getNodeAtSourcePos(uri: *const char, position: *JsonNode) : SourceLocation {
    assert(uri != null)
    assert(position != null)

    var doc = this.openedDocuments.get(uri)
    var pos = Position {
        .line = position.getInt("line", 0),
        .character = position.getInt("character", 0)
    }

    var lookup = SourceLookup {
        .lsp = this.lsp,
        .lookupPos = pos,
        .result = SourceLocation {
            .kind = SourceLocationKind.NONE,
            .module = null,
            .location = Location {
                .uri = uri,
            },
        }
    }

    var module = this.lsp.lita.getModule(doc.filename)
    if(!module) {
        this.lsp.log("No module found for: '%s'\n", doc.filename)
        return SourceLocation {
            .kind = SourceLocationKind.NONE
        }
    }

    this.lsp.log("Module for: '%s'\n", doc.filename)
    var location = lookup.findAstNodeByPosition(module.ast, pos)
    location.module = module

    return location
}

public func (this: *Workspace) goToDefinition(uri: *const char, position: *JsonNode, alloc: *const Allocator) : *JsonNode {
    this.lsp.log("looking up definition...\n")
    if(!uri || !position) return JSON_NULL;

    /*var runResults = this.runDiagnostics(uri)
    if(!runResults.isReadable) {
        return JSON_NULL
    }*/

    var location = this.getNodeAtSourcePos(uri, position)
    if(location.kind == SourceLocationKind.NONE) {
        //this.lsp.log("No ast node found at '%s:%d:%d'\n", uri, pos.line, pos.character)
        var pos = Position {
            .line = position.getInt("line", 0),
            .character = position.getInt("character", 0)
        }
        this.lsp.log("No ast node found at '%s:%d:%d'\n", uri, pos.line, pos.character)
        return JSON_NULL
    }

    if(location.kind == SourceLocationKind.AST) {
        this.lsp.log("Found ast node: %s\n", StmtKindAsStr(location.node.kind))

        switch(location.node.kind) {
            case StmtKind.IMPORT_DECL: {
                var importDecl = location.node as (*ImportDecl)
                if(!importDecl.moduleId) {
                    this.lsp.log("ImportDecl.moduleId is null!\n")
                    return JSON_NULL
                }

                var pos = SrcPos {
                    .filename = importDecl.moduleId.filename,
                    .lineStart = null,
                    .start = null,
                    .end = null,
                    .lineNumber = 1,
                    .position = 0
                }

                return SrcPosWithEndToLocation(pos, pos, this.rootPath, alloc)
            }
            case StmtKind.NATIVE_DECL:
            case StmtKind.TYPEDEF_DECL:
            case StmtKind.UNION_DECL:
            case StmtKind.STRUCT_DECL:
            case StmtKind.TRAIT_DECL:
            case StmtKind.ENUM_DECL:
            case StmtKind.FUNC_DECL: {
                // not really necessary, as this will just point back to where the user is currently
                // asking for the definition -- but OK.
                var decl = location.node as (*Decl)
                return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
            }
            case StmtKind.TRAIT_FIELD_DECL: {
                var varField = location.node as (*TraitFieldDecl)
                var parentNode = varField.parent
                while(parentNode && (parentNode.kind == StmtKind.UNION_DECL || parentNode.kind == StmtKind.STRUCT_DECL)) {
                    var decl = parentNode as (*AggregateDecl)
                    /*
                    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
                        parentNode = decl.parent
                    }
                    else */{
                        var parentType = decl.sym.type
                        if(parentType) {
                            var aggInfo = parentType
                            var fieldResult = aggInfo.getFieldPosition(varField.name.str)
                            this.lsp.log("Getting field position: %d\n", fieldResult.position)
                            if(fieldResult.aggInfo && fieldResult.aggInfo.sym) {
                                var decl = fieldResult.aggInfo.sym.decl
                                return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
                            }
                        }
                        break
                    }
                }
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = location.node as (*VarFieldDecl)
                var parentNode = varField.parent
                while(parentNode && (parentNode.kind == StmtKind.UNION_DECL || parentNode.kind == StmtKind.STRUCT_DECL)) {
                    var decl = parentNode as (*AggregateDecl)
                    /*
                    if(decl.flags & AggregateFlags.IS_ANONYMOUS) {
                        parentNode = decl.parent
                    }
                    else */{
                        var parentType = decl.sym.type
                        if(parentType) {
                            var aggInfo = parentType
                            var fieldResult = aggInfo.getFieldPosition(varField.name.str)
                            this.lsp.log("Getting field position: %d\n", fieldResult.position)
                            if(fieldResult.aggInfo && fieldResult.aggInfo.sym) {
                                var decl = fieldResult.aggInfo.sym.decl
                                return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
                            }
                        }
                        break
                    }
                }
                break
            }

            case StmtKind.CONST_DECL:
            case StmtKind.VAR_DECL:
            case StmtKind.PARAM_DECL: {
                // nothing to do here, we are already at the definition
                break
            }
            case StmtKind.INIT_ARG_EXPR: {
                var arg = location.node as (*InitArgExpr)
                var parentNode = arg.parent
                if(parentNode && (parentNode.kind == StmtKind.INIT_EXPR)) {
                    var init = parentNode as (*InitExpr)
                    var parentType = init.operand.typeInfo
                    if(IsAggregate(parentType)) {
                        var aggInfo = parentType

                        var field = aggInfo.getField(arg.fieldName.str)
                        if(field.kind != StmtKind.POISON_EXPR) {
                            switch(field.kind) {
                                case StmtKind.VAR_FIELD_DECL: {
                                    var varField = field.varField
                                    return SrcPosWithEndToLocation(varField.startPos, varField.endPos, this.rootPath, alloc)
                                }
                                case StmtKind.ENUM_FIELD_DECL: {
                                    var enumField = field.enumField
                                    return SrcPosWithEndToLocation(enumField.startPos, enumField.endPos, this.rootPath, alloc)
                                }
                                case StmtKind.UNION_FIELD_DECL:
                                case StmtKind.STRUCT_FIELD_DECL: {
                                    var aggField = field.aggregateField
                                    return SrcPosWithEndToLocation(aggField.startPos, aggField.endPos, this.rootPath, alloc)
                                }
                                default: {
                                }
                            }
                        }
                    }
                }
                break
            }
            case StmtKind.FUNC_IDENTIFIER_EXPR:
            case StmtKind.IDENTIFIER_EXPR: {
                var expr = location.node as (*IdentifierExpr)
                if(expr.sym && expr.sym.decl) {
                    var decl = expr.sym.decl
                    return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
                }

                break
            }
            case StmtKind.GET_EXPR: {
                var expr = location.node as (*GetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()
                if(!base) {
                    break
                }

                if(IsAggregate(base)) {
                    var aggInfo = base
                    var field = aggInfo.getField(expr.field.type.name)
                    if(field.kind != StmtKind.POISON_EXPR) {
                        switch(field.kind) {
                            case StmtKind.TRAIT_FIELD_DECL: {
                                var varField = field.traitField
                                return SrcPosWithEndToLocation(varField.startPos, varField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.VAR_FIELD_DECL: {
                                var varField = field.varField
                                return SrcPosWithEndToLocation(varField.startPos, varField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.ENUM_FIELD_DECL: {
                                var enumField = field.enumField
                                return SrcPosWithEndToLocation(enumField.startPos, enumField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.UNION_FIELD_DECL:
                            case StmtKind.STRUCT_FIELD_DECL: {
                                var aggField = field.aggregateField
                                return SrcPosWithEndToLocation(aggField.startPos, aggField.endPos, this.rootPath, alloc)
                            }
                            default: {
                            }
                        }
                    }
                }
                else if (base.kind == TypeKind.ENUM) {
                    var enumInfo = base
                    var index = enumInfo.getEnumFieldIndex(expr.field.type.name)
                    if(index >= 0) {
                        var entryDecl = enumInfo.enumDecl.fields.get(index)
                        return SrcPosWithEndToLocation(entryDecl.startPos, entryDecl.endPos, this.rootPath, alloc)
                    }
                }

                // This might be a method call, we must check all functions in the entire program
                // for the method declaration
                // use the field operand vs. the field.sym because it's the one that always
                // gets resolved in the type checker phase
                if(!expr.field.operand.typeInfo) {
                    break
                }

                var fieldType = expr.field.operand.typeInfo.typeid

                for(var i = 0; i < this.lsp.lita.programSymbols.symbolFuncs.size(); i += 1) {
                    var fn = this.lsp.lita.programSymbols.symbolFuncs.get(i)
                    if(!(fn.flags & SymbolFlags.IS_METHOD)) {
                        continue
                    }

                    if(fn.type.typeid == fieldType) {
                        var decl = fn.decl
                        return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
                    }
                }
                break
            }
            case StmtKind.SET_EXPR: {
                var expr = location.node as (*SetExpr)
                var base = expr.object.operand.typeInfo.getBaseType()
                if(IsAggregate(base)) {
                    var aggInfo = base
                    var field = aggInfo.getField(expr.field.type.name)
                    if(field.kind != StmtKind.POISON_EXPR) {
                        switch(field.kind) {
                            case StmtKind.TRAIT_FIELD_DECL: {
                                var varField = field.traitField
                                return SrcPosWithEndToLocation(varField.startPos, varField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.VAR_FIELD_DECL: {
                                var varField = field.varField
                                return SrcPosWithEndToLocation(varField.startPos, varField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.ENUM_FIELD_DECL: {
                                var enumField = field.enumField
                                return SrcPosWithEndToLocation(enumField.startPos, enumField.endPos, this.rootPath, alloc)
                            }
                            case StmtKind.UNION_FIELD_DECL:
                            case StmtKind.STRUCT_FIELD_DECL: {
                                var aggField = field.aggregateField
                                return SrcPosWithEndToLocation(aggField.startPos, aggField.endPos, this.rootPath, alloc)
                            }
                            default: {
                            }
                        }
                    }
                }
                break
            }
            default: {
            }
        }
    }
    else if(location.kind == SourceLocationKind.TYPE) {
        this.lsp.log("Found type: %s\n", TypeSpecKindAsStr(location.type.kind))

        var sym: *Symbol = null

        // we must manually check for aliased types, because the typechecker
        // completely replaces these typInfos with the real type
        if(location.type.kind == TypeSpecKind.NAME && location.module) {
            var name = location.type
            sym = location.module.getType(name.name)
        }

        if(!sym) {
            if(!location.type.typeInfo || !location.type.typeInfo.sym) {
                return JSON_NULL
            }

            sym = location.type.typeInfo.sym
        }

        var decl = sym.decl
        return SrcPosWithEndToLocation(decl.startPos, decl.endPos, this.rootPath, alloc)
    }

    return JSON_NULL
}


public func (this: *Workspace) runDiagnostics(
    docUri: *const char,
    isFullBuild: bool = false) : *PhaseResult {

    var startTime = SystemTimeMSec()
    var lita = this.lsp.lita

    if(isFullBuild) {
        this.lsp.log("Running diagnostics for full rebuild\n")
    }

    // run this diagnostics from a particular module
    if(docUri && !isFullBuild) {
        this.lsp.log("Running %s diagnostics for: '%s'...\n", isFullBuild ? "full" : "incremental", docUri)
        UriToFilePath(docUri, lita.options.inputFile)

        this.lsp.log("Source file: '%s', source path: '%s'...\n", lita.options.inputFile, lita.options.srcPath)
    }

    if(isFullBuild) {
        lita.reset()

        var root = lita.parse()
        if(!root) {
            this.lsp.log("Failed to parse\n")
            lita.result.isReadable = false
            goto report
        }

        var checked = lita.typeCheck(root, .flags = TypeCheckerFlags.DISABLE_TRAIT_WRAPPERS)
        if(!checked) {
            this.lsp.log("Failed to type check\n")
            lita.result.isReadable = false
            goto report
        }

        lita.result.isReadable = true
    }
    else {
        var doc = this.openedDocuments.get(docUri)
        if(!doc) {
            this.lsp.log("Failed to find open document: '%s'\n", docUri)
            goto report
        }

        var module = lita.getModule(doc.filename)
        if(!module) {
            this.lsp.log("Failed to find module: '%s' from URI: '%s'\n", doc.filename, docUri)
            goto report
        }

        lita.incrementalBuild(module)
    }

    var totalTime = SystemTimeMSec() - startTime
    this.lsp.log("Successfully compiled in %.3f msec\n", totalTime)

report:
    return &lita.result
}



func (this: *Document) refreshLineMap() {
    this.lineMap.clear()
    this.lineMap.add(0) // first line starts with the first character

    for(var i = 0; i < this.text.length; i+=1) {
        var c = this.text.buffer[i]

        // NOTE: no need to account for unicode here
        if(c == '\n') {
            this.lineMap.add(i + 1)
        }
    }
}

@inline
func (this: *Document) getLineStart(lineNumber: i32) : u32 {
    return this.lineMap.get(lineNumber)
}

func (this: *Document) insert(range: Range, text: *const char) {
    var fromIndex = (this.getLineStart(range.start.line) + range.start.character) as (i32)
    var toIndex   = (this.getLineStart(range.end.line) + range.end.character) as (i32)

    this.text.replace(fromIndex, toIndex, text)
    this.refreshLineMap()
}

func (this: *Document) setText(text: *const char) {
    this.text.clear()
    this.text.appendStr(text)

    this.refreshLineMap()
}