import "std/mem"
//import "std/mem/linear_allocator"
import "std/mem/bucket_allocator"
import "std/mem/track_allocator"
//import "std/mem/debug_allocator" as d
import "std/string/builder"
import "std/string/buffer"
import "std/string"
import "std/json"
import "std/libc"
import "std/map"
import "std/hash"
import "std/system"
import "std/array"

import "lita"
import "phase_result"

import "lsp/workspace"
import "lsp/protocol"

const IN_BUFFER_SIZE = 1024 * 1024 * 2
const VERSION = "0.12" // TODO: read from a file at compile time; share with lita.main

public struct LspServer {
    requestAllocator: BucketAllocator
    applicationAllocator: BucketAllocator

    lita: *Lita

    message: StringBuilder
    output: StringBuilder
    outbound: StringBuilder

    isInitialized: bool
    isRunning: bool

    workspace: Workspace

    logFile: *FILE
}

public func (this: *LspServer) init(lita: *Lita) {
    this.lita = lita
    this.isRunning = false
    this.isInitialized = false

    this.logFile = fopen("litac_lsp.log", "w")
    if(!this.logFile) {
        printf("Couldn't open log file!\n")
    }

    //var size: usize = 1024 * 1024 * 100;
    //this.requestAllocator.init(defaultAllocator.alloc(size), size)
    //this.applicationAllocator.init(defaultAllocator.alloc(size), size)
    var size: usize = 1024 * 1024 * 2;
    this.requestAllocator.init(defaultAllocator, size)
    this.applicationAllocator.init(defaultAllocator, size)

    this.message = StringBuilderInit(IN_BUFFER_SIZE, defaultAllocator)
    this.output = StringBuilderInit(IN_BUFFER_SIZE, defaultAllocator)
    this.outbound = StringBuilderInit(IN_BUFFER_SIZE, defaultAllocator)

    this.workspace.init(this, this.appAlloc())

    this.lita.workspace = &this.workspace
}


public func (this: *LspServer) requestAlloc() : *const Allocator {
    return (&this.requestAllocator) as (*const Allocator)
}


public func (this: *LspServer) appAlloc() : *const Allocator {
    return (&this.applicationAllocator) as (*const Allocator)
}

public func (this: *LspServer) free() {
    // if(this.applicationAllocator.mem) {
    //     defaultAllocator.free(this.applicationAllocator.mem)
    // }
    // if(this.requestAllocator.mem) {
    //     defaultAllocator.free(this.requestAllocator.mem)
    // }
    this.applicationAllocator.free()
    this.requestAllocator.free()

    this.message.free()
    this.output.free()

    if(this.logFile) {
        fclose(this.logFile)
    }
}


public func (this: *LspServer) start() {
    this.log("starting Lita Language Server v%s\n", VERSION)
    defer this.log("terminating Lita Language Server\n")

    this.isRunning = true

    while(true) {
        this.readMessage()
    }
}

public func (this: *LspServer) log(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    vfprintf(this.logFile, format, args);
    va_end(args);
    fflush(this.logFile)
}

public func (this: *LspServer) readMessage() {
    this.message.clear()

    this.log("Waiting for message..\n")
    var size = this.readHeader()
    if(size < 0) {
        this.writeErrorResponse(0, ErrorCodes.ParseError, "error reading 'Content-Length'")
        return;
    }

    var startTime = SystemTimeMSec()

    defer {
        this.log(">>> Request Handling Time: %.4fms\n\n", SystemTimeMSec() - startTime)

        this.log("Memory stats:\n\tDocAllocator Allocated: %lu KiB #Of Allocations: %d\n",
            this.workspace.docAllocator.totalAllocations / KiB,
            this.workspace.docAllocator.allocations.size()
        )

        this.log("\tAppAllocator Allocated: %lu KiB #Of Allocations: %d\n",
            this.applicationAllocator.totalBytesAllocated / KiB,
            this.applicationAllocator.totalAllocations
        )

        this.log("\tReqAllocator Allocated: %lu KiB #Of Allocations: %d\n",
            this.requestAllocator.totalBytesAllocated / KiB,
            this.requestAllocator.totalAllocations
        )
/*
#if DEBUG
        var debugAllocator = defaultAllocator as (*d::DebugAllocator)
        this.log("\tDebugAllocator Allocated: %lu KiB #Of Allocations: %d Freed: %lu KiB Currently Allocated: %lu KiB\n",
            debugAllocator.totalBytesAllocated / KiB,
            debugAllocator.totalAllocations,
            debugAllocator.totalBytesFreed / KiB,
            (debugAllocator.totalBytesAllocated - debugAllocator.totalBytesFreed) / KiB
        )
#end
*/
        // free memory
        defer this.requestAllocator.currentOffset = 0
    }

    this.log("Received message size: %d\n", size)
    this.message.reserve(size)

    // Read content-size
    var bytesRead = fread(this.message.buffer, 1, size, stdin) as (i32)
    this.log("Received %d bytes from fread\n", bytesRead)

    if(bytesRead != size) {
        this.log("message received size of %d did not match Content-Length: %d\n", bytesRead, size)
        size = bytesRead as (i32)
        //this.log("   message: '%.*s'\n", bytesRead, this.message.buffer)
        //this.writeErrorResponse(0, "message received size did not match content-length")
        //return;
    }

    this.message.length = size
    this.log("Received message: '%.*s'\n", size, this.message.buffer)

    var parser = JsonParserInit(this.requestAlloc())
    defer parser.free()

    var json = parser.parseJson(this.message.cStr())
    if(parser.hasError()) {
        this.log("json parsing error: %s\n", parser.errorMsg)
        return;
    }

    this.handleMessage(json)
}

func (this: *LspServer) readHeader() : i32 {
    const MAX_HEADER_SIZE = 256
    var header = [MAX_HEADER_SIZE]char{0};
    var sizeIndex = 0
    var index = 0

    this.log("Reading header:\n'")
    while(index < MAX_HEADER_SIZE) {
        var r = getchar()
        if(r == EOF) {
            break
        }

        var c = r as (char)
        this.log("%c", c)

        if(c == ' ') {
            sizeIndex = index + 1
        }

        if(c == '\n' || c == '\r') {
            header[index] = '\0'
            break
        }
        else {
            header[index] = c
        }

        index += 1
    }

    this.log("'\nRead header: '%s'\n", header)

    if(!StringEqualLen(header, "Content-Length: ", sizeIndex)) {
        this.log("Invalid header: '%s'\n", header)
        return -1
    }

    var size = atoi(&header[sizeIndex])
#static_if defined(_WIN32) || defined(_WIN64)
    var endingsSize = 1 /* windows converts \r\n to one character */
#else
    var endingsSize = 3 /* posix will read each byte */
#end
    return size + endingsSize /* for the \r\n\r\n */
}

public func (this: *LspServer) handleMessage(msg: *JsonNode) {
    var method = msg.getStr("method", null)
    if(!method) {
        this.writeErrorResponse(0, ErrorCodes.MethodNotFound, "no method defined")
        return;
    }

    // we have been requested to shutdown...
    if(!this.isRunning) {
        if(method.equals("exit")) {
            exit(0)
        }
        else {
            this.writeErrorResponse(0, ErrorCodes.InvalidRequest, "not yet properly initialized")
            return;
        }
    }

    var params = msg.getObject("params")
    if(method.equals("initialize")) {
        this.handleInitializeMessage(msg, params)
    }
    else if(method.equals("initialized")) {
        this.isInitialized = true
    }
    else if(!this.isInitialized) {
        this.writeErrorResponse(0, ErrorCodes.ServerNotInitialized, "not yet properly initialized")
    }
    else if(method.equals("textDocument/didOpen")) {
        this.handleTextDocumentOpenMessage(msg, params)
    }
    else if(method.equals("textDocument/didClose")) {
        this.handleTextDocumentCloseMessage(msg, params)
    }
    else if(method.equals("textDocument/didSave")) {
        this.handleTextDocumentSaveMessage(msg, params)
    }
    else if(method.equals("textDocument/documentSymbol")) {
        this.handleTextDocumentSymbolMessage(msg, params)
    }
    else if(method.equals("textDocument/didChange")) {
        this.handleTextDocumentChangeMessage(msg, params)
    }
    else if(method.equals("textDocument/references")) {
        this.handleTextDocumentReferencesMessage(msg, params)
    }
    else if(method.equals("textDocument/definition")) {
        this.handleTextDocumentDefinitionMessage(msg, params)
    }
    else if(method.equals("textDocument/completion")) {
        this.handleTextDocumentCompletionMessage(msg, params)
    }
    else if(method.equals("$/cancelRequest")) {
        // do nothing for right now
    }
    else if(method.equals("shutdown")) {
        this.isRunning = false
    }
    else {
        this.writeErrorResponse(0, ErrorCodes.MethodNotFound, "unsupported method: '%s'", method)
    }
}

public func (this: *LspServer) handleInitializeMessage(msg: *JsonNode, params: *JsonNode) {
    var rootPath = params.getStr("rootPath", "")
    var rootUri = params.getStr("rootUri", "")
    this.log("Root Path = '%s'\n", rootPath)

    var path = [MAX_PATH]char{0}
    UriToFilePath(rootUri, path)

    this.log("Root Uri = '%s' as path: '%s'\n", rootUri, path)

    this.workspace.setup(path, rootUri)

    var capabilities = """
    {
        "capabilities": {
            "textDocumentSync": {
                "change": 2,
                "openClose": true
            },
            "definitionProvider": true,
            "documentSymbolProvider": true,
            "workspaceSymbolProvider": true,
            "referencesProvider": true,
            "completionProvider": {
                "resolveProvider": true,
                "triggerCharacters": [
                    "."
                ]
            }
        }
    }"""

    var resp = this.createResponse(msg.getInt("id"))

    var parser = JsonParserInit(this.requestAlloc())
    resp.put("result", parser.parseJson(capabilities))
    resp.put("error", JSON_NULL)

    this.writeResponse(resp)
    // this.writeDiagnostic(.docUri = rootUri, .fullBuild = true)
}


public func (this: *LspServer) handleTextDocumentOpenMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    this.workspace.openDocument(uri, textDoc.getStr("text", null))
    this.writeDiagnostic(uri)
}

public func (this: *LspServer) handleTextDocumentCloseMessage(msg: *JsonNode, params: *JsonNode) {
    this.log("Closing doc!!!\n")
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    this.log("Closing uri: %s\n", uri)
    this.workspace.closeDocument(uri)
}

public func (this: *LspServer) handleTextDocumentSymbolMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    var results = this.workspace.documentSymbols(uri, this.requestAlloc())

    var resp = this.createResponse(msg.getInt("id"))
    resp.put("result", results)
    resp.put("error", JSON_NULL)

    this.writeResponse(resp)
}

public func (this: *LspServer) handleTextDocumentSaveMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    this.workspace.saveDocument(uri)
    this.writeDiagnostic(uri, true)
}

public func (this: *LspServer) handleTextDocumentChangeMessage(msg: *JsonNode, params: *JsonNode) {
    var changeEvent = JsonNodeToTextDocumentChangeEvent(params, this.requestAlloc())
    if(changeEvent) {
        this.workspace.changeDocument(changeEvent)
        // this.writeDiagnostic(changeEvent.textDocument.uri)
    }
}

public func (this: *LspServer) handleTextDocumentReferencesMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    var pos = params.getObject("position")
    var results = this.workspace.references(uri, pos, this.requestAlloc())

    var resp = this.createResponse(msg.getInt("id"))
    resp.put("result", results)
    resp.put("error", JSON_NULL)

    this.writeResponse(resp)
}


public func (this: *LspServer) handleTextDocumentDefinitionMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    var pos = params.getObject("position")
    var results = this.workspace.goToDefinition(uri, pos, this.requestAlloc())

    var resp = this.createResponse(msg.getInt("id"))
    resp.put("result", results)
    resp.put("error", JSON_NULL)

    this.writeResponse(resp)
}

public func (this: *LspServer) handleTextDocumentCompletionMessage(msg: *JsonNode, params: *JsonNode) {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return;
    }

    var uri = textDoc.getStr("uri", null)
    var pos = params.getObject("position")
    var context = params.getObject("context")
    var results = this.workspace.autoComplete(uri, pos, context, this.requestAlloc())

    var resp = this.createResponse(msg.getInt("id"))
    resp.put("result", results)
    resp.put("error", JSON_NULL)

    this.writeResponse(resp)
}

public func (this: *LspServer) writeDiagnostic(docUri: *const char, fullBuild: bool = false) {
    var result = this.workspace.runDiagnostics(docUri, .isFullBuild = fullBuild)

    var params = CreateJsonObject(this.requestAlloc())
    params.putStr("uri", docUri)
    var diagnostics = CreateJsonArray(this.requestAlloc())
    params.put("diagnostics", diagnostics)

    var resp = CreateJsonObject(this.requestAlloc())
    resp.putStr("method", "textDocument/publishDiagnostics")
    resp.put("params", params)

    var output = [MAX_PATH]char{0}
    var openedDocFilename = UriToFilePath(docUri, output)

    if(!result.errors.empty()) {
        var outputPath = [MAX_PATH]char{0}
        for(var i = 0; i < result.errors.size(); i += 1) {
            var error =  result.errors.get(i)

            // TODO: when does this happen?
            if(!error.pos.filename) {
                continue
            }

            var modulePathOfError = GetAbsolutePath(this.workspace.rootPath, error.pos.filename, outputPath)
            //this.log("Comparing path: '%s' vs '%s'\n", path, filename)

            // TODO: should we be only sending over errors in this file?
            if(!modulePathOfError.equals(openedDocFilename)) {
                continue
            }

            var diagnostic = CreateJsonObject(this.requestAlloc())
            diagnostic.putStr("message", error.message)
            diagnostic.putIntNumber("severity", 1)
            var sourceLine = StringClone(error.pos.start, (error.pos.end - error.pos.start) as (i32), this.requestAlloc())
            diagnostic.putStr("source", sourceLine)
            diagnostic.put("range", SrcPosToRange(error.pos, this.requestAlloc()))

            diagnostics.add(diagnostic)
        }
    }

    this.writeResponse(resp)
}

public func (this: *LspServer) writeErrorResponse(id: i64, code: i32, format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    var sb = StringBuilderInit(512, this.requestAlloc())
    sb.appendArgs(format, args)
    va_end(args);


    var error = CreateJsonObject(this.requestAlloc())
    error.putStr("message", sb.cStr())
    error.putIntNumber("code", code)

    var resp = this.createResponse(id)
    resp.put("error", error)

    this.writeResponse(resp)
}

public func (this: *LspServer) writeResponse(msg: *JsonNode) {
    this.output.clear()
    this.outbound.clear()

    //var header = [256]char{0};
    //var headerStr = StringBufferInit(header, 256)

    msg.print(this.output)
    var length = this.output.length

    if(length < 1) {
        return;
    }

#static_if defined(_WIN32) || defined(_WIN64)
    this.outbound.append("Content-Length: %d\n\n%.*s", length, length, this.output.buffer)
#else
    this.outbound.append("Content-Length: %d\r\n\r\n%.*s", length, length, this.output.buffer)
#end
    this.log("Sending: Len: %d %.*s\n", this.outbound.length, this.outbound.length, this.outbound.buffer)

    fwrite(this.outbound.cStr() as (*const void), sizeof(:char), this.outbound.length, stdout)
    fflush(stdout)
}

public func (this: *LspServer) createResponse(id: i64) : *JsonNode {
    var response = CreateJsonObject(this.requestAlloc())
    response.putStr("jsonrpc", "2.0")

    if(id > -1) {
        response.putIntNumber("id", id)
    }

    return response
}
