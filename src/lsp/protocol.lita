import "std/json"
import "std/mem"
import "std/system"
import "std/libc"
import "std/array"

import "symbols" as sym
import "types"
import "lex"
import "ast"

@doc("""
    Protocol specifications from: https://microsoft.github.io/language-server-protocol/specifications
""");

public struct Position {
    line: i32
    character: i32
}

public struct Range {
    start: Position
    end: Position
}

public struct Location {
    uri: *const char
    range: Range
}

public struct TextDocument {
    uri: *const char
    version: u32
}

public struct TextDocumentDidChange {
    textDocument: TextDocument
    contentChanges: Array<TextDocumentChangeEvent>
}

public struct TextDocumentChangeEvent {
    hasRange: bool
    range: Range
    rangeLength: u32
    text: *const char
}

public enum ErrorCodes {
    // Defined by JSON RPC
    ParseError = -32700,
    InvalidRequest = -32600,
    MethodNotFound = -32601,
    InvalidParams = -32602,
    InternalError = -32603,

    /**
    * This is the start range of JSON RPC reserved error codes.
    * It doesn't denote a real error code. No LSP error codes should
    * be defined between the start and end range. For backwards
    * compatibility the `ServerNotInitialized` and the `UnknownErrorCode`
    * are left in the range.
    *
    * @since 3.16.0
    */
    jsonrpcReservedErrorRangeStart = -32099,
    /** @deprecated use jsonrpcReservedErrorRangeStart */
    serverErrorStart = ErrorCodes.jsonrpcReservedErrorRangeStart,

    ServerNotInitialized = -32002,
    UnknownErrorCode = -32001,

    /**
    * This is the start range of JSON RPC reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    jsonrpcReservedErrorRangeEnd = -32000,
    /** @deprecated use jsonrpcReservedErrorRangeEnd */
    serverErrorEnd = ErrorCodes.jsonrpcReservedErrorRangeEnd,

    /**
    * This is the start range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    lspReservedErrorRangeStart = -32899,

    ContentModified = -32801,
    RequestCancelled = -32800,

    /**
    * This is the end range of LSP reserved error codes.
    * It doesn't denote a real error code.
    *
    * @since 3.16.0
    */
    lspReservedErrorRangeEnd = -32800,
}

@asStr
public enum SymbolInfoKind {
    File = 1,
    Module = 2,
    Namespace = 3,
    Package = 4,
    Class = 5,
    Method = 6,
    Property = 7,
    Field = 8,
    Constructor = 9,
    Enum = 10,
    Interface = 11,
    Function = 12,
    Variable = 13,
    Constant = 14,
    String = 15,
    Number = 16,
    Boolean = 17,
    Array = 18,
    Object = 19,
    Key = 20,
    Null = 21,
    EnumMember = 22,
    Struct = 23,
    Event = 24,
    Operator = 25,
    TypeParameter = 26,
}

public func SymbolKindFromSymbol(sym: *sym::Symbol) : SymbolInfoKind {
    if(!sym) return SymbolInfoKind.Null;

    switch(sym.kind) {
        case sym::SymbolKind.FUNC: {
            return SymbolInfoKind.Function;
        }
        case sym::SymbolKind.VAR: {
            if(sym.flags & sym::SymbolFlags.IS_CONSTANT) {
                return SymbolInfoKind.Constant;
            }
            return SymbolInfoKind.Variable;
        }
        case sym::SymbolKind.TYPE: {
            var type = sym.type
            if(!type) return SymbolInfoKind.Null;

            switch(type.kind) {
                case TypeKind.ARRAY: {
                    return SymbolInfoKind.Array;
                }
                case TypeKind.BOOL: {
                    return SymbolInfoKind.Boolean;
                }
                case TypeKind.CHAR: {
                    return SymbolInfoKind.Number;
                }
                case TypeKind.ENUM: {
                    return SymbolInfoKind.Enum;
                }
                case TypeKind.FUNC: {
                    return SymbolInfoKind.Function;
                }
                case TypeKind.FUNC_PTR: {
                    return SymbolInfoKind.Object;
                }
                case TypeKind.GENERIC_PARAM: {
                    return SymbolInfoKind.TypeParameter;
                }
                case TypeKind.NULL: {
                    return SymbolInfoKind.Null;
                }
                case TypeKind.PTR: {
                    return SymbolInfoKind.Object;
                }
                case TypeKind.STR: {
                    return SymbolInfoKind.String;
                }
                case TypeKind.STRUCT: {
                    return SymbolInfoKind.Struct;
                }
                case TypeKind.UNION: {
                    return SymbolInfoKind.Struct;
                }
                case TypeKind.TRAIT: {
                    return SymbolInfoKind.Interface;
                }
                case TypeKind.VOID: {
                    return SymbolInfoKind.Null;
                }
                default: {
                    return SymbolInfoKind.Number
                }
            }
        }
        default: {
            return SymbolInfoKind.Variable
        }
    }
}

public func SymbolToSymbolInformation(sym: *sym::Symbol, rootPath: *const char, alloc: *const Allocator) : *JsonNode {
    if(!sym) return null;

    var result = CreateJsonObject(alloc)
    result.putStr("name", sym.name.buffer, sym.name.length)
    result.putBool("deprecated", (sym.flags & sym::SymbolFlags.IS_TYPE) && sym.decl.hasNote("deprecated"))

    var kind = SymbolKindFromSymbol(sym) as (i32)
    result.putIntNumber("kind", kind as (i64))

    if(sym.decl) {
        var location = SrcPosToLocation(sym.decl.startPos, rootPath, alloc)
        if(location) {
            result.put("location", location)
        }
    }

    return result
}

public func SrcPosToLocation(pos: SrcPos, rootPath: *const char,  alloc: *const Allocator) : *JsonNode {
    if(!pos.filename) return null;

    var absPath = [MAX_PATH]char{0}
    GetAbsolutePath(rootPath, pos.filename, absPath)

    var uri = [MAX_PATH]char{0}
    FilePathToUri(absPath, uri)

    var result = CreateJsonObject(alloc)
    result.putStr("uri", uri)
    result.put("range", SrcPosToRange(pos, alloc))
    return result
}


public func SrcPosWithEndToLocation(startPos: SrcPos, endPos: SrcPos, rootPath: *const char,  alloc: *const Allocator) : *JsonNode {
    if(!startPos.filename) return null;

    var absPath = [MAX_PATH]char{0}
    GetAbsolutePath(rootPath, startPos.filename, absPath)

    var uri = [MAX_PATH]char{0}
    FilePathToUri(absPath, uri)

    var result = CreateJsonObject(alloc)
    result.putStr("uri", uri)
    result.put("range", SrcPosWithEndToRange(startPos, endPos, alloc))
    return result
}

public func SrcPosToRange(pos: SrcPos, alloc: *const Allocator) : *JsonNode {
    var lineNumber = MAX(pos.lineNumber - 1, 0) as (i64)

    var start = CreateJsonObject(alloc)
    start.putIntNumber("line", lineNumber)
    var offset = MAX(0i64, (pos.start - pos.lineStart) as (i64))
    start.putIntNumber("character", offset)

    var end = CreateJsonObject(alloc)
    end.putIntNumber("line", lineNumber)
    var length = MAX(1i64, (pos.end - pos.start) as (i64))
    end.putIntNumber("character", offset + length)

    var range = CreateJsonObject(alloc)
    range.put("start", start)
    range.put("end", end)
    return range
}

public func SrcPosWithEndToRange(startPos: SrcPos, endPos: SrcPos, alloc: *const Allocator) : *JsonNode {
    var startLineNumber = MAX(startPos.lineNumber - 1, 0) as (i64)

    var start = CreateJsonObject(alloc)
    start.putIntNumber("line", startLineNumber)
    var startOffset = MAX(0i64, (startPos.start - startPos.lineStart) as (i64))
    start.putIntNumber("character", startOffset)

    var endLineNumber = MAX(endPos.lineNumber - 1, 0) as (i64)
    var end = CreateJsonObject(alloc)
    end.putIntNumber("line", endLineNumber)
    var endOffset = MAX(1i64, (endPos.start - endPos.lineStart) as (i64))
    end.putIntNumber("character", endOffset)

    var range = CreateJsonObject(alloc)
    range.put("start", start)
    range.put("end", end)
    return range
}

public func SrcPosToLocations(rootPath: *const char, results: *Array<SrcPos>, alloc: *const Allocator) : *JsonNode {
    if(results.empty()) {
        return JSON_NULL
    }

    var locations = CreateJsonArray(alloc)

    for(var i = 0; i < results.size(); i += 1) {
        var pos = results.getPtr(i)
        locations.add(SrcPosToLocation(pos, rootPath, alloc))
    }

    return locations
}

public func JsonNodeToTextDocumentChangeEvent(params: *JsonNode, alloc: *const Allocator) : *TextDocumentDidChange {
    var textDoc = params.getObject("textDocument")
    if(!textDoc) {
        return null;
    }

    var result = new<TextDocumentDidChange>(alloc)

    result.textDocument.uri = textDoc.getStr("uri", null)
    result.textDocument.version = textDoc.getInt("version", 1)

    var contentArray = params.getArray("contentChanges")
    if(!contentArray) {
        return result;
    }

    result.contentChanges.init(contentArray.size(), alloc)
    for(var i = 0; i < contentArray.size(); i += 1) {
        var content = contentArray.at(i)

        var change = TextDocumentChangeEvent{}
        change.hasRange = false
        change.text = content.getStr("text", null)
        change.rangeLength = content.getInt("rangeLength", 0)

        var range = content.getObject("range")
        if(range) {
            var r = &change.range
            change.hasRange = true

            var start = range.getObject("start")
            if(start) {
                r.start.line = start.getInt("line", 0)
                r.start.character = start.getInt("character", 0)
            }

            var end = range.getObject("end")
            if(end) {
                r.end.line = end.getInt("line", 0)
                r.end.character = end.getInt("character", 0)
            }
        }

        result.contentChanges.add(change)
    }

    return result
}