import "std/mem"
import "std/libc"
import "std/assert"
import "std/array"
import "std/map"
import "std/bucket_list"

import "types"
import "symbols"
import "ast"
import "intern"


public struct TypeCache {
    allocator: *const Allocator
    typeInfos: BucketList<TypeInfo>
    constCache: Map<i64, *TypeInfo>     // TODO: Fix alias generics bug - should be using Typeid
    ptrCache:   Map<i64, *TypeInfo>
    arrayCache: Map<ArrayEntry, *TypeInfo>
    genericCache: Map<InternedString, *TypeInfo>
}

public struct ArrayEntry {
    arrayOf: *TypeInfo
    expr: *Expr
    length: usize
}

func Hash(a: ArrayEntry) : u32 {
    var add: u32 = 3
    if(a.arrayOf) {
        add += ((a.arrayOf) as (usize) >> 7) as (u32)
    }
    add += a.length as (u32)
    return add
}

func Equals(a: ArrayEntry, b: ArrayEntry) : bool {
    if(a.arrayOf && !b.arrayOf) return false;
    if(!a.arrayOf && b.arrayOf) return false;
    if(a.arrayOf && b.arrayOf) {
        if(a.arrayOf.typeid != b.arrayOf.typeid) {
            return false
        }
    }
    return //a.expr == b.expr &&
           a.length == b.length
}

public func (this: *TypeCache) init(allocator: *const Allocator) {
    this.allocator = allocator

    this.typeInfos.init(1024*2, this.allocator)

    // TODO: should we create our own local allocator?
    this.constCache.init(null, 1024, PtrHashFn<Typeid>, PtrEqualFn<Typeid>, allocator)
    this.ptrCache.init(null, 1024, PtrHashFn<Typeid>, PtrEqualFn<Typeid>, allocator)
    this.arrayCache.init(null, 512, Hash, Equals, allocator, ArrayEntry{.expr = null, .arrayOf = null, .length = 0})
    this.genericCache = InternMap<*TypeInfo>(null, 128, allocator)
}

func (this: *TypeCache) newTypeInfo() : *TypeInfo {
    this.typeInfos.add(TypeInfo{})
    var type = this.typeInfos.lastPtr()
    type.typeid = NextTypeId()
    return type
}

public func (this: *TypeCache) newGenericParamTypeInfo(name: InternedString) : *TypeInfo {
    var type = this.genericCache.get(name)
    if(!type) {
        type = this.newTypeInfo()
        type.kind = TypeKind.GENERIC_PARAM
        type.name = name
        type.sym = null

        this.genericCache.put(name, type)
    }
    return type;
}

public func (this: *TypeCache) newFuncTypeInfo(sym: *Symbol,
                                               funcDecl: *FuncDecl) : *TypeInfo {

    var type = sym.type != null ? sym.type : this.newTypeInfo()
    type.kind = TypeKind.FUNC
    type.name = sym.name
    type.sym = sym
    type.funcDecl = funcDecl
    type.returnType = null
    return type;
}

public func (this: *TypeCache) newArrayTypeInfo(arrayOf: *TypeInfo,
                                                length: usize,
                                                numOfElements: *Expr,
                                                isLengthDefined: bool) : *TypeInfo {

    var entry = ArrayEntry{.arrayOf = arrayOf, .expr = numOfElements, .length = length}
    var type = this.arrayCache.get(entry)
    if(!type || type.length != length || type.isLengthDefined != isLengthDefined
      || type.numOfElements != numOfElements /* this was commented out! */) {
        type = this.newTypeInfo()
        type.kind = TypeKind.ARRAY
        type.arrayOf = arrayOf
        type.length = length
        type.numOfElements = numOfElements
        type.isLengthDefined = isLengthDefined

        this.arrayCache.put(entry, type)
    }

    return type;
}

public func (this: *TypeCache) newFuncPtrTypeInfo(genericParams: Array<GenericParam>,
                                                  returnType: *TypeInfo,
                                                  paramDecls: Array<*TypeInfo>,
                                                  hasVarargs: bool) : *TypeInfo {
// TODO: implement cache
    var type = this.newTypeInfo()
    type.kind = TypeKind.FUNC_PTR
    type.genericParams = genericParams
    type.returnType = returnType
    type.paramDecls = paramDecls
    type.hasVarargs = hasVarargs
    return type;
}

public func (this: *TypeCache) newAggregateTypeInfo(sym: *Symbol,
                                                    decl: *AggregateDecl) : *TypeInfo {

    var type = sym.type != null ? sym.type : this.newTypeInfo()
    switch(decl.kind) {
        case StmtKind.TRAIT_DECL: {
            type.kind = TypeKind.TRAIT
            break;
        }
        case StmtKind.UNION_DECL: {
            type.kind = TypeKind.UNION
            break;
        }
        case StmtKind.NOTE_DECL:
        case StmtKind.STRUCT_DECL: {
            type.kind = TypeKind.STRUCT
            break;
        }
        default: {
            assert(false)
        }

    }
    type.name = sym.name
    type.aggDecl = decl
    type.sym = sym
    return type
}

public func (this: *TypeCache) newEnumTypeInfo(sym: *Symbol,
                                               enumDecl: *EnumDecl) : *TypeInfo {

    var type = sym.type != null ? sym.type : this.newTypeInfo()
    type.kind = TypeKind.ENUM
    type.name = sym.name
    type.enumDecl = enumDecl
    type.sym = sym
    return type
}

public func (this: *TypeCache) newForeignTypeInfo(sym: *Symbol) : *TypeInfo {

    var type = sym.type != null ? sym.type : this.newTypeInfo()
    type.kind = TypeKind.I64 // TODO: Create a foreign primitive type?
    type.name = sym.name
    type.sym = sym
    return type
}

public func (this: *TypeCache) newConstTypeInfo(base: *TypeInfo) : *TypeInfo {
    // can't have const const
    if(base.kind == TypeKind.CONST) {
        return base
    }

    var type = this.constCache.get(base.typeid)
    if(!type) {
        type = this.newTypeInfo()
        type.kind = TypeKind.CONST
        type.constOf = base

        this.constCache.put(base.typeid, type)
    }

    return type
}

public func (this: *TypeCache) newPtrTypeInfo(base: *TypeInfo) : *TypeInfo {
    var type = this.ptrCache.get(base.typeid)
    if(!type) {
        type = this.newTypeInfo()
        type.kind = TypeKind.PTR
        type.ptrOf = base

        this.ptrCache.put(base.typeid, type)
    }

    return type
}

public func (this: *TypeCache) typeDecay(type: *TypeInfo) : *TypeInfo {
    if(!type) return null;

    switch(type.kind) {
        case TypeKind.ARRAY: {
            var arrayInfo = type
            return this.newPtrTypeInfo(this.typeDecay(arrayInfo.arrayOf))
        }
        case TypeKind.FUNC: {
            var funcInfo = type
            return funcInfo.asPtr(this)
        }
        default: {
            return type
        }
    }
}