import "std/string_buffer"
import "std/string_view"
import "std/array"
import "std/assert"
import "std/string"
import "std/libc"
import "std/system"
import "std/map"

import "types"
import "types_new"
import "symbols"
import "phase_result"
import "module"
import "ast"
import "ast_new"
import "ast_print"
import "lex"
import "lita"
import "generics"
import "introspection"
import "instrument"
import "common"
import "traits"
import "checker_decl"
import "checker_expr"
import "intern"
import "preprocessor"
import "lsp/references"
/**
===================================================================
    Type Checker
===================================================================
*/

// max number of labels in a function scope -- this should be enough :S
const MAX_LABELS = 256;
const MAX_LABEL_NAME = 32;

struct LabelInfo {
    name: InternedString
    defined: bool
    stmt: *Stmt
}

struct GenericContext {
    callsite: *Module
}

public enum TypeCheckerFlags {
    DISABLE_TRAIT_WRAPPERS = (1<<0),
}

public struct TypeChecker {
    lita: using *Lita

    current: *Module
    moduleStack: Array<*Module>

    funcDeclStack: Array<*TypeInfo>

    pendingValues: Array<*Symbol>
    symbolTypes: Array<*Symbol>     // all types from all modules
    symbolFuncs: Array<*Symbol>
    symbolTraits: Array<*Symbol>
    mainEntry: *Symbol // main entry point to the program

    symbolNotes: Array<*Symbol>

    genericContext: GenericContext
    genericParamStack: Array<Array<GenericParam>>
    genericTemplates: Array<*Symbol>

    interfaceImpls: Map<Typeid, Array<Typeid>>

    labels: [MAX_LABELS]LabelInfo;
    numOfLabels: i32

    typeCache: *TypeCache

    randomNameIndex: u32

    bypassing: bool // if the checker should bypass imported modules and look at all modules
}

public func (this: *TypeChecker) init(lita: *Lita) {
    this.lita = lita
    this.current = null
    this.moduleStack.init(64, lita.allocator)
    this.funcDeclStack.init(64, lita.allocator)
    this.pendingValues.init(128, lita.allocator)
    this.symbolTypes.init(256, lita.allocator)
    this.symbolFuncs.init(256, lita.allocator)
    this.symbolTraits.init(64, lita.allocator)
    this.genericParamStack.init(128, lita.allocator)
    this.genericTemplates.init(64, lita.allocator)
    this.genericContext.callsite = null

    this.interfaceImpls.init(Array<Typeid>{}, 128, PtrHashFn<Typeid>, PtrEqualFn<Typeid>, lita.allocator, 0)

    this.bypassing = false

    this.typeCache = &lita.typeCache

    this.mainEntry = null

    memset(this.labels, 0, MAX_LABELS * sizeof(:LabelInfo))
    this.numOfLabels = 0
}

@profile
public func (this: *TypeChecker) typeCheck(root: *Module, flags: i32 = 0) : ProgramSymbols {
    if(root.flags & ModuleFlags.TYPE_CHECKED) {
        goto exit;
    }

    root.flags |= ModuleFlags.TYPE_CHECKED

    this.createModuleSymbols(root)

    for(var i = 0; i < root.ast.declarations.size(); i += 1) {
        var decl = root.ast.declarations.get(i)
        if(decl.sym && decl.kind == StmtKind.FUNC_DECL &&
           decl.sym.name.equals(MAIN)) {
            this.mainEntry = decl.sym
            this.mainEntry.flags |= SymbolFlags.IS_MAIN
            break
        }
    }

    // allow for preprocessor scripts to create new declarations/symbols
    // if they are created at this stage, we must do this before resolving
    // all symbols
    var isIncrementalBuild: bool = (root.flags & ModuleFlags.INCREMENTAL_COMPILATION) > 0
    this.lita.preprocessor.preResolveSymbols(this, isIncrementalBuild)

    // if we have instrumentation enabled, we'll want to instrument all
    // functions at this stage, prior to resolving symbols
    if(this.lita.options.instrument && !this.lita.result.hasErrors()) {
        Instrument(this.lita, this)
    }

    this.resolveSymbols()

    // allow for creating more symbols after initial resolving of symbols
    this.lita.preprocessor.postResolveSymbols(this, isIncrementalBuild)

    // Generate trait wrappers
    if(!(flags & TypeCheckerFlags.DISABLE_TRAIT_WRAPPERS)) {
        this.enterModule(root)
        {
            var traitDecls = CreateTraitWrappers(this)
            this.bypassing = true
            for(var i = 0; i < traitDecls.size(); i += 1) {
                var decl = traitDecls.get(i)

                var sym = this.createDeclSymbol(decl)
                if(sym == null) {
                    continue
                }

                this.resolveSymbol(sym)
                this.finishResolveSymbol(sym)
            }
            this.bypassing = false
        }
        this.leaveModule()
    }

    if(!this.lita.result.hasErrors()) {
        var introspect = Introspect{.lita = this.lita}
        introspect.generate(this)
    }

exit:
    return ProgramSymbols {
        .root = root,
        .values = this.pendingValues,
        .symbolTypes = this.symbolTypes,
        .symbolFuncs = this.symbolFuncs,
        .mainEntry = this.mainEntry,
        .interfaceImpls = this.interfaceImpls
    };
}


@inline
public func (this: *TypeChecker) errors() : i32 {
    return this.result.errors.size()
}

func (this: *TypeChecker) checkTrait(sb: *StringBuffer, a: *TypeInfo, b: *TypeInfo, description: *const char) : bool {
    // get more descriptive information if this is trait
    // comparisons, as they are not as intuitive as other types
    if(IsTraitLike(a)) {
        var aTrait = a.getBaseType()
        if(IsPtr(a)) {
            if(!IsPtrTrait(b)) {
                sb.appendStrn("'", 1)
                b.toString(sb)
                sb.appendStr(description)
                a.toString(sb)
                sb.appendStrn("'", 1)

                sb.appendStr("; assigned trait pointers can only be assigned from a trait type and not an implementation type")
                return true
            }
        }

        if(!IsPtr(b) && IsAggregate(b)) {
            var aggInfo = b.getBaseType()
            if(aggInfo.implementsTrait(aTrait, this)) {
                sb.appendStrn("'", 1)
                b.toString(sb)
                sb.appendStr(description)
                a.toString(sb)
                sb.appendStrn("'", 1)

                sb.appendStr("; assigned trait implementations must be pointers: e.g. '*")
                b.toString(sb)
                sb.appendStrn("'", 1)
                return true
            }
        }
        else /*if(IsPtrAggregate(b))*/ {
            var aggInfo = b.getBaseType()
            if(!aggInfo.implementsTrait(aTrait, this)) {
                sb.appendStrn("'", 1)
                b.toString(sb)
                sb.appendStr(description)
                a.toString(sb)
                sb.appendStrn("'; '", 4)
                b.toString(sb)

                sb.appendStr("' doesn't implement all of '")
                a.toString(sb)
                sb.appendStr("' trait methods")
                return true
            }
        }
    }

    return false
}

public func (this: *TypeChecker) checkCastability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    if(a == null || b == null) {
        return false
    }

    if(!a.canCastTo(b, this)) {
        var sb = StringBufferInit(256, this.allocator)

        if(this.checkTrait(sb, a, b, "' can't be casted to '")) {
            this.result.addErrorStr(src, sb)
            return false
        }

        sb.appendStrn("'", 1)
        a.toString(sb)
        sb.appendStr("' can't be casted to '")
        b.toString(sb)
        sb.appendStrn("'", 1)

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}



public func (this: *TypeChecker) checkAssignability(src: SrcPos, a: *TypeInfo, b: *TypeInfo, allowDecay: bool = false) : bool {
    if(a == null || b == null) {
        return false
    }

    if(a.isAssignable(b, this, allowDecay)) {
        return true
    }

    var sb = StringBufferInit(256, this.allocator)
    // get more descriptive information if this is trait
    // comparisons, as they are not as intuitive as other types
    if(IsTraitLike(a)) {
        var aTrait = a.getBaseType()
        if(!IsPtr(b)) {
            var aggInfo = b.getBaseType()
            if(aggInfo.implementsTrait(aTrait, this)) {
                sb.appendStrn("'", 1)
                b.toString(sb)
                sb.appendStr("' can't be assigned to '")
                a.toString(sb)
                sb.appendStrn("'", 1)

                sb.appendStr("; assigned trait implementations must be pointers: e.g. '*")
                b.toString(sb)
                sb.appendStrn("'", 1)

                this.result.addErrorStr(src, sb)
                return false
            }
        }
    }

    sb.appendStrn("'", 1)
    b.toString(sb)
    sb.appendStr("' can't be assigned to '")
    a.toString(sb)
    sb.appendStrn("'", 1)

    this.result.addErrorStr(src, sb)
    return false
}

public func (this: *TypeChecker) checkDeclarability(src: SrcPos, a: *TypeInfo, b: *TypeInfo) : bool {
    if(a == null || b == null) {
        return false
    }

    if(!a.isDeclarable(b, this)) {
        var sb = StringBufferInit(256, this.allocator)

        if(this.checkTrait(sb, a, b, "' can't be assigned to '")) {
            this.result.addErrorStr(src, sb)
            return false
        }

        sb.appendStrn("'", 1)
        b.toString(sb)
        sb.appendStr("' can't be assigned to '")
        a.toString(sb)
        sb.appendStrn("'", 1)

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

public func (this: *TypeChecker) checkTypeCompatibility(src: SrcPos, a: *TypeInfo, b: *TypeInfo, allowPtrArithmetic: bool = true) : bool {
    if(a == null || b == null) {
        return false
    }

    if(!a.isAssignable(b, this, .allowDecay = true, .allowPtrArithmetic = allowPtrArithmetic)) {
        var sb = StringBufferInit(256, this.allocator)

        if(this.checkTrait(sb, a, b, "' is not of type '")) {
            this.result.addErrorStr(src, sb)
            return false
        }

        sb.appendStrn("'", 1)
        b.toString(sb)
        sb.appendStr("' is not of type '")
        a.toString(sb)
        sb.appendStrn("'", 1)

        /*sb.append("a.typeid = %llu vs b.typeid = %llu\n", a.typeid, b.typeid)
        if(IsPtr(a)) {
            sb.append("a.ptrOf.typeid = %llu\n", a.ptrOf.typeid)
        }

        if(IsPtr(b)) {
            sb.append("b.ptrOf.typeid = %llu\n", b.ptrOf.typeid)
        }*/

        this.result.addErrorStr(src, sb)
        return false
    }
    return true
}

func (this: *TypeChecker) checkNote(src: SrcPos, a: *TypeInfo) : bool {
    if(a == null) {
        return false
    }

    if(!IsFieldAccessible(a)) {
        var sb = StringBufferInit(256, this.allocator)
        sb.appendStrn("'", 1)
        a.toString(sb)
        sb.appendStr("' must be either a struct, union or enum")

        this.result.addErrorStr(src, sb)
        return false
    }

    return true
}

func (this: *TypeChecker) createModuleSymbols(module: *Module) {
    if(!module.ast) {
        return;
    }

    this.enterModule(module)
    defer this.leaveModule()

    // filter out test declarations
    if(!this.lita.options.testsOnly) {
        for(var i = 0; i < module.ast.declarations.size();) {
            var decl = module.ast.declarations.get(i)
            if(decl.hasNote("test")) {
                module.ast.declarations.removeAt(i)
            }
            else {
                i += 1
            }
        }
    }

    for(var i = 0; i < module.ast.declarations.size(); i += 1) {
        var decl = module.ast.declarations.get(i)
        this.createDeclSymbol(decl)
    }

    if((module.flags & ModuleFlags.TYPE_IMPORTED)) {
        return;
    }

    module.flags |= ModuleFlags.TYPE_IMPORTED

    for(var i = 0; i < module.ast.imports.size(); i += 1) {
        var imp = module.ast.imports.get(i)
        this.createImportSymbols(imp)
    }

    this.resolveNotes(module.ast.notes)
}

public func (this: *TypeChecker) createDeclSymbol(decl: *Decl) : *Symbol {
    assert(decl != null)

    if(decl.sym) {
        return decl.sym
    }

    var name = EMPTY_STR
    if(decl.name.token.type == TokenType.IDENTIFIER) {
        name = decl.name.str
    }
    else {
        var buffer = [MAX_SYMBOL_NAME]char;
        var nameStr = StringInit(buffer, MAX_SYMBOL_NAME, 0)
        nameStr.format("anon_%d", this.randomNameIndex)
        name = this.lita.strings.internCopy(nameStr.cStr(), nameStr.length)

        this.randomNameIndex+=1
    }

    var sym: *Symbol = null
    if(decl.kind != StmtKind.FUNC_DECL) {
        sym = this.current.symbols.addSymbol(name, this.current, decl, SymbolFlags.IS_INCOMPLETE)
        if(!sym) {
            goto err;
        }
    }

    switch(decl.kind) {
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var varDecl = decl as (*VarDecl)

            var isValid = false
            var hasNotes = varDecl.hasNotes()
            if(varDecl.expr.isConstExpr() || varDecl.hasNote("foreign")) {
                this.result.enabled = false
                var type = this.resolveValueDecl(varDecl)
                isValid = type != null
                this.result.enabled = true

                // if this is resolvable, this means it
                // is a valid constant expression and we don't need
                // to resolve it later
                if(isValid) {
                    // The one exception to this rule are
                    // constant definitions with note declarations,
                    // given that notes may not be resolved yet, we
                    // need to cheat here, by assigning the type
                    // of the const declaration, but ensuring it
                    // gets properly resolve later.
                    // If we don't do this, and this constant is
                    // used in say a struct field definition (via an array)
                    // we'll get an error 'unknown type or variable' for
                    // this const.
                    if(!hasNotes) {
                        this.resolveSymbol(sym)
                        this.finishResolveSymbol(sym)
                    }
                    else {
                        sym.type = type
                    }
                }
            }

            if(!isValid || hasNotes) {
                this.pendingValues.add(sym)
            }

            break;
        }
        case StmtKind.FUNC_DECL: {
            var funcDecl = decl as (*FuncDecl)
            if(funcDecl.flags & FuncFlags.IS_METHOD) {
                var buffer = [MAX_SYMBOL_NAME]char;
                if(!funcDecl.getName(buffer)) {
                    this.result.addError(decl.startPos, "invalid function name or invalid method caller type")
                    goto err;
                }

                name = this.lita.strings.internCopy(buffer)
            }

            sym = this.current.symbols.addSymbol(name, this.current, decl, SymbolFlags.IS_INCOMPLETE)
            if(!sym) {
                goto err;
            }

            if(!funcDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
                this.genericTemplates.add(sym)
            }

            sym.type = this.typeCache.newFuncTypeInfo(sym, funcDecl)
            this.symbolFuncs.add(sym)
            break;
        }
        case StmtKind.ENUM_DECL: {
            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.NOTE_DECL: {
            var noteDecl = decl as (*AggregateDecl)
            this.resolveSymbol(sym)
            this.finishResolveSymbol(sym)
            break;
        }
        case StmtKind.TRAIT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            var aggDecl = decl as (*AggregateDecl)
            if(!aggDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
                this.genericTemplates.add(sym)
            }

            for(var i = 0; i < aggDecl.fields.size(); i+=1) {
                var field = &aggDecl.fields.elements[i]

                switch(field.kind) {
                    case StmtKind.TRAIT_FIELD_DECL: {
                        break;
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        break;
                    }
                    case StmtKind.ENUM_FIELD_DECL: {
                        var sym = this.createDeclSymbol(field.enumField)
                        field.enumField.sym = sym
                        break;
                    }
                    case StmtKind.UNION_FIELD_DECL:
                    case StmtKind.STRUCT_FIELD_DECL: {
                        // if this isn't a generic type, we can create the declaration symbol;
                        // otherwise we have to defer this when the generic template is actually
                        // used (see resolveAggregateDecl)
                        if(!(aggDecl.sym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE)) {
                            field.aggregateField.sym = this.createDeclSymbol(field.aggregateField)
                        }
                        break;
                    }
                    case StmtKind.POISON_EXPR: {
                        break;
                    }
                    default: {
                        assert(false)
                    }
                }
            }


            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            var typedefDecl = decl as (*TypedefDecl)
            if(!typedefDecl.genericParams.empty()) {
                sym.flags |= SymbolFlags.IS_GENERIC_TEMPLATE
            }

            this.symbolTypes.add(sym)
            break;
        }
        case StmtKind.POISON_DECL: {
            break; // Ignore, as this will already have a parsing error
        }
        default: {
            PrintStmt(decl as (*Stmt), 0)
            assert(false)
        }
    }

    return sym

err:
    return null
}


public func (this: *TypeChecker) enterModule(module: *Module) {
    this.moduleStack.push(module)
    this.current = module
}

public func (this: *TypeChecker) leaveModule() {
    var oldScope = this.current;

    if(this.moduleStack.size()) {
        this.moduleStack.pop()
        if(this.moduleStack.size()) {
            this.current = this.moduleStack.last()
        }
    }
}

public func (this: *TypeChecker) currentScope() : *Scope {
    return this.current.currentScope
}

public func (this: *TypeChecker) pushScope(scope: *Scope) {
    scope.init(ScopeKind.FUNC, this.currentScope(), this.result, this.current, this.current.allocator)
    this.current.currentScope = scope
}

public func (this: *TypeChecker) popScope() {
    if(this.currentScope()) {
        this.current.currentScope = this.current.currentScope.parent
    }
}

public func (this: *TypeChecker) isGenericParamType(name: *TypeSpec) : bool {
    for(var k = 0; k < this.genericParamStack.size(); k += 1) {
        var params = &this.genericParamStack.elements[k]

        for(var i = 0; i < params.size(); i+=1) {
            var param = params.get(i)
            assert(param.name.token.type == TokenType.IDENTIFIER)

            if(param.name.str.equals(name.name)) {
                return true;
            }
        }
    }

    return false
}



public func (this: *TypeChecker) createImportSymbols(imp: *ImportDecl) {
    for(var i = 0; i < this.current.ast.imports.size(); i += 1) {
        var other = this.current.ast.imports.get(i)
        if(imp == other) {
            continue
        }

        if(other.name.str.equals(imp.name.str)) {
            this.result.addError(imp.startPos, "duplicate import of module '%.*s'",
                imp.name.str.length, imp.name.str.buffer)
            goto err;
        }
    }

    if(!imp.moduleId) {
        goto err;
    }

    var module = this.lita.getModule(imp.moduleId.filename)
    if(!module) {
        this.result.addError(imp.startPos, "could not find module '%s'",
                imp.moduleId.filename)
        goto err;
    }

    if(module == this.current) {
        return;
    }

    if(!(module.flags & ModuleFlags.TYPE_RESOLVED)) {
        module.flags |= ModuleFlags.TYPE_RESOLVED
        this.createModuleSymbols(module)
    }

    this.current.importModule(imp, module)

err:
    return;
}


func (this: *TypeChecker) resolveSymbols() {

    {   // Start resolving the symbol types
        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)
            this.resolveSymbol(symbol)
        }

        for(var i = 0; i < this.symbolTypes.size(); i += 1) {
            var symbol = this.symbolTypes.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

    {   // Resolve functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.resolveSymbol(symbol)
        }
    }


    {   // Resolve variables
        for(var i = 0; i < this.pendingValues.size(); i += 1) {
            var symbol = this.pendingValues.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

    {   // Finish resolving the functions
        for(var i = 0; i < this.symbolFuncs.size(); i += 1) {
            var symbol = this.symbolFuncs.get(i)
            this.finishResolveSymbol(symbol)
        }
    }

}


public func (this: *TypeChecker) resolveSymbol(sym: *Symbol) {
    if(sym.state == SymbolState.RESOLVED ||
       sym.state == SymbolState.ERROR) {
        return;
    }

    if(sym.state == SymbolState.RESOLVING) {
        this.result.addError(sym.decl.startPos, "cyclic dependency found with '%.*s'", sym.name.length, sym.name.buffer)
        goto err;
    }

    this.enterModule(sym.declared)
    defer this.leaveModule()

    sym.state = SymbolState.RESOLVING

    switch(sym.kind) {
        case SymbolKind.TYPE: {
            switch(sym.decl.kind) {
                case StmtKind.ENUM_DECL: {
                    var enumDecl = sym.decl as (*EnumDecl)
                    sym.type = this.typeCache.newEnumTypeInfo(sym, enumDecl) as (*TypeInfo)
                    break;
                }
                case StmtKind.TYPEDEF_DECL: {
                    var typedefDecl = sym.decl as (*TypedefDecl)

                    var hasGenerics = !typedefDecl.genericParams.empty()
                    if(hasGenerics) {
                        this.genericParamStack.add(typedefDecl.genericParams)
                    }

                    defer if(hasGenerics) {
                        this.genericParamStack.pop()
                    }

                    var aliasedType = this.resolveTypeSpec(typedefDecl.type)
                    if(!aliasedType) {
                        goto err;
                    }

                    if(typedefDecl.hasNote("foreign") && aliasedType.kind == TypeKind.VOID) {
                        aliasedType = this.typeCache.newForeignTypeInfo(sym)
                    }
                    sym.type = aliasedType
                    break;
                }
                case StmtKind.NOTE_DECL:
                case StmtKind.TRAIT_DECL:
                case StmtKind.STRUCT_DECL:
                case StmtKind.UNION_DECL: {
                    var aggregateDecl = sym.decl as (*AggregateDecl)
                    sym.type = this.typeCache.newAggregateTypeInfo(sym, aggregateDecl) as (*TypeInfo)
                    break;
                }
                case StmtKind.POISON_DECL: {
                    goto err;
                }
                default: {
                    Info("StmtKind %.*s %d %s\n", sym.name.length, sym.name.buffer, sym.decl.kind, StmtKindAsStr(sym.decl.kind))
                    assert(false)
                }
            }
            break
        }
        case SymbolKind.VAR: {
            if(sym.flags & SymbolFlags.IS_CONSTANT) {
                var decl = sym.decl as (*VarDecl)
                if(decl && decl.expr && decl.expr.operand.isConst) {
                    sym.val = decl.expr.operand.val
                }
            }

            if(!(sym.flags & SymbolFlags.IS_LOCAL)) {
                this.pendingValues.add(sym)
                return;
            }

            break
        }
        case SymbolKind.FUNC: {
            var funcDecl = sym.decl as (*FuncDecl)
            var funcInfo = this.typeCache.newFuncTypeInfo(sym, funcDecl)

            var hasGenerics = !funcDecl.genericParams.empty()
            if(hasGenerics) {
                this.genericParamStack.add(funcDecl.genericParams)
            }

            defer if(hasGenerics) {
                this.genericParamStack.pop()
            }

            for(var i = 0; i < funcDecl.params.size() ; i += 1) {
                var param = funcDecl.params.get(i)
                param.typeInfo = this.resolveTypeSpec(param.type)
                if(!param.typeInfo) {
                    goto err;
                }
            }

            var retType = this.resolveTypeSpec(funcDecl.returnType)
            if(!retType) {
                goto err;
            }

            funcInfo.returnType = this.typeCache.typeDecay(retType)
            sym.type = funcInfo as (*TypeInfo)
            break
        }
        default: {
            assert(false)
        }
    }

    sym.state = SymbolState.RESOLVED
    return;

err:
    sym.state = SymbolState.ERROR
    if(!sym.type) {
        sym.type = &POISON_TYPE
    }
    return;
}

public func (this: *TypeChecker) finishResolveSymbol(sym: *Symbol) {
    // check to see if this symbol is completed; if it is
    // we don't need to finish resolving this
    if(!(sym.flags & SymbolFlags.IS_INCOMPLETE)) {
        return;
    }

    this.enterModule(sym.declared)
    defer this.leaveModule()

    sym.flags &= ~SymbolFlags.IS_INCOMPLETE

    switch(sym.decl.kind) {
        case StmtKind.NOTE_DECL:
        case StmtKind.TRAIT_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL: {
            var aggDecl = sym.decl as (*AggregateDecl)
            this.resolveAggregateDecl(aggDecl)
            break;
        }
        case StmtKind.ENUM_DECL: {
            var enumDecl = sym.decl as (*EnumDecl)
            this.resolveEnumDecl(enumDecl)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            var typedefDecl = sym.decl as (*TypedefDecl)
            this.resolveTypedefDecl(typedefDecl)
            break;
        }
        case StmtKind.FUNC_DECL: {
            // we don't want to process the function bodies of
            // generic types because they are not resolvable with
            // template types - this will happen once the template types
            // are supplemented with real types
            if((sym.flags & SymbolFlags.IS_GENERIC_TEMPLATE)) {
                return;
            }

            var funcDecl = sym.decl as (*FuncDecl)
            this.resolveFuncDecl(funcDecl)
            break;
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var varDecl = sym.decl as (*VarDecl)
            sym.type = this.resolveValueDecl(varDecl)
            sym.state = SymbolState.RESOLVED
            break;
        }
        case StmtKind.POISON_DECL: {
            sym.state = SymbolState.RESOLVED
            break;
        }
        default: {
            assert(false)
        }
    }
}

public func (this: *TypeChecker) getType(spec: *TypeSpec, isFunc: bool = false) : *Symbol {
    assert(spec != null)
    return this.getTypeByName(spec.name, isFunc)
}

public func (this: *TypeChecker) getTypeByName(typeName: InternedString, isFunc: bool = false) : *Symbol {
    var type = isFunc ? this.current.getFuncType(typeName) :
                            this.current.getType(typeName)
    if(!type) {
        if(this.genericContext.callsite) {
            type = isFunc ? this.genericContext.callsite.getFuncType(typeName) :
                                this.genericContext.callsite.getType(typeName)
        }
    }

    // a work around that allows for looking up ALL
    // modules without having to import them all into
    // the current module
    if(!type && this.bypassing) {
        var name = typeName.view
        var index = name.indexOf("::")
        if(index < 0) {
            return null
        }
        var mod = name.substring(0, index)
        var filename = [MAX_PATH]char{0}
        if(!FindModulePath(this.lita, mod, filename)) {
            return null
        }

        var module = this.lita.getModule(filename)
        assert(module != null)
        var namePart = name.substring(index + 2)

        var namePartType = this.lita.strings.internCopy(namePart.buffer, namePart.length)
        return isFunc ? module.getFuncType(namePartType) :
                            module.getType(namePartType)
    }

    return type
}

public func (this: *TypeChecker) implementsTrait(agg: *TypeInfo, iface: *TypeInfo) : bool {
    assert(agg != null)
    assert(iface != null)

    if(agg.typeid == iface.typeid) {
        return true
    }

    // check the cache to see if this type has already been
    // marked as an implementation
    if(this.interfaceImpls.contains(iface.typeid)) {
        var impls = this.interfaceImpls.getPtr(iface.typeid)

        for(var i = 0; i < impls.size(); i += 1) {
            if(impls.get(i) == agg.typeid) {
                return true
            }
        }
    }

    var symbols = [MAX_METHODS_FOR_TYPE]*Symbol{}
    var numOfMethods = this.current.getMethodsForType(agg, symbols)

    var numOfTraitFns = iface.aggDecl.fields.size()

    if(numOfMethods < numOfTraitFns) {
        return false
    }

    var matchedCount = 0

    for(var i = 0; i < numOfTraitFns; i += 1) {
        var field = iface.aggDecl.fields.get(i)

        assert(field.typeInfo)
        assert(field.typeInfo.kind == TypeKind.FUNC_PTR)
        assert(field.kind == StmtKind.TRAIT_FIELD_DECL)

        // check to see if the method is in the found symbols
        var functionName = field.traitField.decl.name.token.asString()
        var traitFn = field.typeInfo

        for(var index = 0; index < numOfMethods; index += 1) {
            var sym = symbols[index]
            var str = sym.name.view

            var start = str.indexOf("_")
            if(start < 0) {
                continue
            }
            var end = str.indexOf("<")

            // this atleast has the same name, now check if
            // the function types are compatible
            if(str.substring(start + 1, end).equals(functionName)) {
                if(IsFuncImpl(traitFn, sym.type, this)) {
                    matchedCount += 1
                    break;
                }
            }
        }
    }

    var isImpl = matchedCount == numOfTraitFns
    if(isImpl) {
        if(!this.interfaceImpls.contains(iface.typeid)) {
            var impls = ArrayInit<Typeid>(32, this.lita.allocator)
            this.interfaceImpls.put(iface.typeid, impls)
        }
        var impls = this.interfaceImpls.getPtr(iface.typeid)
        impls.add(agg.typeid)
    }

    return isImpl
}


func (this: *TypeChecker) resolveNoteTypeSpec(spec: *TypeSpec) : *TypeInfo {
    if(!spec) {
        return &VOID_TYPE
    }

    if(spec.typeInfo && spec.typeInfo.kind != TypeKind.POISON) {
        return spec.typeInfo
    }

    if(this.isGenericParamType(spec)) {
        spec.typeInfo = this.typeCache.newGenericParamTypeInfo(spec.name)
        return spec.typeInfo
    }

    // TODO: This creates conflicts if notes name collide with functions
    var sym = this.getType(spec, false)
    if(!sym || !sym.type) {
        this.result.addError(spec.pos, "unknown note type '%.*s'", spec.name.length, spec.name.buffer)
        goto err;
    }

    /* TODO: Silence until bootstrap is completed */
    if(!(sym.flags & SymbolFlags.IS_NOTE)) {
        this.result.addError(spec.pos, "'%.*s' is not a note type", spec.name.length, spec.name.buffer)
        goto err;
    }

    spec.typeInfo = sym.type
    this.lita.references.addTypeReference(spec)

    return spec.typeInfo

err:
    if(!spec.typeInfo) {
        spec.typeInfo = &POISON_TYPE
    }

    return &POISON_TYPE
}

public func (this: *TypeChecker) resolveTypeSpec(spec: *TypeSpec, isFunc: bool = false) : *TypeInfo {
    if(!spec) {
        return &VOID_TYPE
    }

    if(spec.typeInfo && spec.typeInfo.kind != TypeKind.POISON) {
        return spec.typeInfo
    }

    switch(spec.kind) {
        case TypeSpecKind.NAME: {
            var nameSpec = spec

            if(this.isGenericParamType(nameSpec)) {
                nameSpec.typeInfo = this.typeCache.newGenericParamTypeInfo(nameSpec.name)
                return nameSpec.typeInfo
            }

            var sym = this.getType(nameSpec, isFunc)
            if(!sym) {
                sym = this.currentScope().lookup(nameSpec.name)
                if(!sym) {
                    this.result.addError(spec.pos, "unknown type '%.*s'", nameSpec.name.length, nameSpec.name.buffer)
                    goto err;
                }
                // account for function pointers in parameter declarations
                // we escape here so that we don't attempt to build a generic
                // type
                else if(sym.type && IsFuncLike(sym.type)) {
                    spec.typeInfo = sym.type
                    return spec.typeInfo
                }
            }

            if(!(sym.flags & SymbolFlags.IS_TYPE) && !IsFuncLike(sym.type)) {
                this.result.addError(spec.pos, "'%.*s' must be a type", nameSpec.name.length, nameSpec.name.buffer)
                goto err;
            }

            this.resolveSymbol(sym)

            if(!nameSpec.genericArgs.empty()) {
                sym = CreateTypeFromGenericTemplate(this, sym, nameSpec)
                if(!sym) {
                    goto err;
                }
            }

            spec.typeInfo = sym.type
            this.lita.references.addTypeReference(spec)
            return spec.typeInfo
        }
        case TypeSpecKind.CONST: {
            var constSpec = spec
            var constOf = this.resolveTypeSpec(constSpec.base)
            spec.typeInfo = this.typeCache.newConstTypeInfo(constOf)
            return spec.typeInfo
        }
        case TypeSpecKind.PTR: {
            var ptrSpec = spec
            var ptrOf = this.resolveTypeSpec(ptrSpec.base)
            spec.typeInfo = this.typeCache.newPtrTypeInfo(ptrOf)
            return spec.typeInfo
        }
        case TypeSpecKind.ARRAY: {
            var arraySpec = spec
            var arrayOf = this.resolveTypeSpec(arraySpec.base)
            var length: usize = 0
            var isLengthDefined = false
            if(arraySpec.numElements) {
                var expr = arraySpec.numElements
                if(!this.resolveConstExpr(expr)) {
                    goto err;
                }

                if(!IsInteger(expr.operand.typeInfo)) {
                    this.result.addError(expr.startPos,
                            "array size expression must be an integer type")
                    goto err;
                }

                isLengthDefined = true
                if(expr.kind == StmtKind.IDENTIFIER_EXPR) {
                    var idExpr = expr as (*IdentifierExpr)
                    if(idExpr.sym && (idExpr.sym.flags & SymbolFlags.IS_FOREIGN)) {
                        // we don't know the actual length, because this type's value is
                        // defined in C code..
                        isLengthDefined = false
                    }
                }

                if(isLengthDefined) {
                    length = expr.operand.val.intValue // TODO: fix: usize != i64
                }
            }
            spec.typeInfo = this.typeCache.newArrayTypeInfo(arrayOf, length, arraySpec.numElements, isLengthDefined) as (*TypeInfo)
            return spec.typeInfo
        }
        case TypeSpecKind.FUNC_PTR: {
            var funcPtrSpec = spec
            var paramDecls = Array<*TypeInfo>{}
            if(!funcPtrSpec.args.empty()) {
                paramDecls.init(funcPtrSpec.args.size(), this.allocator)
                for(var i = 0; i < funcPtrSpec.args.size(); i+=1) {
                    var arg = funcPtrSpec.args.get(i)
                    var typeInfo = this.resolveTypeSpec(arg)
                    paramDecls.add(typeInfo)
                }
            }
            var returnType = this.resolveTypeSpec(funcPtrSpec.ret)
            spec.typeInfo = this.typeCache.newFuncPtrTypeInfo(funcPtrSpec.genericParams, returnType, paramDecls, funcPtrSpec.hasVarargs) as (*TypeInfo)
            return spec.typeInfo
        }
        default: {
            assert(false)
        }
    }

err:
    if(!spec.typeInfo) {
        spec.typeInfo = &POISON_TYPE
    }

    return &POISON_TYPE
}

public func (this: *TypeChecker) addSymbol(decl: *Decl, typeInfo: *TypeInfo) : *Symbol {
    assert(decl.name.token.type == TokenType.IDENTIFIER)

    var sym = this.current.currentScope.addSymbol(decl.name.str, this.current, decl, 0)
    if(sym) {
        sym.type = typeInfo
        this.resolveSymbol(sym)

        this.lita.references.addSymbolReference(sym, decl.startPos)
    }

    return sym
}

public func (this: *TypeChecker) addTypeToScope(decl: *Decl, scope: *Scope, baseType: *TypeInfo, currentType: *TypeInfo) {
    for(var i = 0; i < currentType.aggDecl.fields.size(); i += 1) {
        var field = currentType.aggDecl.fields.get(i)

        switch(field.kind) {
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                if(varField.name.token.type != TokenType.IDENTIFIER) {
                    break
                }

                var varDecl = NewVarDecl(decl.startPos, decl.endPos, decl.name, varField.type, null, this.allocator)

                varDecl.sym = scope.addSymbol(varField.name.str, this.current, varDecl, SymbolFlags.IS_USING)
                varDecl.sym.type = field.typeInfo
                varDecl.sym.usingParent = decl.sym

                this.resolveSymbol(varDecl.sym)

                if(varField.attributes.isUsing) {
                    var fieldBaseType = field.typeInfo.getBaseType()
                    if(fieldBaseType.kind == TypeKind.POISON) {
                        break
                    }

                    assert(IsAggregate(fieldBaseType))
                    this.addTypeToScope(decl, scope, baseType, fieldBaseType)
                }
                break;
            }
            case StmtKind.TRAIT_FIELD_DECL:
            case StmtKind.ENUM_FIELD_DECL:
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL:
                // TODO: Should Union/Struct be placed in scope?
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }
}

public func (this: *TypeChecker) resolveNotes(notes: *Array<*NoteStmt>) : bool {
    if(!notes || notes.empty()) return true;

    var success = true
    for(var i = 0; i < notes.size(); i += 1) {
        var note = notes.get(i)

        assert(note.type != null)

        var typeInfo = this.resolveNoteTypeSpec(note.type)
        if(typeInfo.kind == TypeKind.POISON) {
            success = false
            continue
        }

        if(!this.checkNote(note.startPos, typeInfo)) {
            success = false
            continue
        }

        assert(IsAggregate(typeInfo))

        var aggInfo = typeInfo

        for(var j = 0; j < note.arguments.size(); j += 1) {
            var arg = note.arguments.get(j)
            if(!this.resolveStmt(arg.argExpr)) {
                success = false
                continue
            }

            // no type checking on no-named arguments
            // Is this a good thing???
            if(arg.argName.str.length == 0) {
                continue;
            }

            // TODO: Validate:
            // 1) field exists in note.type
            // 2) arg.argExpr is type compatible with note.type for argName
            // 3) arg.argExpr is a constant type
            var field = aggInfo.getField(arg.argName.str)
            if(field.kind == StmtKind.POISON_EXPR) {
                this.errorNoField(arg.argExpr, typeInfo, arg.argName.str)
                success = false
                continue
            }

            if(!this.checkTypeCompatibility(arg.argName.token.pos,
                                            field.typeInfo,
                                            arg.argExpr.operand.typeInfo)) {
                success = false
                continue
            }
        }

    }

    return success
}

public func (this: *TypeChecker) resolveStmt(stmt: *Stmt) : bool {
    if(!stmt) return true;

    switch(stmt.kind) {
        // --------------------------------------------------
        //          Declarations
        // --------------------------------------------------
        case StmtKind.IMPORT_DECL:
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.TRAIT_DECL:
        case StmtKind.ENUM_DECL:
        case StmtKind.FUNC_DECL:
        case StmtKind.TYPEDEF_DECL:
        case StmtKind.PARAM_DECL:
        case StmtKind.NATIVE_DECL:
        case StmtKind.POISON_DECL: {
            return this.resolveDecl(stmt as (*Decl))
        }

        // --------------------------------------------------
        //          Statements
        // --------------------------------------------------
        case StmtKind.BLOCK_STMT: {
            var body = stmt as (*BlockStmt)
            this.pushScope(&Scope{})
            defer this.popScope()

            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                if(!this.resolveStmt(s)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.BREAK_STMT: {
            return true;
        }
        case StmtKind.COMP_STMT: {
            var compStmt = stmt as (*CompStmt)
            if(compStmt.isStatic) {
                var stmts = compStmt.body
                for(var i = 0; i < stmts.size(); i+=1) {
                    var s = stmts.get(i)
                    if(!this.resolveStmt(s)) {
                        return false
                    }
                }
                //
                // HACK: In order to properly type check
                // we create a temporary scope, but we only
                // put the if body in the actual working scope
                //
                this.pushScope(&Scope{})
                defer this.popScope()

                if(compStmt.end && !this.resolveStmt(compStmt.end)) {
                    return false
                }
                return true
            }

            var stmt = this.lita.preprocessor.evaluateForFunction(this, compStmt)
            if(!stmt) {
                return false;
            }

            return this.resolveStmt(stmt)
        }
        case StmtKind.CONTINUE_STMT: {
            return true;
        }
        case StmtKind.DEFER_STMT: {
            var deferStmt = stmt as (*DeferStmt)
            if(!this.resolveStmt(deferStmt.deferedStmt)) {
                return false
            }
            return true
        }
        case StmtKind.DO_WHILE_STMT: {
            var whileStmt = stmt as (*DoWhileStmt)
            {
                this.pushScope(&Scope{})
                defer this.popScope()
                if(!this.resolveStmt(whileStmt.body)) {
                    return false
                }
            }

            if(!this.resolveExpr(whileStmt.cond)) {
                return false
            }

            return true
        }
        case StmtKind.EMPTY_STMT: {
            return true;
        }
        case StmtKind.FOR_STMT: {
            var forStmt = stmt as (*ForStmt)
            this.pushScope(&Scope{})
            defer this.popScope()

            if(forStmt.init && !this.resolveStmt(forStmt.init)) {
                return false
            }
            if(forStmt.cond && !this.resolveExpr(forStmt.cond)) {
                return false
            }
            if(forStmt.post && !this.resolveStmt(forStmt.post)) {
                return false
            }
            if(!this.resolveStmt(forStmt.body)) {
                return false
            }
            return true
        }
        case StmtKind.FUNC_BODY_STMT: {
            var body = stmt as (*FuncBodyStmt)

            var success = true
            for(var i = 0; i < body.stmts.size(); i+=1) {
                var s = body.stmts.get(i)
                if(!this.resolveStmt(s)) {
                    success = false
                    break // TODO: Do we want to allow this to proceed?
                }
            }
            return success
        }
        case StmtKind.GOTO_STMT: {
            var gotoStmt = stmt as (*GotoStmt)

            if(gotoStmt.label.token.type != TokenType.IDENTIFIER) {
                return false
            }

            // check to see if the label has already been created
            for(var i = 0; i < this.numOfLabels; i+=1) {
                var label = &this.labels[i]
                if(gotoStmt.label.str.equals(label.name)) {
                    label.stmt = stmt
                    return true
                }
            }

            // other create it
            var labelName = &this.labels[this.numOfLabels]
            labelName.name = gotoStmt.label.str
            labelName.stmt = stmt
            labelName.defined = false

            this.numOfLabels += 1

            return true;
        }
        case StmtKind.IF_STMT: {
            var ifStmt = stmt as (*IfStmt)
            if(!this.resolveExpr(ifStmt.cond)) {
                return false
            }

            {
                this.pushScope(&Scope{})
                defer this.popScope()

                if(!this.resolveStmt(ifStmt.then)) {
                    return false
                }
            }

            if(ifStmt.elseStmt) {
                this.pushScope(&Scope{})
                defer this.popScope()

                if(!this.resolveStmt(ifStmt.elseStmt)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.LABEL_STMT: {
            var labelStmt = stmt as (*LabelStmt)
            if(labelStmt.label.token.type != TokenType.IDENTIFIER) {
                return false
            }

            if(this.numOfLabels >= MAX_LABELS) {
                this.result.addError(labelStmt.startPos, "max number of labels reached")
                return false
            }

            for(var i = 0; i < this.numOfLabels; i+=1) {
                var label = &this.labels[i]
                if(labelStmt.label.str.equals(label.name)) {
                    label.defined = true
                    return true
                }
            }

            var labelName = &this.labels[this.numOfLabels]
            labelName.name = labelStmt.label.str
            labelName.defined = true
            labelName.stmt = null

            this.numOfLabels += 1
            return true;
        }
        case StmtKind.MODULE_STMT: {
            return true;
        }
        case StmtKind.NOTE_STMT: {
            return true;
        }
        case StmtKind.PARAMETERS_STMT: {
            var params = stmt as (*ParametersStmt)
            var hasDefault = false
            for(var i = 0; i < params.size(); i += 1) {
                var param = params.get(i)
                if(!this.resolveParamDecl(param)) {
                    return false
                }

                if(param.defaultExpr) {
                    hasDefault = true
                }
                else if(hasDefault) {
                    var parentDecl = params.parent as (*FuncDecl)
                    assert(parentDecl != null)
                    assert(parentDecl.kind == StmtKind.FUNC_DECL)
                    this.result.addError(parentDecl.startPos, "'%.*s' must have default arguments defined last",
                                    parentDecl.name.str.length, parentDecl.name.str.buffer)
                    return false;
                }

            }
            return true;
        }
        case StmtKind.RETURN_STMT: {
            var ret = stmt as (*ReturnStmt)

            var count = this.errors()
            var currentFuncDecl = this.funcDeclStack.last()
            if(!currentFuncDecl) {
                return false
            }

            if(ret.expr) {
                if(!this.resolveExpr(ret.expr)) {
                    return false
                }

                ret.expr = this.coerceTypeWithUsing(ret.expr, ret.expr.operand.typeInfo, currentFuncDecl.returnType)

                this.checkTypeCompatibility(ret.expr.startPos, currentFuncDecl.returnType, ret.expr.operand.typeInfo)
                ret.expr.expectedType = currentFuncDecl.returnType
            }
            else {
                this.checkTypeCompatibility(ret.startPos, currentFuncDecl.returnType, &VOID_TYPE)
            }
            return count == this.errors();
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var caseStmt = stmt as (*SwitchCaseStmt)
            if(!this.resolveExpr(caseStmt.cond)) {
                return false
            }
            if(!this.resolveStmt(caseStmt.body)) {
                return false
            }
            return true
        }
        case StmtKind.SWITCH_STMT:{
            var switchStmt = stmt as (*SwitchStmt)
            if(!this.resolveExpr(switchStmt.cond)) {
                return false
            }
            for(var i = 0; i < switchStmt.cases.size(); i+=1) {
                var caseStmt = switchStmt.cases.get(i)
                if(!this.resolveStmt(caseStmt)) {
                    return false
                }
            }
            if(switchStmt.defaultStmt) {
                if(!this.resolveStmt(switchStmt.defaultStmt)) {
                    return false
                }
            }
            return true
        }
        case StmtKind.ENUM_FIELD_DECL:
            // handled in resolveEnumDecl
        case StmtKind.ENUM_FIELD_ENTRY_DECL:
        case StmtKind.STRUCT_FIELD_DECL:
        case StmtKind.UNION_FIELD_DECL:
        case StmtKind.TRAIT_FIELD_DECL:
        case StmtKind.VAR_FIELD_DECL: {
            // handled in the resolveAggregateDecl
            assert(false)
            return false;
        }
        case StmtKind.WHILE_STMT: {
            var whileStmt = stmt as (*WhileStmt)
            if(!this.resolveExpr(whileStmt.cond)) {
                return false
            }

            this.pushScope(&Scope{})
            defer this.popScope()
            if(!this.resolveStmt(whileStmt.body)) {
                return false
            }
            return true
        }

        // --------------------------------------------------
        //          Expressions
        // --------------------------------------------------
        case StmtKind.ARRAY_DESIGNATION_EXPR:
        case StmtKind.ARRAY_INIT_EXPR:
        case StmtKind.BINARY_EXPR:
        case StmtKind.BOOLEAN_EXPR:
        case StmtKind.CAST_EXPR:
        case StmtKind.CHAR_EXPR:
        case StmtKind.FUNC_CALL_EXPR:
        case StmtKind.FUNC_IDENTIFIER_EXPR:
        case StmtKind.GET_EXPR:
        case StmtKind.GROUP_EXPR:
        case StmtKind.IDENTIFIER_EXPR:
        case StmtKind.INIT_EXPR:
        case StmtKind.INIT_ARG_EXPR:
        case StmtKind.NULL_EXPR:
        case StmtKind.NUMBER_EXPR:
        case StmtKind.OFFSET_OF_EXPR:
        case StmtKind.SET_EXPR:
        case StmtKind.SIZE_OF_EXPR:
        case StmtKind.STRING_EXPR:
        case StmtKind.SUBSCRIPT_GET_EXPR:
        case StmtKind.SUBSCRIPT_SET_EXPR:
        case StmtKind.TERNARY_EXPR:
        case StmtKind.TYPE_IDENTIFIER_EXPR:
        case StmtKind.TYPE_OF_EXPR:
        case StmtKind.UNARY_EXPR:
        case StmtKind.POISON_EXPR: {
            return this.resolveExpr(stmt as (*Expr))
        }
        default: {
            assert(false)
        }
    }

    return false
}