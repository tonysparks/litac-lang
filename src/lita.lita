import "std/io"
import "std/mem"
import "std/mem/linear_allocator"
import "std/mem/bucket_allocator"
import "std/array"
import "std/map"
import "std/libc"
import "std/system"
import "std/string_buffer"
import "std/string_view"
import "std/string"

import "symbols"
import "preprocessor"
import "lex"
import "module"
import "parser"
import "phase_result"
import "ast"
import "ast_new"
import "checker"
import "cgen"
import "common"
import "intern"
import "types"
import "types_new"
import "build"

import "lsp/references"
import "lsp/workspace"

import "tcc/libtcc"


public const MAX_PREFIX_SIZE = 32
public const LITA_VERSION = "0.1.3-alpha"

public struct Lita {
    allocator: *const Allocator
    linearAllocator: LinearAllocator
    stringsAllocator: BucketAllocator

    preprocessor: Preprocessor
    result: PhaseResult
    modules: Map<*const char, *Module>
    metrics: [MetricType.MAX_METRIC_TYPES]Metric

    totalSourceLines: u32
    totalAllocations: u32

    options: *LitaOptions
    binaryFilename: [MAX_PATH]char
    sourceFilename: [MAX_PATH]char

    buildFile: BuildFile
    compilerOptions: Array<CCompilerOption>

    programSymbols: ProgramSymbols
    genericSymbols: Map<InternedString, *Symbol>

    typeCache: TypeCache
    strings: Strings

    // Language Server support
    references: ReferenceDatabase
    workspace: *Workspace
}

@asStr
public enum MetricType {
    PARSING,
    TYPE_CHECKING,
    CGEN,
    CCOMPILE,

    MAX_METRIC_TYPES
}

public struct Metric {
    bytesAllocated: usize
    allocationCount: u32
    executionTime: f64

    startTime: f64
}

@asStr
public enum TypeInfoOption {
    NONE,        // no type information should be generated
    TAGGED,      // only types tagged with @typeinfo shall be generated
    ALL,         // all types will be generated
}

public struct CCompilerOption {
    os: OS
    arch: Arch
    options: StringView
}

public enum PkgCommand {
    PKG_NONE = 0,
    PKG_INSTALL,
    PKG_RUN,
}

public struct PkgOptions {
    pkgCmd: PkgCommand             // the Package Manager command we're running (if any)
    pkgRunCmdArg: *const char      // the pkg-run {arg} argument
    forceClean: bool               // force cleaning of package directories
}

public struct LitaOptions {
    projectPath: [MAX_PATH]char    // the directory of where the main source module is
    srcPath: [MAX_PATH]char        // the directory of where the main source module is
    libPath: [MAX_PATH]char        // optional configurable path to modules for libraries
    litaPath: [MAX_PATH]char       // the LITAC_HOME environment variable for standard lita modules

    inputFile: [MAX_PATH]char      // the input source file
    outputFile: [MAX_PATH]char     // the C output file
    outputPath: [MAX_PATH]char     // the C output directory

    compileCmd: *const char        // the C compile system command
    isStrict: bool                 // if the compileCmd should be strict and not allow modifications
                                   // from compiler_options
    isTcc: bool                    // if we should run the internal tcc compiler

    checkerOnly: bool              // only do the checker
    cOutputOnly: bool              // generates C file only, does not compile it
    run: bool                      // runs after successful compilation
    showProfileInfo: bool          // outputs profiling information
    languageServer: bool           // if this should launch the language server
    isDebug: bool                  // if we are in debug mode
    instrument: bool               // if we have profiling instrumentation enabled
    isVerbose: bool                // if we are in verbose mode, output logging detail information

    testsOnly: bool                // if we are running tests only
    testsRegex: *const char        // the regex of tests to include
    testFileOnly: bool             // if we should only test the supplied file only

    typeOption: TypeInfoOption     // type generation option

    cPrefix: [MAX_PREFIX_SIZE]char // Prefix for types/variables defined in C
    cFormat: bool                  // format the C output
    disableLineSync: bool          // disables C #line directives sync with Lita source code

    maxMemory: usize               // max amount of memory that can be allocated

    proxy: *const char             // the proxy server to use
    pkgOptions: PkgOptions         // Package Manager options
}


public func (this: *Lita) init(options: *LitaOptions) {
    var size: usize = options.maxMemory > 0 ? options.maxMemory : 1024 * 1024 * 1024;
    this.linearAllocator.init(defaultAllocator.alloc(size), size)

    this.allocator = &this.linearAllocator.allocator
    this.options = options

    memset(this.binaryFilename, 0, MAX_PATH)
    memset(this.sourceFilename, 0, MAX_PATH)

    this.reset()
}

@doc("Resets the state reading for another compile")
public func (this: *Lita) reset() {
    this.linearAllocator.clear()
    this.totalSourceLines = 0
    this.totalAllocations = 0

    this.preprocessor.init(this)
    this.result = PhaseResultInit(this.allocator)
    this.modules = StrMap<*Module>(null, 32, this.allocator)

    this.genericSymbols = InternMap<*Symbol>(null, 128, this.allocator)

    this.stringsAllocator.init(this.allocator, 5 * KiB)
    this.strings.init(this.stringsAllocator)

    this.typeCache.init(this.allocator)
    TypesInit(this.strings)

    // TODO: clear module allocators


    // TODO: Only initialize if this is an LSP
    this.references.init(this.allocator)

    this.compilerOptions.init(16, this.allocator)

    // see if there is a .build.json file
    {
        var temp: [MAX_PATH]char;
        var build = StringInit(temp, MAX_PATH, 0)
        build.format("%s/.build.json", this.options.projectPath)

        memset((&this.buildFile) as (*void), 0, sizeof(:BuildFile))

        if(FileExists(build.cStr())) {
            BuildFileFromFile(build.cStr(), &this.buildFile, this.allocator)
        }

    }
}

public func (lita: *Lita) free() {
    if(lita.linearAllocator.mem) {
        defaultAllocator.free(lita.linearAllocator.mem)
    }
    // TODO: clear module allocators
}

public func (lita: *Lita) addModule(module: *Module) {
    lita.modules.put(module.id.filenameKey, module)
}

public func (lita: *Lita) getModule(filename: *const char) : *Module {
    @static var filenameKey = [MAX_PATH]char{0}
    GetFilenameKey(filename, filenameKey)

    return lita.modules.get(filenameKey)
}

public func (lita: *Lita) startCapture(type: MetricType) {
    var metric = &lita.metrics[type]

    var allocator = lita.allocator as (*LinearAllocator)
    metric.bytesAllocated = allocator.totalBytesAllocated
    metric.allocationCount = allocator.totalAllocations
    metric.startTime = SystemTimeMSec()
}

public func (lita: *Lita) endCapture(type: MetricType) {
    var metric = &lita.metrics[type]

    var allocator = lita.allocator as (*LinearAllocator)
    metric.bytesAllocated = allocator.totalBytesAllocated - metric.bytesAllocated
    metric.allocationCount = allocator.totalAllocations - metric.allocationCount
    metric.executionTime = SystemTimeMSec() - metric.startTime
}


public func (this: *Lita) incrementalBuild(module: *Module) : void {
    if(!module) {
        return;
    }

    // clear any compilation errors
    this.result.clear()

    // clear out any references for this module
    this.references.removeLocalSymbolReferences(module)

    // reset the contents of this module
    module.initIncrementalBuild()
    defer module.postIncrementalBuild()

    // Re-parse the module source code
    {
        if(!ParseModule(this, module, SrcPos{})) {
            return;
        }

        var builtinImport = NewImportDecl(SrcPos{},
                                        SrcPos{},
                                        BUILTIN_IMPORT_IDENT,
                                        Identifier {
                                            .str = EMPTY_STR,
                                            .token = Token{.type = TokenType.VOID}
                                        },
                                        false,
                                        this.allocator) as (*ImportDecl)
        builtinImport.moduleId = &builtins.id
        module.ast.imports.insertAt(0, builtinImport)
    }

    // Re-type check the module
    {
        var checker = TypeChecker{}
        checker.init(this)

        var program = checker.typeCheck(module, .flags = TypeCheckerFlags.DISABLE_TRAIT_WRAPPERS)

        // Reconcile any changed symbols
        this.syncSymbols(module, &module.symbols.symbolFuncs, &this.programSymbols.symbolFuncs, SymbolKind.FUNC)
        this.syncSymbols(module, &module.symbols.symbolTypes, &this.programSymbols.symbolTypes, SymbolKind.TYPE)
        this.syncSymbols(module, &module.symbols.symbolTypes, &this.programSymbols.values, SymbolKind.VAR)
    }
}

func (this: *Lita) syncSymbols(module: *Module, moduleSymbols: *Map<InternedString, *Symbol>, symbols: *Array<*Symbol>, kind: SymbolKind) {
    for(var i = 0; i < symbols.size();) {
        var sym = symbols.get(i)
        if(!sym.decl || !sym.declared.equals(module)) {
            i += 1
            continue;
        }

        symbols.removeAt(i);
    }

    // now add them back, this time the module will have the
    // the most up to date symbols
    for(var it = moduleSymbols.iter(); it.hasNext();) {
        var entry = it.next()
        var key = entry.key
        var sym = entry.value
        if(!sym.declared.equals(module) || sym.kind != kind) {
            continue;
        }
        symbols.add(sym)
    }
}

public func (this: *Lita) parse() : *Module {
    this.startCapture(MetricType.PARSING)
    defer this.endCapture(MetricType.PARSING)

    var builtin = BuiltinsInit(this)
    this.addModule(builtin)

    if(!ParseModule(this, builtin, SrcPos{})) {
        this.result.addError(SrcPos{}, "unable to parse builtins.lita")
        return null;
    }

    var root = NewModule(this, this.options.inputFile)
    this.addModule(root)

    if(!ParseModule(this, root, SrcPos{})) {
        return null;
    }

    var builtinImport = NewImportDecl(SrcPos{},
                                      SrcPos{},
                                      BUILTIN_IMPORT_IDENT,
                                      Identifier {
                                          .str = EMPTY_STR,
                                          .token = Token{.type = TokenType.VOID}
                                      },
                                      false,
                                      this.allocator) as (*ImportDecl)
    builtinImport.moduleId = &builtin.id
    root.ast.imports.insertAt(0, builtinImport)

    return root
}

public func (this: *Lita) typeCheck(module: *Module, flags: i32 = 0) : bool {
    this.startCapture(MetricType.TYPE_CHECKING)
    defer this.endCapture(MetricType.TYPE_CHECKING)

    var checker = TypeChecker{}
    checker.init(this)

    this.programSymbols = checker.typeCheck(module, flags)

    return this.result.errors.empty()
}

public func (this: *Lita) transpile(module: *Module) : bool {

    if(!Mkdir(this.options.outputPath)) {
        printf("Unable to create directory: '%s'", this.options.outputPath)
        return false
    }

    memset(this.binaryFilename, 0, MAX_PATH)
    memset(this.sourceFilename, 0, MAX_PATH)

    strcat(this.sourceFilename, this.options.outputPath)
    strcat(this.sourceFilename, this.options.outputFile)

    strcpy(this.binaryFilename, this.sourceFilename)

#if OS == "WINDOWS"
    strcat(this.binaryFilename, ".exe") // TODO: This should take what the command specifies, otherwise default to OS extension
#end
    strcat(this.sourceFilename, ".c")

    if(this.options.cOutputOnly) {
        if(!this.emitC(module, this.sourceFilename)) {
            return false
        }
        return false
    }

    // if there is no build cmd, attempt to compile using libtcc
    if(!this.options.compileCmd || this.options.isTcc) {

        if(!this.compileWithLibtcc(module, this.binaryFilename)) {
            return false
        }
    }
    else {
        //
        // there is a build cmd, so the user opted for an external C compiler
        //

        if(!this.emitC(module, this.sourceFilename)) {
            return false
        }

        if(!this.compileC(module, this.sourceFilename, this.binaryFilename)) {
            return false
        }
    }

    return true
}

func LibtccErrorFunc(data: *void, msg: *const char) : void {
    Error("%s\n", msg)
}

public func (this: *Lita) compileWithLibtcc(module: *Module, binaryFilename: *const char) : bool {
#static_if LITA_X86 || LITA_X64
    this.startCapture(MetricType.CGEN)
    var cgen = CGen{}
    cgen.init(this, null)
    cgen.emitProgram(module)
    this.endCapture(MetricType.CGEN)

    var sourceCode = cgen.buf.cStr()

    this.startCapture(MetricType.CCOMPILE)
    defer this.endCapture(MetricType.CCOMPILE)
    var state = tcc_new()
    defer if(state) tcc_delete(state)

    tcc_set_error_func(state, this, LibtccErrorFunc)

    tcc_set_output_type(state, TCC_OUTPUT_EXE)
    tcc_output_file(state, binaryFilename)


    var temp:[256]char;
    var buf = StringInit(temp, 256, 0)

    buf.format("%s/lib", this.options.projectPath)
    if(FileExists(buf.cStr())) {
        tcc_add_library_path(state, buf.cStr())
        // ccOptions.append("\"-L%s\" ", buf.cStr())
    }

    buf.format("%s/include", this.options.projectPath)
    if(FileExists(buf.cStr())) {
        tcc_add_include_path(state, buf.cStr())
        // ccOptions.append("\"-I%s\" ", buf.cStr())
    }

    if(!this.compilerOptions.empty()) {
        var os = GetOS()

        var ccOptions = StringBufferInit(256)
        defer ccOptions.free()
        for(var i = 0; i < this.compilerOptions.size(); i+= 1) {
            var option = this.compilerOptions.getPtr(i)

            // skip this option, if the OS doesn't match
            if(option.os != OS.Lita_OSType_OTHER && option.os != os) {
                continue
            }

            ccOptions.appendStrn(" ", 1)
            ccOptions.appendStrn(option.options.buffer, option.options.length)
        }
        if(!ccOptions.empty()) {
            tcc_set_options(state, ccOptions.cStr())

            if(this.options.isVerbose) {
                printf("Options: '%s'\n", ccOptions.cStr())
            }
        }
    }

    if(tcc_compile_string(state, sourceCode) < 0) {
        return false
    }
    return true

#else
    Panic("tcc is not supported on non x86/64 CPU architectures")
    return true
#end
}

public func (this: *Lita) emitC(module: *Module, cFilename: *const char) : bool {
    this.startCapture(MetricType.CGEN)

    var file: File{}
    if(file.open(cFilename, FileOpenOp.WRITE_BINARY) != FileStatus.Ok) {
        return false
    }
    defer file.close()

    var cgen = CGen{}
    cgen.init(this, file)
    cgen.emitProgram(module)
    this.endCapture(MetricType.CGEN)

    return this.result.errors.empty()
}

public func (this: *Lita) compileC(module: *Module, sourceFilename: *const char, binaryFilename: *const char) : bool {
    this.startCapture(MetricType.CCOMPILE)
    defer this.endCapture(MetricType.CCOMPILE)

    var commandStr = StringBufferInit(1024)
    defer commandStr.free()

    commandStr.appendStr(this.options.compileCmd)

    var index = commandStr.indexOf("%output%")
    if(index > -1) {
        commandStr.replace(index, index+strlen("%output%"), binaryFilename)
    }

    index = commandStr.indexOf("%input%")
    if(index > -1) {
        commandStr.replace(index, index+strlen("%input%"), sourceFilename)
    }

    this.applyCompilerOptions(commandStr)

    if(this.options.isVerbose) {
        printf("Running command: '%s'\n", commandStr.cStr())
    }

    if(system(commandStr.cStrConst()) == 0) {
        return true
    }
    return false
}

func (this: *Lita) applyCompilerOptions(commandStr: *StringBuffer) {
    var buffer: *StringBuffer = commandStr;

    var replaceBuffer: StringBuffer;
    if(this.options.isStrict) {
        replaceBuffer.init(256)
        buffer = &replaceBuffer;
    }

    // Add in this projects lib and include folder if they exist
    {
        var temp:[256]char;
        var path = StringInit(temp, 256, 0)
        path.format("%s/lib", this.options.projectPath)
        if(FileExists(path.cStr())) {
            buffer.append(" -L%s", path.cStr())
        }

        path.format("%s/include", this.options.projectPath)
        if(FileExists(path.cStr())) {
            buffer.append(" -I%s", path.cStr())
        }
    }

    // Add in any @compiler_option's defined in modules
    var os = GetOS()
    var arch = GetArch()
    for(var i = 0; i < this.compilerOptions.size(); i+= 1) {
        var option = this.compilerOptions.getPtr(i)

        // skip this option, if the OS doesn't match
        if(option.os != OS.Lita_OSType_OTHER && option.os != os) {
            continue
        }

        // skip this option, if the Arch doesn't match
        if(option.arch != Arch.Lita_ArchType_UNKNOWN && option.arch != arch) {
            continue
        }

        buffer.appendStrn(" ", 1)
        buffer.appendStrn(option.options.buffer, option.options.length)
    }

    if(this.options.isStrict) {
        var index = commandStr.indexOf("%options%")
        if(index >= 0) {
            commandStr.replace(index, index+strlen("%options%"), buffer.cStr())
        }

        buffer.free()
    }
}

public func (this: *Lita) run() : i32 {
    var sb = StringBufferInit(256, this.allocator)
    defer sb.free()

    var path: [MAX_PATH]char;
    FilePath(this.binaryFilename, path)

    var len = strlen(path)
    sb.appendStrn("cd ", 3)
    sb.appendStrn(path, len)
    sb.append(" && .%s", PATH_SEPARATOR)
    sb.appendStr(&this.binaryFilename[len + 1])

    return system(sb.cStr())
}


public func FindModulePath(lita: *Lita,
                           moduleName: StringView,
                           filename: [MAX_PATH]char) : bool {

    var path = [MAX_PATH]char{0}
    var pathStr = StringInit(path, MAX_PATH, 0);
    defer {
        GetAbsolutePath(CurrentWorkingPath(), pathStr.cStr(), filename)
    }

    // First check to see if there is a Lita source file
    {
        pathStr.format("%s/%.*s.lita", lita.options.srcPath, moduleName.length, moduleName.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }

        pathStr.format("%s/%.*s.lita", lita.options.libPath, moduleName.length, moduleName.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }

        pathStr.format("%s/stdlib/%.*s.lita", lita.options.litaPath, moduleName.length, moduleName.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }
    }

    // If no Lita source file, check to see if there is a folder with the modules name; if one exists,
    // there should be a Lita source file of the same name
    {
        var index = moduleName.lastIndexOfAt("/", 1)
        var name = index < 0 ? moduleName : moduleName.substring(index + 1)

        pathStr.format("%s/%.*s/%.*s.lita", lita.options.srcPath, moduleName.length, moduleName.buffer, name.length, name.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }

        pathStr.format("%s/%.*s/%.*s.lita", lita.options.libPath, moduleName.length, moduleName.buffer, name.length, name.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }

        pathStr.format("%s/stdlib/%.*s/%.*s.lita", lita.options.litaPath, moduleName.length, moduleName.buffer, name.length, name.buffer)
        if(FileExists(pathStr.cStrConst())) {
            return true
        }
    }

    // Finally check and see if there is an imported package
    {
        for(var i = 0; i < lita.buildFile.pkgPaths.size(); i+=1) {
            var pkgPath = lita.buildFile.pkgPaths.get(i)
            pathStr.format("%s%s/%.*s.lita", lita.options.projectPath, pkgPath, moduleName.length, moduleName.buffer)
            if(FileExists(pathStr.cStrConst())) {
                return true
            }

            var index = moduleName.lastIndexOfAt("/", 1)
            var name = index < 0 ? moduleName : moduleName.substring(index + 1)

            pathStr.format("%s%s/%.*s/%.*s.lita", lita.options.projectPath, pkgPath, moduleName.length, moduleName.buffer, name.length, name.buffer)
            if(FileExists(pathStr.cStrConst())) {
                return true
            }
        }
    }

    pathStr.clear()
    return false
}

func ParseModule(lita: *Lita, module: *Module, pos: SrcPos) : bool {
    if(!module) {
        return false
    }

    // if we are processing as LSP, let's check the workspace for an open
    // document that contains the text
    if(lita.workspace) {
        var output:[MAX_PATH]char
        var uri = FilePathToUri(module.id.filename, output)
        uri = PathNormalize(uri, uri)

        var doc = lita.workspace.openedDocuments.get(uri)
        if(doc) {
            module.text.buffer = doc.text.cStr()
            module.text.length = doc.text.length
            module.text.capacity = doc.text.length
        }
    }

    if(!module.text.length) {
        var length: usize;

        var status = ReadFile(module.id.filename, &module.text.buffer, &length, lita.allocator)
        if(status == FileStatus.FileNotFoundError) {
            lita.result.addError(pos, "Could not open file '%s'\n", module.id.filename)
            return false
        }

        if(status == FileStatus.IOError) {
            lita.result.addError(pos, "Could not read file '%s'\n", module.id.filename)
            return false
        }

        module.text.length = length as (i32)
        module.text.capacity = length as (i32)
    }

    var parser = ParserInit(module.id.filename, module.text.buffer, module.text.length, module, lita)
    var moduleStmt = parser.parseModule()
    module.ast = moduleStmt
    lita.totalSourceLines += parser.totalLines

    for(var i = 0; i < module.ast.imports.size(); i += 1) {
        var importStmt = module.ast.imports.get(i)
        if(importStmt.name.token.type == TokenType.ERROR) {
            lita.result.addError(importStmt.startPos, "Could not parse import statement")
            continue
        }

        var filename: [MAX_PATH]char
        if(!FindModulePath(lita, importStmt.name.str.view, filename)) {
            lita.result.addError(importStmt.startPos, "Could not find module '%.*s'",
                    importStmt.name.str.length, importStmt.name.str.buffer)
            continue
        }

        var importModule = lita.getModule(filename)
        if(importModule) {
            importStmt.moduleId = &importModule.id
            continue;
        }

        importModule = NewModule(lita, filename)
        importStmt.moduleId = &importModule.id
        lita.addModule(importModule)

        ParseModule(lita, importModule, importStmt.startPos)
    }

    return true
}
