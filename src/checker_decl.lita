import "std/libc"
import "std/map"
import "std/array"
import "std/string_buffer"
import "std/string_view"
import "std/string"
import "std/assert"

import "types"
import "types_new"
import "symbols"
import "phase_result"
import "module"
import "ast"
import "ast_new"
import "lex"
import "lita"
import "generics"
import "common"
import "ast_print"
import "checker"
import "checker_expr"
import "intern"

public func (this: *TypeChecker) resolveDecl(decl: *Decl) : bool {
    assert(decl != null)

    switch(decl.kind) {
        case StmtKind.IMPORT_DECL: {
            return true;
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var type = this.resolveValueDecl(decl as (*VarDecl))
            if(!type) {
                return false
            }

            this.addSymbol(decl, type)
            return true;
        }
        case StmtKind.TRAIT_DECL:
        case StmtKind.STRUCT_DECL:
        case StmtKind.UNION_DECL: {
            var aggDecl = decl as (*AggregateDecl)
            return this.resolveAggregateDecl(aggDecl)
        }
        case StmtKind.ENUM_DECL: {
            var enumDecl = decl as (*EnumDecl)
            return this.resolveEnumDecl(enumDecl)
        }
        case StmtKind.FUNC_DECL: {
            var funcDecl = decl as (*FuncDecl)
            return this.resolveFuncDecl(funcDecl)
        }
        case StmtKind.TYPEDEF_DECL: {
            var typedefDecl = decl as (*TypedefDecl)
            return this.resolveTypedefDecl(typedefDecl)
        }
        case StmtKind.PARAM_DECL: {
            var paramDecl = decl as (*ParameterDecl)
            return this.resolveParamDecl(paramDecl)
        }
        case StmtKind.NATIVE_DECL:
        case StmtKind.POISON_DECL: {
            break
        }
        default: {
            assert(false)
        }
    }

    return false
}

public func (this: *TypeChecker) resolveValueDecl(decl: *VarDecl) : *TypeInfo {
    defer this.references.addTypeReferenceBySymbol(decl.startPos, decl.sym)

    if(!decl.expr && decl.kind == StmtKind.CONST_DECL) {
        if(!decl.hasNote("foreign")) {
            this.result.addError(decl.startPos, "const declaration must have an assignment (unless it is '@foreign')")
            return null
        }
    }

    if(this.result.enabled && !this.resolveNotes(decl.attributes.notes)) {
        return null
    }

    var declaredType: *TypeInfo = null
    var inferredType: *TypeInfo = null

    if(decl.typeSpec) {
        declaredType = this.resolveTypeSpec(decl.typeSpec)
    }

    if(decl.expr) {
        if(!this.resolveExpr(decl.expr)) {
            return null
        }

        var op = decl.expr.operand
        if(decl.expr.kind == StmtKind.ARRAY_INIT_EXPR ||
           decl.expr.kind == StmtKind.INIT_EXPR) {
            inferredType = op.typeInfo
        }
        else if(op.typeInfo.kind == TypeKind.NULL && declaredType == null) {
            this.result.addError(decl.expr.startPos,
                "invalid variable declaration, can't infer type from 'null' for '%.*s' variable", decl.name.str.length, decl.name.str.buffer)
            return null
        }
        else {
            inferredType = this.typeCache.typeDecay(decl.expr.operand.typeInfo)
            if(declaredType) {
                decl.expr = this.coerceTypeWithUsing(decl.expr, inferredType, declaredType)
                inferredType = this.typeCache.typeDecay(decl.expr.operand.typeInfo)
            }
        }

        decl.expr.expectedType = declaredType ? declaredType : inferredType;
    }

    if(declaredType && inferredType) {
        if(!this.checkDeclarability(decl.expr.startPos, declaredType, inferredType)) {
            return false
        }
    }

    var resultType = declaredType ? declaredType : inferredType
    if(!resultType) {
        this.result.addError(decl.startPos,
                "invalid variable declaration, can't infer type for '%.*s' variable", decl.name.str.length, decl.name.str.buffer)
    }
    return resultType
}

func (this: *TypeChecker) checkAnonAggregateFieldDuplicate(aggDecl: *AggregateDecl, field: FieldStmt, index: i32) : bool {
    var errors = this.errors()
    switch(field.kind) {
        case StmtKind.TRAIT_FIELD_DECL: {
            var traitField = field.traitField
            if(traitField.name.token.type != TokenType.IDENTIFIER) {
                break
            }

            this.checkAggregateFieldDuplicate(aggDecl, traitField.name.str, index)
            break;
        }
        case StmtKind.VAR_FIELD_DECL: {
            var varField = field.varField
            if(varField.name.token.type != TokenType.IDENTIFIER) {
                break
            }

            this.checkAggregateFieldDuplicate(aggDecl, varField.name.str, index)
            break;
        }
        case StmtKind.ENUM_FIELD_DECL: {
            var enumField = field.enumField
            if(enumField.name.token.type != TokenType.IDENTIFIER) {
                break
            }
            this.checkAggregateFieldDuplicate(aggDecl, enumField.name.str, index)
            break;
        }
        case StmtKind.UNION_FIELD_DECL:
        case StmtKind.STRUCT_FIELD_DECL: {
            var aggField = field.aggregateField
            if(aggField.name.token.type == TokenType.IDENTIFIER) {
                this.checkAggregateFieldDuplicate(aggDecl, aggField.name.str, index)
                break;
            }
            else if(aggField.name.token.type == TokenType.VOID) {
                for(var j = 0; j < aggField.fields.size(); j+=1) {
                    var anonymousField = aggField.fields.get(j)
                    this.checkAnonAggregateFieldDuplicate(aggDecl, anonymousField, index)
                }
            }
            break;
        }
        case StmtKind.POISON_EXPR: {
            break;
        }
        default: {
            assert(false)
        }
    }

    return this.errors() == errors
}

func (this: *TypeChecker) errorInvalidMemberForTrait(aggDecl: *AggregateDecl, fieldName: InternedString, pos: SrcPos) {
    this.result.addError(pos, "invalid member '%.*s', only function pointers are allowed for traits",
                         fieldName.length, fieldName.buffer)
}

func (this: *TypeChecker) errorUsingMember(aggDecl: *AggregateDecl, fieldName: InternedString, pos: SrcPos) {
    if(aggDecl.name.str.length) {
        this.result.addError(pos, "invalid 'using' member '%.*s' in '%.*s', only aggregate types (or pointer to an aggregate) are allowed",
                                        fieldName.length, fieldName.buffer,
                                        aggDecl.name.str.length, aggDecl.name.str.buffer)
    }
    else {
        this.result.addError(pos, "invalid 'using' member '%.*s', only aggregate types (or pointer to an aggregate) are allowed",
                                fieldName.length, fieldName.buffer)
    }
}

func (this: *TypeChecker) errorUsingParameter(paramDecl: *ParameterDecl) {
    this.result.addError(paramDecl.startPos, "invalid 'using' parameter '%.*s', only aggregate types (or pointer to an aggregate) are allowed",
                         paramDecl.name.str.length, paramDecl.name.str.buffer)

}

func (this: *TypeChecker) errorDuplicateMember(aggDecl: *Decl, fieldName: InternedString, pos: SrcPos) {
    if(aggDecl.name.str.length) {
        this.result.addError(pos, "duplicate member '%.*s' in '%.*s'",
                                        fieldName.length, fieldName.buffer,
                                        aggDecl.name.str.length, aggDecl.name.str.buffer)
    }
    else {
        this.result.addError(pos, "duplicate member '%.*s'",
                                fieldName.length, fieldName.buffer)
    }
}

func (this: *TypeChecker) checkAggregateFieldDuplicate(aggDecl: *AggregateDecl, fieldName: InternedString, index: i32) : bool {
    var isValid = true;
    for(var i = 0; i < aggDecl.fields.size(); i+=1) {
        if(index == i) {
            continue
        }

        var field = aggDecl.fields.get(i)
        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL: {
                var traitField = field.traitField
                if(traitField.name.token.type != TokenType.IDENTIFIER) {
                    continue
                }

                if(traitField.name.str.equals(fieldName)) {
                    this.errorDuplicateMember(aggDecl, fieldName, traitField.startPos)
                    isValid = false
                }

                break;
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                if(varField.name.token.type != TokenType.IDENTIFIER) {
                    continue
                }

                if(varField.name.str.equals(fieldName)) {
                    this.errorDuplicateMember(aggDecl, fieldName, varField.startPos)
                    isValid = false
                }

                break;
            }
            case StmtKind.ENUM_FIELD_DECL: {
                var enumField = field.enumField
                if(enumField.name.token.type != TokenType.IDENTIFIER) {
                    continue
                }
                if(enumField.name.str.equals(fieldName)) {
                    this.errorDuplicateMember(aggDecl, fieldName, enumField.startPos)
                    isValid = false
                }
                break;
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                var aggField = field.aggregateField
                if(aggField.name.token.type == TokenType.IDENTIFIER) {
                    if(aggField.name.str.equals(fieldName)) {
                        this.errorDuplicateMember(aggDecl, fieldName, aggField.startPos)
                        isValid = false
                    }
                }
                else if(aggField.name.token.type == TokenType.VOID) {
                    isValid = this.checkAggregateFieldDuplicate(aggField, fieldName, -1) && isValid
                }
                break;
            }
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }
    return isValid
}

public func (this: *TypeChecker) resolveNoteDecl(noteDecl: *AggregateDecl) : bool {
    defer this.references.addTypeReferenceBySymbol(noteDecl.startPos, noteDecl.sym)

    var errors = this.errors()

    for(var i = 0; i < noteDecl.fields.size(); i+=1) {
        var field = &noteDecl.fields.elements[i]

        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL:
            case StmtKind.ENUM_FIELD_DECL:
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                // TODO: Error
                return false
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                field.typeInfo = this.resolveTypeSpec(varField.type)
                assert(field.typeInfo)

                if(varField.defaultExpr) {
                    if(!this.resolveExpr(varField.defaultExpr)) {
                        return false
                    }
                    this.checkDeclarability(varField.defaultExpr.startPos, field.typeInfo, varField.defaultExpr.operand.typeInfo)
                }

                this.checkAggregateFieldDuplicate(noteDecl, varField.name.str, i)
                break;
            }
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }

    this.addFieldReferences(noteDecl, noteDecl.sym.type, 0)

    return this.errors() == errors
}


public func (this: *TypeChecker) resolveAggregateDecl(aggDecl: *AggregateDecl) : bool {
    defer this.references.addTypeReferenceBySymbol(aggDecl.startPos, aggDecl.sym)

    var errors = this.errors()

    var hasGenerics = aggDecl.sym.flags & SymbolFlags.IS_GENERIC_TEMPLATE
    if(hasGenerics) {
        this.genericParamStack.add(aggDecl.genericParams)
    }

    defer if(hasGenerics) {
        this.genericParamStack.pop()
    }


    if(!this.resolveNotes(aggDecl.attributes.notes)) {
        return false
    }

    const isTrait = aggDecl.sym.flags & SymbolFlags.IS_TRAIT
    const module = this.current

    for(var i = 0; i < aggDecl.fields.size(); i+=1) {
        var field = &aggDecl.fields.elements[i]

        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL: {
                assert(isTrait)

                var traitField = field.traitField
                field.typeInfo = this.resolveTypeSpec(traitField.type)
                assert(field.typeInfo)

                if(!this.resolveNotes(traitField.attributes.notes)) {
                    return false
                }

                if(field.typeInfo.kind != TypeKind.FUNC_PTR) {
                    this.errorInvalidMemberForTrait(aggDecl, traitField.name.str, traitField.startPos)
                    return false
                }

                var traitFn = field.typeInfo
                traitFn.isTrait = true

                this.checkAggregateFieldDuplicate(aggDecl, traitField.name.str, i)
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                field.typeInfo = this.resolveTypeSpec(varField.type)
                assert(field.typeInfo)

                if(!this.resolveNotes(varField.attributes.notes)) {
                    return false
                }

                if(isTrait) {
                    this.errorInvalidMemberForTrait(aggDecl, varField.name.str, varField.startPos)
                    return false
                }

                if(varField.defaultExpr) {
                    if(!this.resolveExpr(varField.defaultExpr)) {
                        return false
                    }
                    this.checkDeclarability(varField.defaultExpr.startPos, field.typeInfo, varField.defaultExpr.operand.typeInfo)
                }
                if(varField.attributes.isUsing) {
                    if(!IsAggregate(field.typeInfo) && !IsPtrAggregate(field.typeInfo)) {
                        this.errorUsingMember(aggDecl, varField.name.str, varField.startPos)
                    }
                }

                this.checkAggregateFieldDuplicate(aggDecl, varField.name.str, i)
                break;
            }
            case StmtKind.ENUM_FIELD_DECL: {
                if(isTrait) {
                    this.errorInvalidMemberForTrait(aggDecl, field.enumField.name.str, field.enumField.startPos)
                    return false
                }

                var sym = field.enumField.sym
                if(!sym) {
                    return false
                }

                sym.flags |= SymbolFlags.IS_INCOMPLETE
                this.resolveSymbol(sym)

                field.typeInfo = sym.type
                if(!field.typeInfo) {
                    return false
                }

                if(!this.resolveNotes(field.enumField.attributes.notes)) {
                    return false
                }

                if(field.enumField.name.token.type == TokenType.IDENTIFIER) {
                    this.checkAggregateFieldDuplicate(aggDecl, field.enumField.name.str, i)
                }

                break;
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                if(isTrait) {
                    this.errorInvalidMemberForTrait(aggDecl, field.aggregateField.name.str, field.aggregateField.startPos)
                    return false
                }

                // if this is from a generic template, we must make sure
                // any generic arguments are accounted for
                var sym: *Symbol = field.aggregateField.sym
                if(aggDecl.sym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE) {
                    var nameStr = field.aggregateField.name.str

                    // determine if this symbol has already been created
                    sym = this.getTypeByName(nameStr)
                    if(!sym) {
                        // if it hasn't, create it from the template
                        sym = this.createDeclSymbol(field.aggregateField)
                    }

                    // build up the new Declaration Name with the appropriate generic arguments supplemented in
                    // from the parent declaration
                    var nameSpec = NewNameTypeSpecIntern(field.aggregateField.startPos, nameStr, &module.typeSpecAllocator)
                    nameSpec.genericArgs.init(field.aggregateField.genericParams.size(), module.allocator)

                    for(var i = 0; i < field.aggregateField.genericParams.size(); i += 1) {
                        var genericParam = field.aggregateField.genericParams.get(i)

                        assert(aggDecl.sym.genericParams.size() == aggDecl.sym.genericArgs.size())

                        for(var j = 0; j < aggDecl.sym.genericParams.size(); j += 1) {
                            var parentGenericParam = aggDecl.sym.genericParams.get(j)

                            if(parentGenericParam.name.str.equals(genericParam.name.str)) {
                                nameSpec.genericArgs.add(aggDecl.sym.genericArgs.get(j).asTypeSpec(module))
                                break
                            }
                        }
                    }

                    // using the appropriate generic arguments create the concrete
                    // symbol
                    sym = CreateTypeFromGenericTemplate(this, sym, nameSpec)
                    sym.flags |= SymbolFlags.IS_INCOMPLETE
                }

                if(!sym) {
                    return false
                }

                field.aggregateField.sym = sym

                if(!this.resolveNotes(field.aggregateField.attributes.notes)) {
                    return false
                }

                //sym.flags |= SymbolFlags.IS_INCOMPLETE
                this.resolveSymbol(sym)
                this.finishResolveSymbol(sym)

                field.typeInfo = sym.type
                if(!field.typeInfo) {
                    return false
                }

                if(field.aggregateField.name.token.type == TokenType.IDENTIFIER) {
                    this.checkAggregateFieldDuplicate(aggDecl, field.aggregateField.name.str, i)
                }
                else {
                    for(var j = 0; j < field.aggregateField.fields.size(); j+=1) {
                        var anonymousField = field.aggregateField.fields.get(j)
                        this.checkAnonAggregateFieldDuplicate(aggDecl, anonymousField, i)
                    }
                }
                break;
            }
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }

    this.addFieldReferences(aggDecl, aggDecl.sym.type, 0)

    return this.errors() == errors
}


func (this: *TypeChecker) addFieldReferences(aggDecl: *AggregateDecl, parentTypeInfo: *TypeInfo, position: i32) : i32 {
    for(var i = 0; i < aggDecl.fields.size(); i+=1) {
        var field = &aggDecl.fields.elements[i]
        if(!field.typeInfo) {
            position += 1
            continue
        }

        switch(field.kind) {
            case StmtKind.TRAIT_FIELD_DECL: {
                this.lita.references.addFieldReference(field.traitField.startPos, parentTypeInfo, position)
                position += 1
                break;
            }
            case StmtKind.VAR_FIELD_DECL: {
                var varField = field.varField
                this.lita.references.addFieldReference(field.varField.startPos, parentTypeInfo, position)

                if(varField.attributes.isUsing) {
                    if(IsAggregate(field.typeInfo) || IsPtrAggregate(field.typeInfo)) {
                        var aggInfo = field.typeInfo.getBaseType()
                        position += aggInfo.aggDecl.fields.size()
                    }
                }
                else {
                    position += 1
                }
                break;
            }
            case StmtKind.ENUM_FIELD_DECL: {
                this.lita.references.addFieldReference(field.enumField.startPos, parentTypeInfo, position)
                position += 1
                break;
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                if(field.aggregateField.name.token.type == TokenType.IDENTIFIER) {
                    this.lita.references.addFieldReference(field.aggregateField.startPos, parentTypeInfo, position)
                    position += 1
                }
                else {
                    position = this.addFieldReferences(field.aggregateField, parentTypeInfo, position)
                }
                break;
            }
            case StmtKind.POISON_EXPR: {
                break;
            }
            default: {
                assert(false)
            }
        }
    }
    return position
}


func (this: *TypeChecker) checkEnumFieldDuplicate(enumDecl: *EnumDecl, field: *EnumFieldEntryDecl, index: i32) : bool {
    var hasDuplicates = false
    for(var i = 0; i < enumDecl.fields.size(); i+=1) {
        if(i == index) continue

        var other = enumDecl.fields.get(i)
        if(other.name.str.equals(field.name.str)) {
            this.result.addError(other.startPos, "duplicate member '%.*s'",
                                field.name.str.length, field.name.str.buffer)
            hasDuplicates = true
        }
    }

    return !hasDuplicates
}

public func (this: *TypeChecker) resolveEnumDecl(enumDecl: *EnumDecl) : bool {
    defer this.references.addTypeReferenceBySymbol(enumDecl.startPos, enumDecl.sym)

    var errors = this.errors()

    if(!this.resolveNotes(enumDecl.attributes.notes)) {
        return false
    }

    var parentTypeInfo = enumDecl.sym.type
    for(var i = 0; i < enumDecl.fields.size(); i+=1) {
        var field = enumDecl.fields.get(i)

        if(!this.resolveNotes(field.attributes.notes)) {
            return false
        }

        if(field.value) {
            if(!this.resolveExpr(field.value)) {
                return false
            }

            // TODO: Generate primitive constants ordering
            var typeInfo = field.value.operand.typeInfo
            this.checkTypeCompatibility(field.value.startPos, typeInfo, &I32_TYPE)
        }

        this.checkEnumFieldDuplicate(enumDecl, field, i)
        this.lita.references.addFieldReference(field.startPos, parentTypeInfo, i)
    }
    return this.errors() == errors
}

func (this: *TypeChecker) checkLabels() {
    for(var i = 0; i < this.numOfLabels; i+=1) {
        var label = &this.labels[i]
        if(!label.defined) {
            assert(label.stmt != null)
            this.result.addError(label.stmt.startPos, "'%.*s' label not found", label.name.length, label.name.buffer)
        }
    }
}

public func (this: *TypeChecker) resolveFuncDecl(funcDecl: *FuncDecl) : bool {
    defer this.references.addTypeReferenceBySymbol(funcDecl.startPos, funcDecl.sym)

    var errors = this.errors()

    this.enterModule(funcDecl.sym.declared)
    defer this.leaveModule()

    this.pushScope(Scope{})
    defer this.popScope()

    // keep track of which function we are currently parsing
    this.funcDeclStack.add(funcDecl.sym.type)
    defer this.funcDeclStack.pop()

    var hasGenerics = funcDecl.sym.flags & SymbolFlags.IS_GENERIC_TEMPLATE
    if(hasGenerics) {
        this.genericParamStack.add(funcDecl.genericParams)
    }

    defer if(hasGenerics) {
        this.genericParamStack.pop()
    }


    if(!this.resolveNotes(funcDecl.attributes.notes)) {
        return false
    }

    if(!this.resolveStmt(funcDecl.params)) {
        return false
    }

    if(funcDecl.body) {
        this.numOfLabels = 0
        if(!this.resolveStmt(funcDecl.body)) {
            return false
        }

        this.checkLabels()
    }

    return this.errors() == errors
}

public func (this: *TypeChecker) resolveParamDecl(paramDecl: *ParameterDecl) : bool {
    assert(paramDecl != null)

    defer this.references.addTypeReferenceBySymbol(paramDecl.startPos, paramDecl.sym)

    var errors = this.errors()

    if(!this.resolveNotes(paramDecl.attributes.notes)) {
        return false
    }

    if(paramDecl.defaultExpr) {
        if(!this.resolveExpr(paramDecl.defaultExpr)) {
            return false
        }
    }

    var typeInfo = this.resolveTypeSpec(paramDecl.type)
    if(!typeInfo || typeInfo == &POISON_TYPE) {
        return false
    }

    paramDecl.sym = this.addSymbol(paramDecl, typeInfo)

    if(paramDecl.attributes.isUsing) {
        if(!IsAggregateLike(typeInfo)) {
            this.errorUsingParameter(paramDecl)
        }
        else {
            var baseType = typeInfo.getBaseType()
            var aggType = baseType

            this.addTypeToScope(paramDecl, this.current.currentScope, aggType, aggType)
        }
    }

    return this.errors() == errors
}

public func (this: *TypeChecker) resolveTypedefDecl(typedefDecl: *TypedefDecl) : bool {
    defer this.references.addTypeReferenceBySymbol(typedefDecl.startPos, typedefDecl.sym)

    if(!this.resolveNotes(typedefDecl.attributes.notes)) {
        return false
    }

    // nothing to type check
    return true
}