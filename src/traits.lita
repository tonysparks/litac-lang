import "std/assert"
import "std/libc"
import "std/array"
import "std/map"
import "std/string_buffer"
import "std/string_view"
import "std/string"

import "types"
import "lita"
import "symbols"
import "ast"
import "ast_copy"
import "parser"
import "checker"
import "lex"
import "module"
import "common"

/*
    Traits need the following:

LitaC:
    trait List {
        fn: func() : i32
    }

    struct LinkedList {
        // ...
    }

    func (this: *LinkedList) fn() : i32 {
        // ...
    }

C:
    // the trait itself becomes this structure
    struct List {
        ListVirtualTable* vtable; // the virtual table containing the function pointers
        void* this;               // a pointer to the concrete implementation type
    }

    // generated Virtual table
    struct ListVirtualTable {
        i32 (*fn)(void*);  // the function pointer, with void* this as the first parameter
    }

    // Wrapper function that basically just casts the void* to the concrete type and calls the
    // concrete function
    i32 LinkedList_fn_wrapper(void* this) {
        LinkedList* _this = (LinkedList*)this;
        return LinkedList_fn(_this); // calls the actual LinkedList.fn function
    }

    // global of all implementations mapping to their concrete functions for each type
    static ListVirtualTable** ListVtables = {
        [0] = &(ListVirtualTable) {
            .fn = LinkedList_fn_wrapper
        },
        ...
    }

    // Create a casting function that converts the concrete type to the trait type.  In doing so, we must
    // ensure the proper vtable implementation functions are populated
    List LinkedList_to_List(LinkedList* list) {
        return List {
            .vtable = ListVtables[0], // uses the global virtual table, matches the index to the proper implementation
            .this = list              // sets the this pointer to the concrete type
        }
    }

    Most of this code can be generated on the LitaC side, however, given that LitaC currently doesn't know about
    the actual trait vtable and this entries, these are delegated to the cgen module for creation.  The cgen module
    also must know when a trait method is being called and do the following:

    LitaC:
        list.fn()
    C:
        list->vtable->fn(list->this)   // we must convert the trait call to call the vtable and also pass in the 'this' pointer

    Also, the cgen module handles casting between concrete types and traits:

    LitaC:
        var ll = LinkedList {...}
        var list: List = &ll
    C:
        LinkedList ll {...}
        List list = LinkedList_to_List(&ll)   // Cast the LinkedList to List type
*/

public func CreateTraitWrappers(checker: *TypeChecker) : Array<*Decl> {
    var allocator = checker.current.allocator

    var sb = StringBufferInit(2048, allocator)

    var traitBuffer      = StringBufferInit(MAX_SYMBOL_NAME, allocator)
    var traitFieldBuffer = StringBufferInit(MAX_SYMBOL_NAME, allocator)

    for(var i = 0; i < checker.symbolTraits.size(); i+=1) {
        var traitSym = checker.symbolTraits.get(i)
        assert(traitSym)
        assert(traitSym.decl && traitSym.decl.kind == StmtKind.TRAIT_DECL)

        var traitDecl = traitSym.decl as (*AggregateDecl)
        var traitName = GetTraitName(traitSym, traitBuffer)
        GenerateVTable(traitSym, traitDecl, traitName, sb)

        // there are no implementations, so we can skip generating wrappers
        // for this trait
        if(!checker.interfaceImpls.contains(traitSym.type.typeid)) {
            continue
        }

        var impls = checker.interfaceImpls.getPtr(traitSym.type.typeid)
        GenerateWrapperFunctions(
            checker,
            traitSym,
            traitDecl,
            traitName,
            sb,
            traitFieldBuffer,
            impls)

        GenerateVTableEntries(
            checker,
            traitDecl,
            traitName,
            sb,
            traitFieldBuffer,
            impls)
    }

    // printf("Traits Source: \n%s\n", sb.cStr())
    var parser = ParserInit("generated", sb.cStr(), sb.length, checker.current, checker.lita)
    var stmts = parser.parseModule()
    return stmts.declarations
}

func GenerateVTable(
        traitSym: *Symbol,
        traitDecl: *AggregateDecl,
        traitName: StringView,
        sb: *StringBuffer) {
    sb.append("@hidden struct %.*s__VirtualTable", traitName.length, traitName.buffer)
    sb.append(" {\n")

    for(var j = 0; j < traitDecl.fields.size(); j += 1) {
        var field = traitDecl.fields.get(j)
        assert(field.kind == StmtKind.TRAIT_FIELD_DECL)
        assert(field.typeInfo != null && field.typeInfo.kind == TypeKind.FUNC_PTR)

        var fn = field.typeInfo
        var traitField = field.traitField
        sb.append("    %.*s: func", traitField.name.str.length, traitField.name.str.buffer)
        PrintGenerics(fn.genericParams, sb)
        sb.append("(*void")
        for(var p = 0; p < fn.paramDecls.size(); p += 1) {
            var param = fn.paramDecls.get(p)
            sb.append(", ")
            param.toString(sb, true)
        }
        sb.append(") : ")
        fn.returnType.toString(sb, true)
        sb.append(";\n")
    }
    sb.append("}\n")
}


func GenerateWrapperFunctions(
        checker: *TypeChecker,
        traitSym: *Symbol,
        traitDecl: *AggregateDecl,
        traitName: StringView,
        sb: *StringBuffer,
        traitFieldBuffer: *StringBuffer,
        impls: *Array<Typeid>) {
    sb.append("// Trait: '%.*s' has %d impls\n", traitDecl.name.str.length, traitDecl.name.str.buffer, impls.size())

    // Generate Wrapper functions
    for(var i = 0; i < impls.size(); i += 1) {
        var implSym = FindSymbolByTypeid(checker.symbolTypes, impls.get(i))

        if(!implSym) {
            continue;
        }

        var implEscapedName = GetTraitName(implSym, traitFieldBuffer)

        var implName = implSym.name

        if(implSym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE) {
            var genericTypeid = implSym.type.genericTypeid
            var genSym = FindSymbolByTypeid(checker.symbolTypes, genericTypeid)
            implName = genSym.name
        }

        for(var j = 0; j < traitDecl.fields.size(); j += 1) {
            var field = traitDecl.fields.get(j)
            assert(field.kind == StmtKind.TRAIT_FIELD_DECL)
            assert(field.typeInfo && field.typeInfo.kind == TypeKind.FUNC_PTR)

            var fn = field.typeInfo

            sb.append("@hidden func __%.*s_%.*s_wrapper", implEscapedName.length, implEscapedName.buffer, field.traitField.name.str.length, field.traitField.name.str.buffer)
            sb.append("(this: *void")
            for(var p = 0; p < fn.paramDecls.size(); p += 1) {
                var param = fn.paramDecls.get(p)
                sb.append(", _%d: ", p)
                param.toString(sb, true)
            }

            if(fn.hasVarargs) {
                // TODO: do varargs passing
                sb.append(", ...")
            }

            sb.append(") : ")
            fn.returnType.toString(sb, true)
            sb.append(" {\n")
            {
                if(implSym.declared.isBuiltin()) {
                    sb.append("    var __this = this as (*%.*s", implName.length, implName.buffer)
                }
                else {
                    var moduleName = implSym.declared.id.name
                    sb.append("    var __this = this as (*%.*s::%.*s",
                        moduleName.length, moduleName.buffer,
                        implName.length, implName.buffer)
                }
                PrintGenericArgs(implSym.genericArgs, sb)
                sb.append(")\n")

                if(fn.returnType.kind != TypeKind.VOID) {
                    sb.append("    return ")
                }
                else {
                    sb.append("    ")
                }

                sb.append("__this.%.*s", field.traitField.name.str.length, field.traitField.name.str.buffer)

                sb.append("(")
                for(var p = 0; p < fn.paramDecls.size(); p += 1) {
                    var param = fn.paramDecls.get(p)
                    if(p > 0) {
                        sb.append(", ")
                    }
                    sb.append("_%d", p)
                }
                sb.append(")")
            }
            sb.append("\n}\n")
        }
    }
}

func GenerateVTableEntries(
        checker: *TypeChecker,
        traitDecl: *AggregateDecl,
        traitName: StringView,
        sb: *StringBuffer,
        traitFieldBuffer: *StringBuffer,
        impls: *Array<Typeid>) {

    sb.append("@hidden const %.*s__vtables = []*%.*s__VirtualTable {\n",
        traitName.length, traitName.buffer, traitName.length, traitName.buffer)

    for(var i = 0; i < impls.size(); i += 1) {
        var implSym = FindSymbolByTypeid(checker.symbolTypes, impls.get(i))
        if(!implSym) {
            continue
        }

        var implEscapedName = GetTraitName(implSym, traitFieldBuffer)
        sb.append("    [%d] = &%.*s__VirtualTable {\n", i, traitName.length, traitName.buffer)
        {
            for(var j = 0; j < traitDecl.fields.size(); j += 1) {
                var field = traitDecl.fields.get(j)
                assert(field.kind == StmtKind.TRAIT_FIELD_DECL)

                sb.append("        .%.*s = __%.*s_%.*s_wrapper",
                    field.traitField.name.str.length, field.traitField.name.str.buffer,
                    implEscapedName.length, implEscapedName.buffer,
                    field.traitField.name.str.length, field.traitField.name.str.buffer)
                sb.append(",\n")
            }
        }
        sb.append("    },\n")
    }
    sb.append("}\n")
}

func PrintGenerics(genericParams: *Array<GenericParam>, sb: *StringBuffer) {
    for(var x = 0; x < genericParams.size(); x += 1) {
        if(x == 0) {
            sb.append("<")
        }
        if(x > 0) {
            sb.append(", ")
        }
        var name = genericParams.get(x).name
        sb.append("%.*s", name.str.length, name.str.buffer)
    }
    if(genericParams.size() > 0) {
        sb.append(">")
    }
}

func PrintGenericArgs(genericArgs: *Array<*TypeInfo>, sb: *StringBuffer) {
    for(var x = 0; x < genericArgs.size(); x += 1) {
        if(x == 0) {
            sb.append("<")
        }
        if(x > 0) {
            sb.append(", ")
        }

        var type = genericArgs.get(x)
        assert(type)
        type.toString(sb, true)
    }
    if(genericArgs.size() > 0) {
        sb.append(">")
    }
}

func FindSymbolByTypeid(symbols: Array<*Symbol>, id: Typeid) : *Symbol {
    if(id < TypeKind.MAX_TYPE_KINDS) {
        return GetBuiltinSymbol(id)
    }

    for(var i = 0; i < symbols.size(); i += 1) {
        var sym = symbols.get(i)
        if(sym.type && sym.type.typeid == id) {
            return sym
        }
    }

    return null
}

func GetTraitName(traitSym: *Symbol, sb: *StringBuffer) : StringView {

    // if this isn't a generic generated trait, just use the symbol name
    if(!(traitSym.flags & SymbolFlags.IS_FROM_GENERIC_TEMPLATE)) {
        return traitSym.name.view
    }

    sb.clear()

    // otherwise, we have to calculate the new name using the generic type arguments
    EscapeName(traitSym.name.buffer, traitSym.name.length, sb)

    return StringView {
        .buffer = sb.buffer,
        .length = sb.length
    }
}

func Parse(sb: *StringBuffer, checker: *TypeChecker, decls: *Array<*Decl>) {
    var parser = ParserInit("generated", sb.cStr(), sb.length, checker.current, checker.lita)
    var stmts = parser.parseModule()
    decls.addAll(stmts.declarations)
}