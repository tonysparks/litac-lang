import "pkg_mgr/pkg_mgr"
import "pkg_mgr/pkg"

import "std/assert"
import "std/io"
import "std/http"
import "std/system"
import "std/libc"
import "std/array"
import "std/mem"
import "std/string/buffer"
import "std/string/builder"
import "std/string"
import "std/zip"
import "std/json"
import "std/fs"

import "std/atomic"
/*
import "std/thread"
import "std/thread/thread_pool"
*/

const INSTALL_COMPLETED_FILE = ".litac_pkg"

public func PackageInstall(pm: *PackageManager, options: PackageInstallOptions) : PkgStatus {
    if(!pm.pkg) {
        return PkgStatus.OK
    }

    Mkdir(pm.options.pkgDir)
    if(!FileExists(pm.options.pkgDir)) {
        return PkgStatus.ERROR_CREATING_PKG_DIR
    }

    var numOfPkgs = pm.pkg.dependencies.size()
    if(numOfPkgs < 1) {
        return PkgStatus.OK
    }

    if(options.fullSync) {
        var temp:[MAX_PATH]char;
        var pkgPath = StringBufferInit(temp, MAX_PATH, 0)
        pkgPath.format("%s/%s", CurrentWorkingPath(), pm.options.pkgDir)

        var status = cleanPackageDirectory(pm, pkgPath.cStr())
        if(status != PkgStatus.OK) {
            return status
        }
    }

    var pkgsToInstall = ArrayInit<PackageId>(numOfPkgs, pm.allocator)
    defer pkgsToInstall.free()

    var findCode = findPackagesToInstall(pm, &pkgsToInstall)
    if(findCode != PkgStatus.OK) {
        return findCode
    }

    var http = Http{}
    http.init(options.httpOptions)
    defer http.free()

    var pkgPath:[MAX_PATH]char;

    for(var i = 0; i < pkgsToInstall.size(); i+=1) {
        var pkgId = pkgsToInstall.get(i)

        var status = makePackageDirectory(pm, pkgId, pkgPath)
        if(status != PkgStatus.OK) {
            return status
        }

        if(isPackageInstalled(pm, pkgId, pkgPath)) {
            var pkg: *PackageDef = null
            var status = readPackage(pm, pkgId, pkgPath, &pkg, pkgsToInstall)
            if(status != PkgStatus.OK) {
                return status
            }

            continue;
        }

        status = cleanPackageDirectory(pm, pkgPath)
        if(status != PkgStatus.OK) {
            return status
        }

        var pkgFile = StringBufferInit(pkgPath, MAX_PATH)
        pkgFile.appendStr("/pkg.zip")

        if(pkgId.repo().startsWith($"file://")) {
            status = zipLocalPackage(pm, pkgId, pkgFile.cStr())
        }
        else {
            status = downloadPackage(pm, &http, pkgId, pkgFile.cStr())
        }

        if(status != PkgStatus.OK) {
            return status
        }

        status = installPackage(pm, pkgId, pkgFile.cStr(), pkgsToInstall)
        if(status != PkgStatus.OK) {
            return status
        }
    }
    return PkgStatus.OK
}

func isPackageInstalled(pm: *PackageManager, pkgId: *PackageId, pkgDir: *const char) : bool {
    var temp:[MAX_PATH]char;
    var lockFile = StringBufferInit(temp, MAX_PATH, 0);
    lockFile.format("%s/%s", pkgDir, INSTALL_COMPLETED_FILE)

    if(FileExists(lockFile.cStr())) {
        return true
    }

    return false
}

func cleanPackageDirectory(pm: *PackageManager, pkgPath: *const char) : PkgStatus {
    var temp:[MAX_PATH]char;
    var path = StringBufferInit(temp, MAX_PATH, 0)
    path.append("%s", pkgPath)

    return deleteDir(pm, path)
}

func deleteDir(pm: *PackageManager, path: *StringBuffer) : PkgStatus {
    if(!FileExists(path.cStr())) {
        return PkgStatus.OK
    }

    var file: FileHandle;
    if(!file.open(path.cStr())) {
        pm.errors.append("unable to open: '%s'\n", path.cStr())
        return PkgStatus.ERROR_CLEANING_PKG
    }
    defer file.close()

    while(file.next()) {
        var len = path.length
        path.append("/%s", file.name())
        defer path.length = len

        if(file.isDirectory()) {
            if(deleteDir(pm, path) != PkgStatus.OK) {
                pm.errors.append("unable to delete directory: '%s'\n", path.cStr())
                return PkgStatus.ERROR_CLEANING_PKG
            }
        }

        if(!FileDelete(path.cStr())) {
            pm.errors.append("failed to delete: '%s'\n", path.cStr())
            return PkgStatus.ERROR_CLEANING_PKG
        }

    }
    return PkgStatus.OK
}

func findPackagesToInstall(pm: *PackageManager, pkgsToInstall: *Array<PackageId>) : PkgStatus {
    // TODO:
    // using the pkg.dependencies, scan the .pkg directory to ensure all packages
    // are download (we can do this by verifying the .litac_pkg file exists in the directory of the
    // package, we create this empty file to denote a package has been fully downloaded)
    if(pm.pkg) {
        pkgsToInstall.addAll(pm.pkg.dependencies)
    }
    return PkgStatus.OK
}

func makePackageDirectory(
    pm: *PackageManager,
    pkgId: *PackageId,
    output: [MAX_PATH]char) : PkgStatus {

    var pkgDirectory = StringBufferInit(output, MAX_PATH, 0);

    // the ${PWD}/.pkgs directory
    {
        pkgDirectory.format("%s/%s/",
            CurrentWorkingPath(),
            pm.options.pkgDir)

        Mkdir(pkgDirectory.cStr())
    }

    // the ${PWD}/.pkgs/{name}
    {
        var name = pkgId.name()
        var len = pkgDirectory.length
        pkgDirectory.append("%.*s/",
            name.length, name.buffer)

        var sanitizedPath: *char = pkgDirectory.cStr() + len
        sanitizeFilename(sanitizedPath, sanitizedPath)
        Mkdir(pkgDirectory.cStr())
    }

    // the ${PWD}/.pkgs/{name}/{version}
    {
        var version = pkgId.version()
        var len = pkgDirectory.length
        pkgDirectory.append("%.*s",
            version.length, version.buffer)

        var sanitizedPath: *char = pkgDirectory.cStr() + len
        sanitizeFilename(sanitizedPath, sanitizedPath)
        Mkdir(pkgDirectory.cStr())
    }

    var path = pkgDirectory.cStr()
    Mkdir(path)

    if(!FileExists(path)) {
        return PkgStatus.ERROR_CREATING_PKG_DIR
    }

    return PkgStatus.OK
}

func downloadPackage(
    pm: *PackageManager,
    http: *Http,
    pkgId: *PackageId,
    pkgFile: *const char) : PkgStatus {

    const uriTemplate = getRepoTemplate(pkgId)
    if(!uriTemplate) {
        return PkgStatus.ERROR_INVALID_REPO
    }

    var temp:[MAX_PATH]char;
    var uri = StringBufferInit(temp, MAX_PATH, 0)

    var repo = pkgId.repo()
    var name = pkgId.name()
    var version = pkgId.version()

    uri.format(uriTemplate,
            repo.length, repo.buffer,
            // name.length, name.buffer,
            version.length, version.buffer)

    var file: File;
    if(file.open(pkgFile, FileOpenOp.WRITE_BINARY) != FileStatus.Ok) {
        return PkgStatus.ERROR_UNABLE_TO_OPEN_FILE
    }
    defer file.close()

    var resp = HttpResponse {
        .userdata = &file,
        .bodyFn = httpCallback,
    }

    http.get(uri.cStr(), &resp)

    if(resp.statusCode < 200 || resp.statusCode > 299) {
        pm.errors.append(
            "error returned http status code: %d for request '%s'\n",
            resp.statusCode,
            uri.cStr()
        )
        return PkgStatus.ERROR_HTTP_STATUS
    }

    return PkgStatus.OK
}

func httpCallback(data: *void, size: usize, n: usize, userdata: *void) : usize {
    var file = userdata as (*File)
    if(!file) {
        return 0
    }

    if(file.writeBytes(data as (*const char), size * n) != FileStatus.Ok) {
        return 0
    }

    return size * n
}

func getRepoTemplate(pkgId: *PackageId) : *const char {
    if(!pkgId) {
        return null
    }

    var repo = pkgId.repo()

    if(repo.startsWith($"https://github.com")) {
        // Example: https://github.com/tonysparks/seventh/archive/refs/tags/v0.4.1-beta.zip
        return "%.*s/archive/refs/tags/%.*s.zip"
    }

    return null
}

// TODO: Should we support Unicode names???
func sanitizeFilename(filename: *const char, out: [MAX_PATH]char) : *char {
    if(!filename) {
        goto end;
    }

    var len = filename.length()
    len = MIN(len, MAX_PATH)

    var i = 0
    for(; i < len; i += 1) {
        var c = filename[i]
        if(!isalnum(c) &&
            c != '/' &&
            c != '.' &&
            c != '-') {
            c = '_'
        }
        out[i] = c
    }


end:
    out[i] = '\0'
    return out
}

func installPackage(
    pm: *PackageManager,
    pkgId: *PackageId,
    pkgFile: *const char,
    pkgsToInstall: *Array<PackageId>) : PkgStatus {

    var pkgPath:[MAX_PATH]char;
    FilePath(pkgFile, pkgPath)

    // unzip the pkg
    {
        var zip: ZipFile{}
        defer {
            zip.close()
            FileDelete(pkgFile)
        }

        if(zip.open(pkgFile, ZipOpen.READ, pm.allocator) != ZipStatus.OK) {
            return PkgStatus.ERROR_UNABLE_TO_OPEN_PKG_FILE
        }

        var extractedFiles = ArrayInit<*const char>(64, pm.allocator)
        defer {
            for(var i = 0; i < extractedFiles.size(); i+=1) {
                var file = extractedFiles.get(i)
                pm.allocator.free(file as (*void))
            }
            extractedFiles.free()
        }

        if(zip.unzip(pkgPath, &extractedFiles) != ZipStatus.OK) {
            return PkgStatus.ERROR_UNABLE_TO_EXTRACT_PKG_FILE
        }

        if(dealWithGithubBS(pkgPath, &extractedFiles) != PkgStatus.OK) {
            return PkgStatus.ERROR_UNABLE_TO_EXTRACT_PKG_FILE
        }
    }

    var pkg: *PackageDef;
    var status = readPackage(pm, pkgId, pkgPath, &pkg, pkgsToInstall)
    if(status != PkgStatus.OK) {
        return status
    }

    // Move any dynamic libraries if necessary to this
    // project bin directory
    {
        var temp1:[MAX_PATH]char;
        var libPath = StringBufferInit(temp1, MAX_PATH, 0)

        var temp2:[MAX_PATH]char;
        var destPath = StringBufferInit(temp2, MAX_PATH, 0)

        for(var i = 0; i < pkg.dynamicLibraries.size(); i+=1) {
            var lib = pkg.dynamicLibraries.get(i)
            libPath.format("%s/pkg/bin/%s", pkgPath, lib)

            if(!FileExists(libPath.cStr())) {
                pm.warnings.append("missing dynamic library: '%s'\n", libPath.cStr())
                continue;
            }

            destPath.format("%s/bin/%s", pm.options.projectPath, lib)
            if(!FileMove(libPath.cStr(), destPath.cStr())) {
                pm.warnings.append("unable to move dynamic library '%s' to '%s'\n",
                    libPath.cStr(), destPath.cStr())
            }
        }
    }


    // if at this point, everything went ok, we can mark this
    // package as installed..
    // TODO: should we invert this, create a lock file upon start, and
    // remove it once it's done?
    {
        var pkgLck = StringBufferInit(pkgPath, MAX_PATH)
        pkgLck.append("/%s", INSTALL_COMPLETED_FILE)

        var lockFile = File{}
        lockFile.open(pkgLck.cStr(), FileOpenOp.WRITE)
        lockFile.close()
    }

    return PkgStatus.OK
}

func readPackage(
    pm: *PackageManager,
    pkgId: *PackageId,
    pkgPath: *const char,
    resultPkg: **PackageDef,
    pkgsToInstall: *Array<PackageId>) : PkgStatus {

    var name = pkgId.name()
    var version = pkgId.version()

    var temp:[MAX_PATH]char;
    var pkgDef = StringBufferInit(temp, MAX_PATH, 0)
    pkgDef.format("%s/pkg/pkg.json", pkgPath)

    if(!FileExists(pkgDef.cStr())) {
        return PkgStatus.ERROR_UNABLE_TO_OPEN_PKG_FILE
    }

    // read the pkg.json and add the dependencies...

    if(ParsePackageFile(pm, pkgDef.cStr(), resultPkg) != PkgStatus.OK) {
        return PkgStatus.ERROR_PARSING_PKG_JSON;
    }

    var pkg: *PackageDef = (*resultPkg);
    var srcPath = StringBufferInit(pkg.path, MAX_PATH, 0)

    // TODO: Do we want packages to allow to define an alternative
    // folder for src/bin/lib directories, or should this be
    // standard's by conventions...
    srcPath.format("%s/pkg/src", pkgPath)
    srcPath.cStr()

    // Add this installed packages dependencies...
    if(!pkg.dependencies.empty()) {
        // TODO: Create a Set type in LitaC, for now
        // this will contain duplicates, which will be
        // caught in the "isPackageInstalled" function
        pkgsToInstall.addAll(pkg.dependencies)
    }

    return PkgStatus.OK
}

/**
    Github is inconsistent in how it packages
    releases in ther zip/gzip archives.  The containing
    folder name is not consistent from what I can tell.  So
    we need to do this BS --

    This will just move the contents of the parent zip folder
    to the supplied pkgPath.
*/
func dealWithGithubBS(
    pkgPath: *const char,
    extractedFiles: *Array<*const char>) : PkgStatus {

    // nothing was extracted...
    if(extractedFiles.size() < 1) {
        return PkgStatus.OK
    }


    var temp1:[MAX_PATH]char;
    var srcPath = StringBufferInit(temp1, MAX_PATH, 0)

    var temp2:[MAX_PATH]char;
    var destPath = StringBufferInit(temp2, MAX_PATH, 0)

    var root = extractedFiles.get(0)
    var rootLength = root.length()


    srcPath.format("%s/%s", pkgPath, root)
    destPath.format("%s/pkg", pkgPath)

    // should only happen for local packages...
    if(FileExists(destPath.cStr())) {
        return PkgStatus.OK
    }

    if(!FileMove(srcPath.cStr(), destPath.cStr())) {
        return PkgStatus.ERROR_UNABLE_TO_PROCESS_PKG_FILE
    }

    return PkgStatus.OK
}

/**
    TODO:
    This is pretty terrible, we shouldn't waste precious resources
    zipping up a local directory just to move it to the .pkgs directory.

    Clean this up!!!
*/
func zipLocalPackage(
    pm: *PackageManager,
    pkgId: *PackageId,
    pkgFile: *const char) : PkgStatus {

    var zip: ZipFile{}
    defer zip.close()

    if(zip.open(pkgFile, ZipOpen.WRITE, pm.allocator) != ZipStatus.OK) {
        return PkgStatus.ERROR_OPENING_LOCAL_FILE_PKG
    }

    const len = "file://".length()
    var basePath = pkgId.repo().substring(len)

    if(zip.zipDir(basePath.buffer, basePath.length, "pkg") != ZipStatus.OK) {
        return PkgStatus.ERROR_WRITING_LOCAL_FILE_PKG
    }

    if(zip.finalize() != ZipStatus.OK) {
        return PkgStatus.ERROR_FINALIZING_LOCAL_FILE_PKG
    }

    return PkgStatus.OK
}


@test
func testSanitizeFilename() {
    var temp: [MAX_PATH]char;
    var pkgDirectory = StringBufferInit(temp, MAX_PATH, 0);
    pkgDirectory.format("%s/%s/%s", "http://root", "name-complex", "1.0.3")

    sanitizeFilename(pkgDirectory.cStr(), pkgDirectory.cStr())

    // printf("Path: '%s'\n", pkgDirectory.cStr())
    assert(StringEqualLen(pkgDirectory.cStr(), "http_//root/name-complex/1.0.3", MAX_PATH))
}

/*
@test
func testDownloadPackage() {
    var pkg = PackageDef {}
    PackageIdFromString("https://github.com/tonysparks|seventh|v0.4.1-beta", &pkg.id)

    var pm = PackageManager {
        .options = PackageOptions {
            .pkgDir = "./.pkgs",
            .httpOptions = HttpOptions {
            }
        },
        .allocator = defaultAllocator,
        .pkg = &pkg,
    }

    var http = Http{}
    http.init(pm.options.httpOptions)
    defer http.free()

    var outputDir = "./__temp__/test/output.zip"

    var resultCode = downloadPackage(&pm, &http, &pkg.id, outputDir)
    printf("Result: %s\n", PkgStatusAsStr(resultCode))
}
*/