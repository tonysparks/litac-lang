import "pkg_mgr"
import "std/system"
import "std/string/buffer"
import "std/string/builder"
import "std/array"
import "std/json"
import "std/libc"
import "std/process" as sub

public func PackageRun(pm: *PackageManager, cmd: *const char) : PkgStatus {
    if(!pm.pkg) {
        return PkgStatus.OK
    }

    if(!pm.pkg.json) {
        return PkgStatus.OK
    }

    var commands = pm.pkg.json.get("commands")
    if(!commands) {
        return PkgStatus.ERROR_COMMAND_NOT_DEFINED
    }

    const BUFFER_SIZE = 16
    var buffer = [BUFFER_SIZE]char{0};
    var osStr = StringBufferInit(buffer, BUFFER_SIZE, 0)
    osStr.format("%s", OSAsStr(GetOS()))
    osStr.toLower()

    var cmdScript: *const char = null

    if(commands.contains(cmd)) {
        cmdScript = commands.getStr(cmd)
    }

    var osCommands = commands.get(osStr.cStr())
    if(osCommands && osCommands.contains(cmd)) {
        cmdScript = osCommands.getStr(cmd)
    }

    if(!cmdScript) {
        return PkgStatus.ERROR_COMMAND_NOT_DEFINED
    }

    var options = pm.options.litaOptions
    // var args = ArrayInit<*const char>(options.nargs + 2, pm.allocator)
    // args.add(cmdScript)

    // for(var i = 0; i < options.nargs; i+=1) {
    //     args.add(options.args[i])
    // }
    // args.add(null)

    // var process = sub::Process{}
    // if(process.create(
    //     args.elements,
    //     sub::ProcessOption.COMBINE_STDOUT_STDERR|
    //     sub::ProcessOption.INHERIT_IO|
    //     sub::ProcessOption.INHERIT_ENVIRONMENT
    // )) {
    //     return PkgStatus.ERROR_RUNNING_COMMAND
    // }

    // defer process.destroy()

    // var result = 0
    // process.join(&result)

    // if(result != 0) {
    //     return PkgStatus.ERROR_RUNNING_COMMAND
    // }

    var scriptStr = StringBuilderInit(1024, pm.allocator)
    scriptStr.append("%s", cmdScript)

    for(var i = 0; i < options.nargs; i+=1) {
        scriptStr.append(" \"%s\"", options.args[i])
    }

    var process = SystemExec(scriptStr.cStr())
    if(!process.pipe) {
        return PkgStatus.ERROR_RUNNING_COMMAND
    }
    defer process.close()

    var bytesRead = -1_i64
    while((bytesRead = process.readOutput(buffer, BUFFER_SIZE)) > 0) {
        fwrite(buffer, sizeof(:char), bytesRead as (i32), stdout)
        fflush(stdout)
    }

    return PkgStatus.OK
}