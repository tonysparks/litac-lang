import "std/string"
import "std/string_builder"
import "std/string_buffer"
import "std/array"
import "std/mem"
import "std/json"
import "std/map"
import "std/hash"
import "std/libc"
import "std/assert"
import "std/io"
import "std/system"

import "pkg_mgr/pkg_mgr"
import "pkg_mgr/pkg_install"

public const SEPARATOR = "|"
public const SEPARATOR_LENGTH = 1  /* we need better const support! */

public enum PackageType {
    EXECUTABLE,
    STATIC_LIBRARY,
    DYNAMIC_LIBRARY,
    SOURCE_LIBRARY,
}

public struct PackageDef {
    id: using PackageId

    // the physical path to this package when
    // it is installed
    path: [MAX_PATH]char

    type: PackageType
    dynamicLibraries: Array<*const char>
    dependencies: Array<PackageId>

    // The json representation
    // of this package.
    json: *JsonNode
}

public func (this: *PackageDef) free() {
    this.dependencies.free()
    for(var i = 0; i < this.dynamicLibraries.size(); i+=1) {
        var lib = this.dynamicLibraries.get(i)
        this.dynamicLibraries.alloc.free(lib as (*void))
    }
    this.dynamicLibraries.free()
    this.json.free()
}

public struct PackageId {
    id: [MAX_PATH]char

    repoOffset: i32
    repoLength: i32

    nameOffset: i32
    nameLength: i32

    versionOffset: i32
    versionLength: i32
}

public func (this: *PackageId) repo() : String {
    return StringInit(this.id + this.repoOffset, this.repoLength)
}

public func (this: *PackageId) name() : String {
    return StringInit(this.id + this.nameOffset, this.nameLength)
}

public func (this: *PackageId) version() : String {
    return StringInit(this.id + this.versionOffset, this.versionLength)
}

public func PackageIdFromString(id: *const char, pkgId: *PackageId) : bool {
    var view = StringInit(id)
    var nameIndex = view.indexOfAt(SEPARATOR, .len = SEPARATOR_LENGTH, .fromIndex = 0)
    if(nameIndex < 0) {
        goto invalid
    }
    var versionIndex = view.indexOfAt(SEPARATOR, .len = SEPARATOR_LENGTH, .fromIndex = nameIndex + 1)
    if(versionIndex < 0) {
        goto invalid
    }

    StringCopy(.src = id, .dest = pkgId.id, .size = MAX_PATH)
    pkgId.repoOffset = 0
    pkgId.repoLength = nameIndex

    pkgId.nameOffset = nameIndex + 1
    pkgId.nameLength = versionIndex - nameIndex - 1

    pkgId.versionOffset = versionIndex + 1
    pkgId.versionLength = view.length - versionIndex - 1

    return true

invalid:
    return false
}

public func ParsePackageFile(
        pm: *PackageManager,
        pkgFile: *const char,
        result: **PackageDef) : PkgStatus {

    var parser = JsonParser{}
    parser.init(pm.allocator)
    defer parser.free()

    var data: *char;
    var length: usize;

    defer pm.allocator.free(data)

    if(ReadFile(pkgFile, &data, &length, pm.allocator) != FileStatus.Ok) {
        return PkgStatus.ERROR_READING_PKG_FILE
    }

    var node = parser.parseJson(data)
    // We actually keep a reference of the json node on the PackageDef,
    // for easy data retrieval
    // defer if(node) node.free();

    if(parser.hasError()) {
        if(node) {
            node.free();
        }

        return PkgStatus.ERROR_PARSING_PKG_JSON;
    }

    var status = ParsePackage(pm, node, result)
    if(status != PkgStatus.OK) {
        if(node) {
            node.free();
        }
    }

    return status
}

public func ParsePackage(
        pm: *PackageManager,
        json: *JsonNode,
        result: **PackageDef) : PkgStatus {

    if(!json) {
        return PkgStatus.ERROR_READING_PKG_FILE
    }

    var pkgId = PackageId{};
    var code = ParsePackageId(json, &pkgId, pm.allocator)
    if(code != PkgStatus.OK) {
        return code
    }

    // if this is already in the registry, no need to further process
    if(pm.packages.contains(pkgId.id)) {
        *result = pm.packages.get(pkgId.id)
        return PkgStatus.OK
    }

    var pkg = new<PackageDef>(pm.allocator)
    memset(pkg, 0, sizeof(:PackageDef))

    pkg.id = pkgId
    pkg.json = json

    pm.packages.put(pkgId.id, pkg)

    var type = json.getStr("type", "source")
    /* TODO parse type */

    var deps = json.getArray("dependencies")
    if(deps && deps.size() > 0) {
        pkg.dependencies.init(deps.size(), pm.allocator)

        for(var i = 0; i < deps.size(); i+=1) {
            var depNode = deps.at(i)

            pkg.dependencies.add(PackageId{})
            var pkgId = pkg.dependencies.getPtr(i)

            var code = ParsePackageId(depNode, pkgId, pm.allocator)
            if(code != PkgStatus.OK) {
                return code
            }
        }
    }

    var dyLibs = json.getArray("dynamic_libraries")
    if(dyLibs && dyLibs.size() > 0) {
        pkg.dynamicLibraries.init(dyLibs.size(), pm.allocator)

        for(var i = 0; i < dyLibs.size(); i+=1) {
            var dyLibNode = dyLibs.at(i)
            if(dyLibNode && dyLibNode.isString()) {
                var path = StringBuilderInit(MAX_PATH, pm.allocator)
                path.append("%s", dyLibNode.asString())
                pkg.dynamicLibraries.add(path.cStr())
            }
        }
    }

    (*result) = pkg

    return PkgStatus.OK
}


public func ParsePackageId(
        json: *JsonNode,
        pkgId: *PackageId,
        allocator: *const Allocator = defaultAllocator) : PkgStatus {

    if(!json) {
        return PkgStatus.ERROR_PARSING_PKG_JSON
    }

    var repo = json.getStr("repo")
    if(!repo) return PkgStatus.ERROR_PARSING_PKG_JSON

    var name = json.getStr("name")
    if(!name) return PkgStatus.ERROR_PARSING_PKG_JSON

    var version = json.getStr("version")
    if(!version) return PkgStatus.ERROR_PARSING_PKG_JSON

    var repoLen = strlen(repo)
    var nameLen = strlen(name)
    var versionLen = strlen(version)

    var sb = StringBuilderInit(repoLen + nameLen + versionLen + (SEPARATOR_LENGTH*2)+1, allocator)
    defer sb.free()

    sb.append("%s%s%s%s%s", repo, SEPARATOR, name, SEPARATOR, version)

    var id = sb.cStr();
    PackageIdFromString(sb.cStr(), pkgId)

    return PkgStatus.OK
}


/* ------------------------------------------------------
    Tests
---------------------------------------------------------*/

@test
func testParsePackage() {
    var parser = JsonParser{}
    parser.init()
    defer parser.free()

    var data =
    """
    {
        "repo" : "https://github.com/tonysparks",
        "name" : "litac-lang",
        "version" : "0.1.2-alpha",
        "type": "executable",
        "dependencies": [
        ],
        "dynamic_libraries": [
            "a",
            "b"
        ]
    }
    """;

    //"

    var node = parser.parseJson(data)
    defer if(node) node.free()

    if(parser.hasError()) {
        printf("Error parsing JSON\n")
        return;
    }

    var pm = PackageManager {}
    pm.init(PackageSyncOptions{})
    defer pm.free()

    var pkg: *PackageDef;
    if(ParsePackage(&pm, node, &pkg) != PkgStatus.OK) {
        printf("Error parsing Package\n")
        return;
    }

    var repo = pkg.id.repo()
    var name = pkg.id.name()
    var version = pkg.id.version()

/*
    printf("Id: %s\n", pkg.id.id)
    printf("Repo: %.*s\n", repo.length, repo.buffer)
    printf("Name: %.*s\n", name.length, name.buffer)
    printf("Version: %.*s\n", version.length, version.buffer)
*/

    assert(strcmp(pkg.id.id, "https://github.com/tonysparks|litac-lang|0.1.2-alpha") == 0)
    assert(repo.equals("https://github.com/tonysparks"))
    assert(name.equals("litac-lang"))
    assert(version.equals("0.1.2-alpha"))
    assert(pkg.dependencies.size() == 0)
    assert(pkg.dynamicLibraries.size() == 2)
    assert(strcmp(pkg.dynamicLibraries.get(0), "a") == 0)
    assert(strcmp(pkg.dynamicLibraries.get(1), "b") == 0)
}


@test
func testPackageFromString() {
    var pkgId = PackageId{}
    PackageIdFromString("repo|name|version", &pkgId)

    var repo = pkgId.repo()
    var name = pkgId.name()
    var version = pkgId.version()
    /*
    printf("%.*s\n", repo.length, repo.buffer)
    printf("%.*s\n", name.length, name.buffer)
    printf("%.*s\n", version.length, version.buffer)
    */
    assert(repo.equals("repo"))
    assert(name.equals("name"))
    assert(version.equals("version"))
}