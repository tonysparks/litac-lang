import "std/libc"
import "std/mem"
import "std/string_builder"

public enum LogLevel {
    TRACE,
    INFO,
    DEBUG,
    ERROR,
    FATAL
}

var outputFile: *FILE = null

public func Log(level: LogLevel, format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(level, format, args)
    va_end(args)
}

public func Logv(level: LogLevel, format: *const char, args: va_list) {
    if(!outputFile) {
        // Toggle for LSP debugging purposes - should we enable this via
        // command line?
        outputFile = fopen("./litac.log", "w")

        if(!outputFile) {
            outputFile = stdout
        }
    }

    if(level > LogLevel.DEBUG) {
        vfprintf(stderr, format, args);
        fflush(stderr)
    }
    else {
        vfprintf(outputFile, format, args);
        fflush(outputFile)
    }

    if(level == LogLevel.FATAL) {
        exit(2);
    }
}

public func Info(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.INFO, format, args)
    va_end(args)
}

public func Debug(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.DEBUG, format, args)
    va_end(args)
}

public func Error(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.ERROR, format, args)
    va_end(args)
}

public func Panic(format: *const char, ...) {
    var args: va_list;
    va_start(args, format);
    Logv(LogLevel.FATAL, format, args)
    va_end(args)
}


public func EscapeName(name: *const char, len: i32, sb: *StringBuilder) : *char {
    sb.appendStrn(name, len)
    for(var i = 0; i < sb.length;) {
        var c = sb.buffer[i]

        switch(c) {
            case '*': sb.replace(i, i+1, "_ptr_"); i+=5; break;
            case '<': sb.replace(i, i+1, "_cb_");  i+=4; break;
            case '>': sb.replace(i, i+1, "_ce_");  i+=4; break;
            case '[': sb.replace(i, i+1, "_bb_");  i+=4; break;
            case ']': sb.replace(i, i+1, "_be_");  i+=4; break;
            case '(': sb.replace(i, i+1, "_pb_");  i+=4; break;
            case ')': sb.replace(i, i+1, "_pe_");  i+=4; break;
            case ',': sb.replace(i, i+1, "_c_");   i+=3; break;
            case ' ': sb.replace(i, i+1, "_");     i+=1; break;
            case '-': sb.replace(i, i+1, "_m_");   i+=3; break;
            case ':': {
                var n = i + 1;
                if(n < sb.length) {
                    var nc = sb.buffer[n]
                    if(nc == ':') {
                        sb.replace(i, i+2, "__")
                        i+=2;
                        break;
                    }
                }
                sb.replace(i, i+1, "_r_")
                i+=3;
                break;
            }
            default: {
                i+=1;
                break;
            }
        }
    }

    return sb.cStr()
}
