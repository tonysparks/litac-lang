
import "std/libc"
import "std/array"

import "ast"
import "lex"
import "common"

public func PrintTypeSpec(spec: *TypeSpec) {
    if(spec == null) {
        return;
    }

    switch(spec.kind) {
        case TypeSpecKind.NONE: {
            return;
        }
        case TypeSpecKind.ARRAY: {
            var array = spec
            printf("[");
            if(array.numElements) {
                PrintStmt(array.numElements)
            }
            printf("]");
            PrintTypeSpec(array.base)
            return;
        }
        case TypeSpecKind.PTR: {
            var ptr = spec
            printf("*");
            PrintTypeSpec(ptr.base)
            return;
        }
        case TypeSpecKind.CONST: {
            var c = spec
            printf("const ");
            PrintTypeSpec(c.base)
            return;
        }
        case TypeSpecKind.NAME: {
            var name = spec
            printf("%.*s", name.name.length, name.name.buffer)
            if(!name.genericArgs.empty()) {
                printf("<")
                for(var i = 0; i < name.genericArgs.size(); i += 1) {
                    if(i > 0) printf(",")
                    PrintTypeSpec(name.genericArgs.get(i))
                }
                printf(">")
            }
            return;
        }
        case TypeSpecKind.FUNC_PTR: {
            var fn = spec
            printf("func")
            if(!fn.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < fn.genericParams.size(); i += 1) {
                    if(i > 0) {
                        printf(",")
                    }
                    PrintName(fn.genericParams.get(i).name.token)
                }
                printf(">")
            }
            printf("(")
            for(var i = 0; i < fn.args.size(); i += 1) {
                if(i > 0) printf(",")
                PrintTypeSpec(fn.args.get(i))
            }
            printf(") : ")
            PrintTypeSpec(fn.ret)
            return;
        }
        default: {
            Panic("Invalid TypeSpecKind: '%d'\n", spec.kind)
        }
    }
}

public func PrintName(tok: Token) {
    if(tok.type != TokenType.ERROR) {
        printf("%.*s", tok.value.str.length, tok.value.str.buffer)
    }
}

func Printf(indent: i32, format: *const char, ...) {
    for(var i = 0; i < indent; i += 1) {
        printf("    ");
    }

    var args: va_list;
    va_start(args, format);
    vprintf(format, args)
    va_end(args)
}

public func PrintStmt(s: *Stmt, indent: i32 = 0) {
    if(!s) return;

    switch(s.kind) {
        case StmtKind.IMPORT_DECL: {
            var decl = s as (*ImportDecl)
            Printf(0, "import '")
            PrintName(decl.name.token)
            printf("'")
            if(decl.alias.token.type == TokenType.IDENTIFIER) {
                Printf(0, " as ")
                PrintName(decl.alias.token)
            }
            return;
        }
        case StmtKind.CONST_DECL:
        case StmtKind.VAR_DECL: {
            var decl = s as (*VarDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            if(decl.kind == StmtKind.CONST_DECL) {
                Printf(indent, "const ")
            }
            else {
                Printf(indent, "var ")
            }
            PrintName(decl.name.token)
            if(decl.typeSpec != null) {
                printf(": ")
                PrintTypeSpec(decl.typeSpec)
            }
            if(decl.expr != null) {
                printf(" = ")
                PrintStmt(decl.expr)
            }
            printf(";")
            return;
        }
        case StmtKind.STRUCT_DECL: {
            var decl = s as (*AggregateDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            Printf(indent, "")
            if(decl.attributes.isPublic) {
                printf("public ")
            }
            printf("struct ")
            PrintName(decl.name.token)
            if(!decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) Printf(indent, ",")
                    var t = decl.genericParams.get(i).name
                    printf("%.*s", t.str.length, t.str.buffer)
                }
                printf(">")
            }
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                switch(field.kind) {
                    case StmtKind.ENUM_FIELD_DECL: {
                        PrintStmt(field.enumField as (*Stmt), indent+1)
                        break;
                    }
                    case StmtKind.STRUCT_FIELD_DECL:
                    case StmtKind.UNION_FIELD_DECL: {
                        PrintStmt(field.aggregateField as (*Stmt), indent+1)
                        break;
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        PrintStmt(field.varField, indent+1)
                        break;
                    }
                    case StmtKind.TRAIT_FIELD_DECL: {
                        PrintStmt(field.traitField, indent+1)
                        break;
                    }
                    default:{}
                }
                printf("\n")
            }
            Printf(indent, "}")
            return;
        }
        case StmtKind.UNION_DECL: {
            var decl = s as (*AggregateDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            Printf(indent, "")
            if(decl.attributes.isPublic) {
                printf("public ")
            }
            printf("union ")
            PrintName(decl.name.token)
            if(!decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) Printf(indent, ",")
                    var t = decl.genericParams.get(i).name
                    printf("%.*s", t.str.length, t.str.buffer)
                }
                printf(">")
            }
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                switch(field.kind) {
                    case StmtKind.ENUM_FIELD_DECL: {
                        PrintStmt(field.enumField as (*Stmt), indent+1)
                        break;
                    }
                    case StmtKind.STRUCT_FIELD_DECL:
                    case StmtKind.UNION_FIELD_DECL: {
                        PrintStmt(field.aggregateField as (*Stmt), indent+1)
                        break;
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        PrintStmt(field.varField, indent+1)
                        break;
                    }
                    case StmtKind.TRAIT_FIELD_DECL: {
                        PrintStmt(field.traitField, indent+1)
                        break;
                    }
                    default:{}
                }
                printf("\n")
            }
            Printf(indent, "}")
            return;
        }
        case StmtKind.TRAIT_DECL: {
            var decl = s as (*AggregateDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            Printf(indent, "")
            if(decl.attributes.isPublic) {
                printf("public ")
            }
            printf("trait ")
            PrintName(decl.name.token)
            if(!decl.genericParams.empty()) {
                printf("<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) Printf(indent, ",")
                    var t = decl.genericParams.get(i).name
                    printf("%.*s", t.str.length, t.str.buffer)
                }
                printf(">")
            }
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                switch(field.kind) {
                    case StmtKind.TRAIT_FIELD_DECL: {
                        PrintStmt(field.traitField as (*Stmt), indent+1)
                        break;
                    }
                    default:{}
                }
                printf("\n")
            }
            Printf(indent, "}")
            return;
        }
        case StmtKind.ENUM_DECL: {
            var decl = s as (*EnumDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            Printf(indent, "")
            if(decl.attributes.isPublic) {
                printf("public ")
            }
            printf("enum ")
            PrintName(decl.name.token)
            printf(" {\n")
            for(var i = 0; i < decl.fields.size(); i+=1) {
                var field = decl.fields.get(i)
                PrintStmt(field, indent+1)
                printf(",\n")
            }
            Printf(indent, "}")
            return;
        }
        case StmtKind.FUNC_DECL: {
            var decl = s as (*FuncDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            if(decl.attributes.isPublic) {
                Printf(indent, "public ")
            }
            Printf(indent, "func ")
            PrintName(decl.name.token)
            if(!decl.genericParams.empty()) {
                Printf(indent, "<")
                for(var i = 0; i < decl.genericParams.size(); i += 1) {
                    if(i > 0) Printf(indent, ",")
                    var t = decl.genericParams.get(i).name
                    Printf(indent, "%.*s", t.str.length, t.str.buffer)
                }
                Printf(indent, ">")
            }
            Printf(indent, "(")
            if(decl.params) {
                PrintStmt(decl.params)
            }
            Printf(indent, ")")
            if(decl.returnType) {
                Printf(indent, " : ")
                PrintTypeSpec(decl.returnType)
            }
            if(decl.body) {
                printf("\n")
                //Printf(indent, " {\n")
                PrintStmt(decl.body, indent)
                //Printf(indent, "}")
            }
            return;
        }
        case StmtKind.TYPEDEF_DECL: {
            var decl = s as (*TypedefDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            if(decl.attributes.isPublic) {
                Printf(indent, "public ")
            }
            Printf(indent, "typedef ")
            PrintTypeSpec(decl.type)
            printf(" as ")
            PrintName(decl.name.token)
            return;
        }
        case StmtKind.PARAM_DECL: {
            var decl = s as (*ParameterDecl)
            if(!decl.attributes.notes.empty()) {
                for(var i = 0; i < decl.attributes.notes.size(); i += 1) {
                    PrintStmt(decl.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }

            PrintName(decl.name.token)
            Printf(indent, ": ")
            PrintTypeSpec(decl.type)
            if(decl.defaultExpr) {
                Printf(indent, " = ")
                PrintStmt(decl.defaultExpr)
            }
            return;
        }
        /*
        case StmtKind.NATIVE_DECL: {
            // var decl = new<NativeDecl>(allocator)
            // decl.kind = StmtKind.NATIVE_DECL;
            // decl.startPos = startPos
            // decl.type = null
            // return decl as (*Stmt)
            return;
        }*/
        case StmtKind.POISON_DECL: {
            Printf(indent, "<poison_decl>")
            return;
        }

        case StmtKind.BLOCK_STMT: {
            var stmt = s as (*BlockStmt)
            Printf(indent-1, "{\n")
            for(var i = 0; i < stmt.stmts.size(); i += 1) {
                var n = stmt.stmts.get(i)
                PrintStmt(n, indent+1)
                if(IsExpr(n)) {
                    printf(";\n")
                }
                else {
                    printf("\n")
                }
            }
            printf("\n")
            Printf(indent-1, "}")
            return;
        }
        case StmtKind.BREAK_STMT: {
            Printf(indent, "break")
            return;
        }/*
        case StmtKind.COMP_STMT: {
            // var stmt = new<CompStmt>(allocator)
            // stmt.kind = StmtKind.COMP_STMT;
            // stmt.startPos = startPos
            // stmt.type = null
            // stmt.expr = null
            // stmt.body.init(16, allocator)
            // stmt.end = null
            // stmt.evaluatedStmt = null
            // return stmt as (*Stmt)
        }*/
        case StmtKind.CONTINUE_STMT: {
            Printf(indent, "continue")
            return;
        }
        case StmtKind.DEFER_STMT: {
            var stmt = s as (*DeferStmt)
            Printf(indent, "defer ")
            PrintStmt(stmt.deferedStmt, indent)
            return;
        }
        case StmtKind.DO_WHILE_STMT: {
            var stmt = s as (*DoWhileStmt)
            Printf(indent, "do\n")
            PrintStmt(stmt.body, indent+1)
            Printf(indent, "\nwhile(")
            PrintStmt(stmt.cond, 0)
            Printf(0, ")")
            return;
        }
        case StmtKind.EMPTY_STMT: {
            printf("\n")
            return;
        }
        case StmtKind.ENUM_FIELD_ENTRY_DECL: {
            var stmt = s as (*EnumFieldEntryDecl)
            Printf(indent, "")
            PrintName(stmt.name.token)
            if(stmt.value) {
                printf(" = ")
                PrintStmt(stmt.value, 0)
            }
            return;
        }/*
        case StmtKind.ENUM_FIELD_STMT: {
            var stmt = s as (*EnumDecl)
            PrintStmt(stmt)
            return;

        }*/
        case StmtKind.FOR_STMT: {
            var stmt = s as (*ForStmt)
            Printf(indent, "for(")
            if(stmt.init) {
                PrintStmt(stmt.init, 0)
            }
            printf(";")
            if(stmt.cond) {
                PrintStmt(stmt.cond, 0)
            }
            printf(";")
            if(stmt.post) {
                PrintStmt(stmt.post, 0)
            }
            printf(")\n")
            if(stmt.body) {
                PrintStmt(stmt.body, indent+1)
            }
            return;
        }
        case StmtKind.FUNC_BODY_STMT: {
            var stmt = s as (*FuncBodyStmt)
            Printf(indent-1, "{\n")
            for(var i = 0; i < stmt.stmts.size(); i += 1) {
                var n = stmt.stmts.get(i)
                PrintStmt(n, indent+1)
                if(IsExpr(n)) {
                    printf(";\n")
                }
                else {
                    printf("\n")
                }
            }
            printf("\n")
            Printf(indent-1, "}")
            return;
        }
        case StmtKind.GOTO_STMT: {
            var stmt = s as (*GotoStmt)
            Printf(indent, "goto ")
            PrintName(stmt.label.token)
            return;
        }
        case StmtKind.IF_STMT: {
            var stmt = s as (*IfStmt)
            Printf(indent, "if(")
            PrintStmt(stmt.cond, 0)
            printf(") \n")
            PrintStmt(stmt.then, indent+1)
            printf("\n")
            if(stmt.elseStmt) {

                Printf(indent, "else \n")
                PrintStmt(stmt.elseStmt, indent+1)
            }
            printf("\n")
            return;
        }
        case StmtKind.LABEL_STMT: {
            var stmt = s as (*LabelStmt)
            printf(":")
            PrintName(stmt.label.token)
            return;
        }
        case StmtKind.MODULE_STMT: {
            var stmt = s as (*ModuleStmt)
            for(var i = 0; i < stmt.imports.size(); i += 1) {
                PrintStmt(stmt.imports.get(i) as (*Stmt))
                Printf(indent, "\n")
            }

            printf("\n")

            for(var i = 0; i < stmt.notes.size(); i += 1) {
                PrintStmt(stmt.notes.get(i))
                Printf(indent, ";\n")
            }

            printf("\n")

            for(var i = 0; i < stmt.declarations.size(); i += 1) {
                PrintStmt(stmt.declarations.get(i) as (*Stmt))
                Printf(indent, "\n")
                printf("\n")
            }

            printf("\n")
            return;
        }
        case StmtKind.NOTE_STMT: {
            var stmt = s as (*NoteStmt)
            Printf(indent, "@")
            PrintTypeSpec(stmt.type)
            if(!stmt.arguments.empty()) {
                printf("(")
                for(var i = 0; i < stmt.arguments.size(); i += 1) {
                    if(i > 0) printf(", ")
                    printf("'")
                    // TODO
                    // PrintStmt(stmt.arguments.get(i))
                    printf("'")
                }
                printf(")")
            }
            return;
        }
        case StmtKind.PARAMETERS_STMT: {
            var stmt = s as (*ParametersStmt)
            for(var i = 0; i < stmt.params.size(); i += 1) {
                if(i>0) printf(", ")
                PrintStmt(stmt.params.get(i) as (*Stmt), 0)
            }
            return;
        }
        case StmtKind.RETURN_STMT: {
            var stmt = s as (*ReturnStmt)
            Printf(indent, "return");
            if(stmt.expr) {
                printf(" ")
                PrintStmt(stmt.expr, 0)
            }
            return;
        }/*
        case StmtKind.STRUCT_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.STRUCT_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_CASE_STMT: {
            var stmt = new<SwitchCaseStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_CASE_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.body = null
            return stmt as (*Stmt)
        }
        case StmtKind.SWITCH_STMT: {
            var stmt = new<SwitchStmt>(allocator)
            stmt.kind = StmtKind.SWITCH_STMT;
            stmt.startPos = startPos
            stmt.cond = null
            stmt.stmts.init(16, allocator)
            stmt.defaultStmt = null
            return stmt as (*Stmt)
        }
        case StmtKind.UNION_FIELD_STMT: {
            var stmt = new<AggregateFieldStmt>(allocator)
            stmt.kind = StmtKind.UNION_FIELD_STMT;
            stmt.startPos = startPos
            stmt.decl = null
            return stmt as (*Stmt)
        }*/
        case StmtKind.TRAIT_FIELD_DECL: {
            var stmt = s as (*TraitFieldDecl)
            if(!stmt.attributes.notes.empty()) {
                for(var i = 0; i < stmt.attributes.notes.size(); i += 1) {
                    PrintStmt(stmt.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }
            Printf(indent, "")
            PrintName(stmt.name.token)
            printf(": ")
            PrintTypeSpec(stmt.type)
            return;
        }
        case StmtKind.VAR_FIELD_DECL: {
            var stmt = s as (*VarFieldDecl)
            if(!stmt.attributes.notes.empty()) {
                for(var i = 0; i < stmt.attributes.notes.size(); i += 1) {
                    PrintStmt(stmt.attributes.notes.get(i), indent)
                    printf("\n")
                }
            }
            Printf(indent, "")
            PrintName(stmt.name.token)
            printf(": ")
            PrintTypeSpec(stmt.type)
            return;
        }
        case StmtKind.WHILE_STMT: {
            var stmt = s as (*WhileStmt)
            Printf(indent, "while(")
            PrintStmt(stmt.cond, 0)
            Printf(0, ")\n")
            PrintStmt(stmt.body, indent)
            return;
        }

        case StmtKind.ARRAY_DESIGNATION_EXPR: {
            var expr = s as (*ArrayDesignationExpr)
            Printf(indent, "[")
            PrintStmt(expr.index, 0)
            Printf(0, "] = ")
            PrintStmt(expr.value, 0)
            return;
        }
        case StmtKind.ARRAY_INIT_EXPR: {
            var expr = s as (*ArrayInitExpr)
            Printf(indent, "[]")
            PrintTypeSpec(expr.type)
            Printf(0, "{\n")
            for(var i = 0; i < expr.values.size(); i+=1) {
                var v = expr.values.get(i)
                if(i > 0) Printf(0, ",\n")
                PrintStmt(v, indent+1)
            }
            Printf(indent, "}\n")
            return;
        }
        case StmtKind.BINARY_EXPR: {
            var expr = s as (*BinaryExpr)
            PrintStmt(expr.left, indent)
            printf(" %s ", tokenText[expr.operator])
            PrintStmt(expr.right, 0)
            break;
        }
        case StmtKind.BOOLEAN_EXPR: {
            var expr = s as (*BooleanExpr)
            Printf(indent, "%s", expr.boolean ? "true" : "false")
            return;
        }/*
        case StmtKind.CAST_EXPR: {
            var expr = new<CastExpr>(allocator)
            expr.kind = StmtKind.CAST_EXPR;
            expr.startPos = startPos
            expr.castTo = null
            expr.exprToCast = null
            return expr as (*Stmt)
        }*/
        case StmtKind.CHAR_EXPR: {
            var expr = s as (*CharExpr)
            Printf(indent, "'%c'", expr.character.intValue as (char))
            return;
        }/*
        case StmtKind.FUNC_CALL_EXPR: {
            var expr = new<FuncCallExpr>(allocator)
            expr.kind = StmtKind.FUNC_CALL_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.arguments.init(16, allocator)
            return expr as (*Stmt)
        }
        case StmtKind.FUNC_IDENTIFIER_EXPR: {
            var expr = new<IdentifierExpr>(allocator)
            expr.kind = StmtKind.FUNC_IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym///
            return expr as (*Stmt)
        }*/
        case StmtKind.GET_EXPR: {
            var expr = s as (*GetExpr)
            PrintStmt(expr.object, indent)
            printf(".")
            PrintStmt(expr.field)
            return;
        }
        case StmtKind.GROUP_EXPR: {
            var expr = s as (*GroupExpr)
            Printf(indent, "(")
            PrintStmt(expr.groupedExpr, 0)
            Printf(0, ")")
            return;
        }
        case StmtKind.IDENTIFIER_EXPR: {
            var expr = s as (*IdentifierExpr)
            Printf(indent, "%.*s", expr.type.name.length, expr.type.name.buffer)
            return;
        }/*
        case StmtKind.INIT_ARG_EXPR: {
            var expr = new<InitArgExpr>(allocator)
            expr.kind = StmtKind.INIT_ARG_EXPR;
            expr.startPos = startPos
            expr.fieldName = null
            expr.argPosition = 0
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.INIT_EXPR: {
            var expr = new<InitExpr>(allocator)
            expr.kind = StmtKind.INIT_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            expr.arguments.init(8, allocator)
            return expr as (*Stmt)
        }*/
        case StmtKind.NULL_EXPR: {
            printf("null")
            return;
        }
        case StmtKind.NUMBER_EXPR: {
            var expr = s as (*NumberExpr)
            switch(expr.number.type) {
                case TokenType.INT_NUMBER: {
                    Printf(indent, "%llu", expr.number.value.intValue)
                    break;
                }
                case TokenType.FLOAT_NUMBER: {
                    Printf(indent, "%f", expr.number.value.floatValue)
                    break;
                }
                default: {}
            }
            return;
        }/*
        case StmtKind.OFFSET_OF_EXPR: {
            var expr = new<OffsetOfExpr>(allocator)
            expr.kind = StmtKind.OFFSET_OF_EXPR;
            expr.startPos = startPos
            expr.type = null
            expr.field = null
            return expr as (*Stmt)
        }
        case StmtKind.SET_EXPR: {
            var expr = new<SetExpr>(allocator)
            expr.kind = StmtKind.SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.field = null
            expr.value = null
            return expr as (*Stmt)
        }
        case StmtKind.SIZE_OF_EXPR: {
            var expr = new<SizeOfExpr>(allocator)
            expr.kind = StmtKind.SIZE_OF_EXPR;
            expr.startPos = startPos
            expr.sizeOfExpr = null
            return expr as (*Stmt)
        }*/
        case StmtKind.STRING_EXPR: {
            var expr = s as (*StringExpr)
            Printf(indent, "\"%.*s\"", expr.string.str.length, expr.string.str.buffer)
            return;
        }/*
        case StmtKind.SUBSCRIPT_GET_EXPR: {
            var expr = new<SubscriptGetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_GET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            return expr as (*Stmt);
        }
        case StmtKind.SUBSCRIPT_SET_EXPR: {
            var expr = new<SubscriptSetExpr>(allocator)
            expr.kind = StmtKind.SUBSCRIPT_SET_EXPR;
            expr.startPos = startPos
            expr.object = null
            expr.index = null
            expr.value = null
            return expr as (*Stmt);
        }*/
        case StmtKind.TERNARY_EXPR: {
            var expr = s as (*TernaryExpr)
            Printf(indent, "(")
            PrintStmt(expr.cond)
            printf(") ? ")
            PrintStmt(expr.then)
            printf(" : ")
            PrintStmt(expr.other)
            return;
        }/*
        case StmtKind.TYPE_IDENTIFIER_EXPR: {
            var expr = new<TypeIdentifierExpr>(allocator)
            expr.kind = StmtKind.TYPE_IDENTIFIER_EXPR;
            expr.startPos = startPos
            expr.genericArgs.init(2, allocator)
            expr.type = null
            //expr.sym//
            return expr as (*Stmt);
        }
        case StmtKind.TYPE_OF_EXPR: {
            var expr = new<TypeOfExpr>(allocator)
            expr.kind = StmtKind.TYPE_OF_EXPR;
            expr.startPos = startPos
            expr.typeOfExpr = null
            expr.type = null
            return expr as (*Stmt);
        }
        case StmtKind.UNARY_EXPR: {
            var expr = new<UnaryExpr>(allocator)
            expr.kind = StmtKind.UNARY_EXPR;
            expr.startPos = startPos
            expr.unaryExpr = null
            return expr as (*Stmt);
        }*/
        case StmtKind.POISON_EXPR: {
            Printf(indent, "<poison_expr>")
            return;
        }
        default: {
            //Panic("Unknown statement kind: %d", s.kind)
            Printf(indent, "<%s:%d Not Implemented>", StmtKindAsStr(s.kind), s.kind)
            return;
        }
    }
}