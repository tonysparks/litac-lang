import "std/array"
import "std/map"
import "std/string"
import "std/string_view"
import "std/string_buffer"
import "std/system"
import "std/libc"
import "std/mem"
import "std/mem/arena_allocator"

import "phase_result"
import "symbols"
import "lita"
import "types"
import "ast"
import "ast_new"
import "lex"
import "intern"
import "common"

public enum ModuleFlags {
    TYPE_CHECKED  = (1<<0),
    TYPE_RESOLVED = (1<<1),
    TYPE_IMPORTED = (1<<2),

    INCREMENTAL_COMPILATION = (1<<3),
}

public struct ModuleId {
    filename: [MAX_PATH]char      // full path the file of this module

    filenameKey: [MAX_PATH]char   // full path the file of this module, normalized to a 'key', not
                                  // to be used for file retrieval operations

    packageName: InternedString   // relative path from the main module's directory
    name: InternedString          // the name of the module
}

public struct ModuleImport {
    module: *Module
    alias: *InternedString
    isUsing: bool
}

public struct Module {
    id: ModuleId        // TODO: don't make a separate allocation
    text: String        // text of modules file
    ast: *ModuleStmt
    symbols: Scope
    currentScope: *Scope
    genericSymbols: *Map<InternedString, *Symbol>
    flags: i32

    importedBy: Map<*const char, ModuleImport> // modules that import this module

    typeSpecAllocator: TypeSpecAllocator
    arena: ArenaAllocator
    allocator: *const Allocator
    lita: *Lita
}

public const BUILTIN_IMPORT_IDENT = Identifier {
}

public const BUILTIN_IMPORT_TOKEN = Token {
    .type = TokenType.STRING,
    .value = Value {
        .str = StringView {
            .buffer = "builtin",
            .length = 7
        }
    }
}
public const builtins = Module{}
public func BuiltinsInit(lita: *Lita) : *Module {
    BUILTIN_IMPORT_IDENT.str = BUILTIN
    BUILTIN_IMPORT_IDENT.token = BUILTIN_IMPORT_TOKEN

    builtins.text = String{}
    builtins.ast = null
    builtins.flags = 0
    builtins.allocator = lita.allocator
    builtins.importedBy = StrMap<ModuleImport>(ModuleImport{}, 512, lita.allocator)
    builtins.symbols.init(ScopeKind.MODULE, null, lita.result, &builtins, lita.allocator)
    builtins.genericSymbols = &lita.genericSymbols
    builtins.lita = lita
    builtins.typeSpecAllocator.init(lita.allocator)

    var filename: [MAX_PATH]char;
    var pathStr = StringInit(filename, MAX_PATH, 0);
    pathStr.format("%s/stdlib/std/builtins.lita", lita.options.litaPath)
    builtins.id.fromFile(lita, StringViewInit("std/builtins"), pathStr.cStr())

    AddBuiltin(lita, &BOOL_TYPE)
    AddBuiltin(lita, &CHAR_TYPE)
    AddBuiltin(lita, &I8_TYPE)
    AddBuiltin(lita, &U8_TYPE)
    AddBuiltin(lita, &I16_TYPE)
    AddBuiltin(lita, &U16_TYPE)
    AddBuiltin(lita, &I32_TYPE)
    AddBuiltin(lita, &U32_TYPE)
    AddBuiltin(lita, &I64_TYPE)
    AddBuiltin(lita, &U64_TYPE)
    AddBuiltin(lita, &F32_TYPE)
    AddBuiltin(lita, &F64_TYPE)
    AddBuiltin(lita, &USIZE_TYPE)
    AddBuiltin(lita, &NULL_TYPE)
    AddBuiltin(lita, &VOID_TYPE)

    return &builtins
}

func AddBuiltin(lita: *Lita, type: *TypeInfo) {
    var sym = builtins.symbols.addSymbol(type.name,
                                        &builtins,
                                        NewBuiltinDecl(SrcPos{}, SrcPos{}, type, lita.allocator),
                                        SymbolFlags.IS_BUILTIN|SymbolFlags.IS_TYPE|SymbolFlags.IS_FOREIGN)

    sym.state = SymbolState.RESOLVED
    sym.type = type
    type.sym = sym
}

public func GetBuiltinSymbol(typeid: Typeid) : *Symbol {
    if(typeid >= TypeKind.MAX_TYPE_KINDS) {
        return null
    }

    var typeInfo = BUILTIN_TYPES[typeid]
    if(!typeInfo) {
        return null
    }

    return typeInfo.sym
}

public func NewModule(lita: *Lita,
                      packageName: StringView,
                      filename: *const char) : *Module {

    var mod = new<Module>(lita.allocator)
    mod.init(lita)
    mod.id.fromFile(lita, packageName, filename)
    return mod
}

public func (this: *Module) init(lita: *Lita) {
    this.text = String{}
    this.ast = null

    // TODO: Figure out optimal arena size and allocator to pass in
    // TODO: Move to Array of Ast, Symbols
    this.arena.init(1024 * KiB, lita.allocator)
    this.allocator = &this.arena.allocator
    //this.allocator = lita.allocator
    this.typeSpecAllocator.init(this.allocator)

    // We want these to be owned by the global allocator
    this.importedBy = StrMap<ModuleImport>(ModuleImport{}, 64, lita.allocator)
    this.symbols.init(ScopeKind.MODULE, &builtins.symbols, &lita.result, this, lita.allocator)

    this.flags = 0
    this.currentScope = &this.symbols
    this.genericSymbols = &lita.genericSymbols
    this.lita = lita
}

public func (this: *Module) initIncrementalBuild() {
    this.text = String{}
    this.ast = null
    this.flags = 0
    this.flags |= ModuleFlags.INCREMENTAL_COMPILATION

    this.arena.clear()
    this.typeSpecAllocator.init(this.allocator)

    this.symbols.initIncrementalBuild()
}

public func (this: *Module) isBuiltin() : bool {
    return this == &builtins
}

public func (this: *Module) postIncrementalBuild() {
    this.flags &= ~ModuleFlags.INCREMENTAL_COMPILATION;
    this.symbols.postIncrementalBuild()
}

public func (this: *Module) getType(type: InternedString) : *Symbol {
    var sym = this.symbols.lookup(type)
    if(sym) {
        return sym
    }

    return this.genericSymbols.get(type)
}

public func (this: *Module) getFuncType(type: InternedString) : *Symbol {
    var sym = this.symbols.lookupFunc(type)
    if(sym) {
        return sym
    }

    return this.genericSymbols.get(type) // TODO: Separate out Func in generic symbols
}

public const MAX_METHODS_FOR_TYPE = 2048; // TODO: this should be big enough??

func (this: *Module) isMethodForType(type: *TypeInfo, sym: *Symbol) : bool {
    if(!(sym.flags & SymbolFlags.IS_METHOD)) {
        return false
    }

    var fn = sym.type
    if(fn == null || fn.kind != TypeKind.FUNC ||
       fn.funcDecl == null || fn.funcDecl.params == null) {
        return false
    }

    if(fn.funcDecl.params.size() == 0) {
        return false
    }

    var firstArg = fn.funcDecl.params.get(0)
    if(!firstArg.typeInfo) {
        return false
    }

    var base = firstArg.typeInfo.getBaseType()
    if(IsGenericCapable(type)) {
        var gen = type

        if(IsGenericCapable(base)) {
            var param = base
            if(gen.genericTypeid == param.genericTypeid) {
                return true
            }
        }

        if(gen.genericTypeid == base.typeid) {
            return true
        }
    }

    if(base.typeid != type.typeid) {
        return false
    }

    return true
}

public func (this: *Module) getMethodsForType(type: *TypeInfo, result: [MAX_METHODS_FOR_TYPE]*Symbol) : i32 {
    var numOfSymbols = 0

    var currentSyms: *Scope = &this.symbols
    while(currentSyms) {
        for(var it = currentSyms.symbolFuncs.iter(); it.hasNext();) {
            var n = it.next()
            var sym = n.value

            if(!this.isMethodForType(type, sym)) {
                continue
            }

            result[numOfSymbols] = sym
            numOfSymbols += 1
        }

        currentSyms = currentSyms.parent ? currentSyms.parent : null
    }

/* I don't think this is needed?
    for(var it = this.genericSymbols.iter(); it.hasNext();) {
        var entry = it.next()
        var sym = entry.value

        if(!this.isMethodForType(type, sym)) {
            continue
        }

        result[numOfSymbols] = sym
        numOfSymbols += 1
    }
*/
    return numOfSymbols
}

@doc("""
    Given the supplied module, return the alias name if and only if the supplied module
    is imported into this module with an alias.  Otherwise, returns an empty string.
""")
public func (this: *Module) getImportAlias(module: *Module) : *InternedString {
    if(!module) {
        return null;
    }

    var importInfo = module.importedBy.get(this.id.filename)
    return importInfo.alias;
}

public func (this: *Module) importModule(importDecl: *ImportDecl, moduleToImport: *Module) {
    var moduleName: *InternedString = null;

    if(importDecl.alias.token.type == TokenType.IDENTIFIER) {
        moduleName = &importDecl.alias.str;
    }

    this.importModuleSymbols(importDecl.startPos, moduleToImport, moduleName, importDecl.isUsing)
}


func (this: *Module) importModuleSymbols(
    importSrcPos: SrcPos,
    moduleToImport: *Module,
    moduleName: *InternedString,
    isUsing: bool) {

    moduleToImport.importedBy.put(this.id.filename, ModuleImport{this, moduleName, isUsing})

    var symbols = moduleToImport.symbols;
    for(var it = symbols.symbolTypes.iter(); it.hasNext();) {
        var entry = it.next()
        var symName = entry.key;
        var symbol = entry.value;
        this.importModuleSymbol(importSrcPos, moduleToImport, moduleName, symbol, symName, isUsing)
    }

    for(var it = symbols.symbolFuncs.iter(); it.hasNext();) {
        var entry = it.next()
        var symName = entry.key;
        var symbol = entry.value;
        this.importModuleSymbol(importSrcPos, moduleToImport, moduleName, symbol, symName, isUsing)
    }
}


/**
    Public because the preprocessor wants to import per
    declaration vs. on a module bases
*/
public func (this: *Module) importModuleSymbol(importSrcPos: SrcPos,
                                               moduleToImport: *Module,
                                               moduleName: *InternedString,
                                               symbol: *Symbol,
                                               symName: InternedString,
                                               isUsing: bool) {

    // only import public symbols
    if(!(symbol.flags & SymbolFlags.IS_PUBLIC)) {
        return;
    }

    // only import symbols that are declared in the import module
    if(!symbol.declared.equals(moduleToImport)) {
        if(!symbol.usingModule || !symbol.usingModule.equals(moduleToImport)) {
            return;
        }
    }

    // don't import symbols already defined in this module
    if(symbol.declared.equals(this)) {
        return;
    }

    if(isUsing && !symbol.usingModule) {
        symbol.usingModule = this
    }

    if(moduleName) {
        this.symbols.importSymbolWithAlias(importSrcPos, symName, *moduleName, symbol)
    }
    else {
        this.symbols.importSymbol(importSrcPos, symName, symbol)
    }
}

/**
    Returns the filename as a normalized 'key' which can be
    used to identify a module without relying on Windows case insensitivity.

TODO:
    Ideally we'd use something more reliable such as a FileDescriptor or
    Windows FileInformation.
*/
public func GetFilenameKey(filename: *const char, output: [MAX_PATH]char) : *char {
    GetAbsolutePath(CurrentWorkingPath(), filename, output)
    var c = output
    while(*c) {
        *c = toupper(*c)
        c+=1;
    }
    return output
}

@inline
public func (this: *Module) equals(other: *Module) : bool {
    return this == other
    /*
    if(!other) return false
    if(this == other) return true
    return strcmp(this.id.filename, other.id.filename) == 0
    */
}

public func (this: *Module) print(header: *const char) {
    printf("Module %s %.*s {\n", header, this.id.name.length, this.id.name.buffer)

    var symbols = this.symbols
    var i = 0
    for(var it = symbols.symbolTypes.iter(); it.hasNext();) {
        var entry = it.next()
        var symName = entry.key;
        var symbol = entry.value;
        printf("   %d '%.*s' %s\n", i, symName.length, symName.buffer, SymbolKindAsStr(symbol.kind))
        i += 1
    }

    i = 0
    for(var it = symbols.symbolFuncs.iter(); it.hasNext();) {
        var entry = it.next()
        var symName = entry.key;
        var symbol = entry.value;
        printf("   %d '%.*s' %s\n", i, symName.length, symName.buffer, SymbolKindAsStr(symbol.kind))
        i += 1
    }
    printf("}\n")
}

public func (moduleId: *ModuleId) fromFile(lita: *Lita, packageName: StringView, filename: *const char) {
    GetAbsolutePath(CurrentWorkingPath(), filename, moduleId.filename)
    GetFilenameKey(filename, moduleId.filenameKey)

    var pkg = ToModuleName(packageName)
    moduleId.packageName = lita.strings.internCopy(pkg.buffer, pkg.length)

    var pathStr = StringViewInit(moduleId.filename);
    var name = GetModuleName(pathStr)
    moduleId.name = lita.strings.internCopy(name.buffer, name.length)
}

public func ToModulePath(moduleName: StringView) : StringView {
    @static var modulePath = [MAX_SYMBOL_NAME]char{0}
    var len = 0
    for(var i = 0; i < moduleName.length; i+=1) {
        var c = moduleName.buffer[i]
        if(c == ':') {
            c = '/'

            // skip the next character
            i+=1
        }

        modulePath[len] = c
        len += 1
    }

    return StringView {
        .length = len,
        .buffer = modulePath,
    }
}

public func ToModuleName(modulePath: StringView) : StringView {
    @static var moduleName = [MAX_SYMBOL_NAME]char{0}

    var len = 0
    for(var i = 0; i < modulePath.length; i+=1) {
        var c = modulePath.buffer[i]
        if(c == '/' || c =='\\') {
            moduleName[len + 0] = ':'
            moduleName[len + 1] = ':'
            len += 2
        }
        else if(c == '.') {
            continue
        }
        else {
            moduleName[len] = c
            len += 1
        }
    }

    return StringView {
        .length = len,
        .buffer = moduleName,
    }
}

public func GetModuleName(pathStr: StringView) : StringView {
    var endIndex = -1
    var startIndex = -1
    for(var i = pathStr.length - 1; i >= 0; i -= 1) {
        var c = pathStr.buffer[i]
        if(c == '.' && endIndex < 0) {
            endIndex = i
        }
        else if(c == '/') {
            startIndex = i + 1
            break
        }
    }

    if(endIndex < 0 || startIndex < 0 || startIndex > endIndex) {
        return StringView {
            .buffer = 0,
            .length = 0
        }
    }

    return StringView {
        .buffer = pathStr.buffer + startIndex,
        .length = endIndex - startIndex
    }
}
