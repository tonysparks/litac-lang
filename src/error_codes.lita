import "std/string/builder"
import "std/libc"

import "phase_result"
import "lex"

public enum ErrorCode {
    INVALID_ASSIGNMENT,
    INVALID_CONST_EXPR,
    INVALID_ARRAY_DIMENSION_EXPR,
    INVALID_CHARACTER,
    INVALID_NUMBER,
    INVALID_FIELD,
    INVALID_IMPORT_ACCESS,
    INVALID_CONTINUE,
    INVALID_BREAK,
    INVALID_OBJECT_INIT,
    INVALID_MODULE_ACCESS,
    INVALID_VARARG_POSITION,
    INVALID_NOTE_DECL,
    INVALID_LABEL_STMT,
    INVALID_COMP_STMT,
    INVALID_DEFAULT_ASSIGNMENT,
    INVALID_TRAIT_MEMBER,
    INVALID_TYPE_IDENTIFIER,

    MISSING_COMMA,
    MISSING_SEMICOLON,
    MISSING_RIGHT_BRACE,
    MISSING_EQUALS,
    MISSING_IDENTIFIER,
    MISSING_RIGHT_BRACKET,
    MISSING_RIGHT_PAREN,
    MISSING_LEFT_PAREN,
    MISSING_LEFT_BRACE,
    MISSING_ARRAY_BRACKETS,
    MISSING_COLON,
    MISSING_WHILE,
    MISSING_AS,
    MISSING_GENERIC_END,
    MISSING_COMP_STMT_END,
    MISSING_ERROR_MESSAGE,

    RANGE_INTEGER,
    RANGE_LONG,
    RANGE_REAL,

    UNEXPECTED_EOF,
    UNEXPECTED_TOKEN,
    UNIMPLEMENTED,

    UNKNOWN_ERROR,
    TOO_MANY_ERRORS,

    MAX_NUM_ERROR_CODES
}



public const errorCodeText = []*const char {
    [ErrorCode.INVALID_ASSIGNMENT] = "Invalid assignment statement",
    [ErrorCode.INVALID_CONST_EXPR] = "Invalid constant expression",
    [ErrorCode.INVALID_ARRAY_DIMENSION_EXPR] = "Invalid array dimension expression",
    [ErrorCode.INVALID_CHARACTER] = "Invalid character",
    [ErrorCode.INVALID_NUMBER] = "Invalid number",
    [ErrorCode.INVALID_FIELD] = "Invalid field member",
    [ErrorCode.INVALID_IMPORT_ACCESS] = "Invalid import access",
    [ErrorCode.INVALID_CONTINUE] = "Invalid continue statement",
    [ErrorCode.INVALID_BREAK] = "Invalid break statement",
    [ErrorCode.INVALID_OBJECT_INIT] = "Invalid structure initializer",
    [ErrorCode.INVALID_MODULE_ACCESS] = "Invalid module access",
    [ErrorCode.INVALID_VARARG_POSITION] = "Invalid variable argument position",
    [ErrorCode.INVALID_NOTE_DECL] = "Invalid note declaration, must preceed either a 'var' or 'const' declaration",
    [ErrorCode.INVALID_LABEL_STMT] = "Invalid label statement, goto labels are only valid in functions",
    [ErrorCode.INVALID_COMP_STMT] = "Invalid compile time statement",
    [ErrorCode.INVALID_DEFAULT_ASSIGNMENT] = "Invalid default assignment statement, only allowed for 'struct'",
    [ErrorCode.INVALID_TRAIT_MEMBER] = "Invalid trait member, only function pointers are allowed",
    [ErrorCode.INVALID_TYPE_IDENTIFIER] = "Invalid fully qualified type identifier.  Qualified names must follow this format 'std.example::MyType'",

    [ErrorCode.MISSING_COMMA] = "Missing ,",
    [ErrorCode.MISSING_SEMICOLON] = "Missing ;",
    [ErrorCode.MISSING_RIGHT_BRACE] = "Missing }",
    [ErrorCode.MISSING_EQUALS] = "Missing =",
    [ErrorCode.MISSING_IDENTIFIER] = "Missing identifier",
    [ErrorCode.MISSING_RIGHT_BRACKET] = "Missing ]",
    [ErrorCode.MISSING_RIGHT_PAREN] = "Missing )",
    [ErrorCode.MISSING_LEFT_PAREN] = "Missing (",
    [ErrorCode.MISSING_LEFT_BRACE] = "Missing {",
    [ErrorCode.MISSING_ARRAY_BRACKETS] = "Missing []",
    [ErrorCode.MISSING_COLON] = "Missing :",
    [ErrorCode.MISSING_WHILE] = "Missing 'while'",
    [ErrorCode.MISSING_AS] = "Missing 'as'",
    [ErrorCode.MISSING_GENERIC_END] = "Missing >",
    [ErrorCode.MISSING_COMP_STMT_END] = "Missing #end",
    [ErrorCode.MISSING_ERROR_MESSAGE] = "Missing error message",

    [ErrorCode.RANGE_INTEGER] = "Integer literal out of range",
    [ErrorCode.RANGE_LONG] = "Long literal out of range",
    [ErrorCode.RANGE_REAL] = "Real literal out of range",

    [ErrorCode.UNEXPECTED_EOF] = "Unexpected end of file",
    [ErrorCode.UNEXPECTED_TOKEN] = "Unexpected token",
    [ErrorCode.UNIMPLEMENTED] = "Unimplemented feature",

    [ErrorCode.UNKNOWN_ERROR] = "An unknown error occured",
    [ErrorCode.TOO_MANY_ERRORS] = "Too many syntax errors",

    [ErrorCode.MAX_NUM_ERROR_CODES] = ""
}

/*
colors: windows
0=black
1=blue
2=green

colors: ansci
0=black
1=red
2=green
3=yellow
4=blue
5=magenta
6=cyan
7=white

38;5;c  // standard color foreground
38;2;r;g;b  // rgb color foreground

48;5;c  // background
48;2;r;g;b
*/
@asStr
public enum ConsoleColors {
    @asStr("\x1b[0m")
    CLEAR,

    @asStr("\x1b[38;5;0m")
    BLACK,

    @asStr("\x1b[38;5;1m")
    RED,

    @asStr("\x1b[38;5;2m")
    GREEN,

    @asStr("\x1b[38;5;3m")
    YELLOW,

    @asStr("\x1b[38;5;4m")
    BLUE,

    @asStr("\x1b[38;5;5m")
    MAGENTA,

    @asStr("\x1b[38;5;6m")
    CYAN,

    @asStr("\x1b[38;5;7m")
    WHITE,
}

public func PrintError(useColors: bool, sb: *StringBuilder, error: PhaseError) {
    if(!error.pos.lineStart) {
        sb.append("%s\n", error.message)
        return;
    }

    if(useColors) {
        sb.append("%s:%d:%d %serror%s: %s\n",
            error.pos.filename,
            error.pos.lineNumber,
            error.pos.position,
            ConsoleColorsAsStr(ConsoleColors.RED),
            ConsoleColorsAsStr(ConsoleColors.CLEAR),
            error.message
        )
    }
    else {
        sb.append("%s:%d:%d error: %s\n",
            error.pos.filename,
            error.pos.lineNumber,
            error.pos.position,
            error.message
        )
    }

    const len = error.pos.getLineLength()
    const maxLength = MIN(len, 255)

    var spaceCount = 0
    var atStart = false

    for(var i = 0; i < maxLength; i+=1) {
        var c = error.pos.lineStart[i]
        if(c == '\0') {
            break;
        }

        if((error.pos.lineStart + i) == error.pos.start) {
            atStart = true
        }

        if(c == '\t') {
            if(!atStart) {
                spaceCount += 4
            }
            sb.append("    ")
            continue
        }

        sb.appendChar(c)

        if(!atStart) {
            spaceCount += 1
        }
    }
    sb.append("\n")

    for(var i = 0; i < spaceCount; i += 1) {
        sb.append(" ")
    }
    sb.append("^\n*** %s\n", error.message)
}

@test
func TestPrintError() {
    var sb = StringBuilderInit()
    var line = "Blah Blah"
    var error = PhaseError {
        .type = ErrorType.ERROR,
        .message = "Blah Blah",
        .pos = SrcPos {
            .filename = "/path/to/nothing",
            .lineNumber = 1,
            .position = 1,
            .lineStart = line,
            .start = &line[2],
            .end = &line[7]
        }
    }
    PrintError(true, sb, error)
    printf("%s\n", sb.cStr())
}


@test
func testConsoleColors() {
    //printf("\x1b[38;2;150;160;207;4mHello Colorful World\x1b[0m\n")

    //printf("%serror\x1b[0m: %s\n", "\x1b[38;5;1;1m", "This works!")
    //printf("Hello\n")

    printf("%sBlack\n", ConsoleColorsAsStr(ConsoleColors.BLACK))
    printf("%sRed\n", ConsoleColorsAsStr(ConsoleColors.RED))
    printf("%sGreen\n", ConsoleColorsAsStr(ConsoleColors.GREEN))
    printf("%sYellow\n", ConsoleColorsAsStr(ConsoleColors.YELLOW))
    printf("%sBlue\n", ConsoleColorsAsStr(ConsoleColors.BLUE))
    printf("%sMagenta\n", ConsoleColorsAsStr(ConsoleColors.MAGENTA))
    printf("%sCyan\n", ConsoleColorsAsStr(ConsoleColors.CYAN))
    printf("%sWhite\n", ConsoleColorsAsStr(ConsoleColors.WHITE))
    printf("%sClear\n", ConsoleColorsAsStr(ConsoleColors.CLEAR))
}