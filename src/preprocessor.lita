import "std/libc"
import "std/assert"
import "std/array"
import "std/map"
import "std/string_buffer"
import "std/string_view"
import "std/string"
import "std/mem"
import "std/profile"
import "std/regex"
import "std/system"
import "std/io"

import "ast"
import "ast_new"
import "ast_copy"
import "phase_result"
import "checker"
import "parser"
import "lex"
import "module"
import "lita"
import "types"
import "symbols"
import "intern"
import "common"

import "ape/ape"

/*
================================================
    Compile time processing
================================================
*/

func noOpFree(mem: *void, freeArg: *void) {
    // do nothing
}


func litaMalloc(len: u64, arg: *void) : *void {
    var lita = arg as (*Lita)
    return lita.allocator.alloc(len)
}

public struct Preprocessor {
    lita: *Lita
    ape: *ape_t
    callContext: CallContext
    preCheckers: Array<CheckerContext>
    postCheckers: Array<CheckerContext>
}

struct CallContext {
    pp: *Preprocessor
    checker: *TypeChecker
    comp: *CompStmt
    buffer: StringBuffer

    resolveSymbols: bool
}

struct CheckerContext {
    module: *Module
    stmt: *CompStmt
}

public func PreprocessorInit(lita: *Lita) : Preprocessor {
    var pp = Preprocessor{}
    pp.init(lita)

    return pp
}

public func (this: *Preprocessor) init(lita: *Lita) {
    this.lita = lita
    this.ape = ape_make();
    this.preCheckers.init(8, lita.allocator)
    this.postCheckers.init(8, lita.allocator)

    this.callContext.pp = this
    this.callContext.checker = null
    this.callContext.comp = null
    this.callContext.resolveSymbols = false
    this.callContext.buffer.init(1024, lita.allocator)

    ape_set_repl_mode(this.ape, true) // allows redefinition of symbols if true
//    ape_set_gc_interval(this.ape, 1000000)
    ape_set_memory_functions(lita as (*void), &litaMalloc, lita as (*void), &noOpFree)

    // TODO: Read options from LitaOptions; allow for custom command line options
    //ape_set_global_constant(this.ape, "OS", ape_object_make_string(this.ape, "LINUX"))
    ape_set_global_constant(this.ape, "OS", ape_object_make_string(this.ape, OSAsStr(GetOS())))
    ape_set_global_constant(this.ape, "ARCH", ape_object_make_string(this.ape, ArchAsStr(GetArch())))
    ape_set_global_constant(this.ape, "DEBUG", ape_object_make_bool(lita.options.isDebug))
    ape_set_global_constant(this.ape, "REFLECTION", ape_object_make_bool(lita.options.typeOption != TypeInfoOption.NONE))
    ape_set_global_constant(this.ape, "TESTING", ape_object_make_bool(lita.options.testsOnly))
    ape_set_global_constant(this.ape, "INSTRUMENT", ape_object_make_bool(lita.options.instrument))
    ape_set_global_constant(this.ape, "OUTPUT_NAME", ape_object_make_string(this.ape, lita.options.outputFile))
    ape_set_global_constant(this.ape, "OUTPUT_PATH", ape_object_make_string(this.ape, lita.options.outputPath))

    ape_set_native_function(this.ape, "getTypeKind", ApeGetTypeKind, &this.callContext)
    ape_set_native_function(this.ape, "getSymbolsByNote", ApeGetSymbolsWithNote, &this.callContext)
    ape_set_native_function(this.ape, "getSymbolsToTest", ApeGetSymbolsToTest, &this.callContext)
    ape_set_native_function(this.ape, "addDeclaration", ApeAddDeclaration, &this.callContext)
    ape_set_native_function(this.ape, "replaceDeclaration", ApeReplaceDeclaration, &this.callContext)
    ape_set_native_function(this.ape, "addImport", ApeAddImport, &this.callContext)

    ape_set_native_function(this.ape, "assert", ApeAssert, &this.callContext)
    ape_set_native_function(this.ape, "getMainSymbol", ApeGetMainSymbol, &this.callContext)
    ape_set_native_function(this.ape, "setMainSymbol", ApeSetMainSymbol, &this.callContext)
    ape_set_native_function(this.ape, "getInputModuleFilename", ApeGetInputModuleFilename, &this.callContext)
    ape_set_native_function(this.ape, "getCurrentModuleFilename", ApeGetCurrentModuleFilename, &this.callContext)
    ape_set_native_function(this.ape, "astInsert", ApeAstInsert, &this.callContext)
    ape_set_native_function(this.ape, "emit", ApeEmit, &this.callContext)
    ape_set_native_function(this.ape, "emitClear", ApeEmitClear, &this.callContext)
    ape_set_native_function(this.ape, "emitStr", ApeEmitStr, &this.callContext)
    ape_set_native_function(this.ape, "error", ApeError, &this.callContext)

    // TODO: Add a Preprocessor Logger that can be enabled via the command line
    // ape_set_native_function(this.ape, "log", ApeLog, &this.callContext)
}

@profile
func (this: *Preprocessor) eval(comp: *CompStmt) : bool {
    var code = StringViewInit(comp.expr.buffer, comp.expr.length)
    if(comp.isScriptLoad && comp.expr.length > 2) {
        var filename = StringView{
            comp.expr.buffer,
            comp.expr.length,
        }
        if(!this.loadScript(comp, filename, &code)) {
            return false
        }
    }

    var result = ape_execute(this.ape, code.buffer, code.length)
    if(ape_has_errors(this.ape)) {
        var error = ape_get_error(this.ape, 0)
        var pos = SrcPos {
            .filename: comp.startPos.filename,
            .lineStart: comp.startPos.lineStart,
            .start: comp.startPos.start,
            .end: comp.startPos.end,
            .lineNumber: comp.startPos.lineNumber /*+ ape_error_get_line_number(error)*/, // doesn't work because repl mode
            .position: comp.startPos.position /* ape_error_get_column_number(error) */
        }
        this.lita.result.addError(pos, "error evaluating preprocessor expression: '%s' for line: '%s'", ape_error_get_message(error), ape_error_get_line(error))
        return false
    }

    return ape_object_get_bool(result)
}
/*
    type: *const char
    expr: *const char
    body: Array<*Stmt>
    end: *CompStmt
    evaluatedStmt: *Stmt
*/
@profile
public func (this: *Preprocessor) evaluateForModule(
    module: *Module,
    moduleStmt: *ModuleStmt,
    comp: *CompStmt) {

    assert(comp != null)

    // TODO: we need a checker...
    this.callContext.comp = comp

    // Preprocessor directives
    if(comp.type.equals(PRECHECK)) {
        this.preCheckers.add(CheckerContext{module, comp})
    }
    else if(comp.type.equals(POSTCHECK)) {
        this.postCheckers.add(CheckerContext{module, comp})
    }
    else if(comp.type.equals(POSTPARSE)) {
        this.callContext.postParse(module, moduleStmt, comp)
    }
    else if(comp.type.equals(ELSE_ERROR)) {
        this.lita.result.addError(
            comp.startPos, "%.*s", comp.expr.length, comp.expr.buffer)

    }
    else if(comp.type.equals(IF)     ||
            comp.type.equals(ELSEIF) ||
            comp.type.equals(ELSE)) {

        if(comp.type.equals(ELSE) || this.eval(comp)) {
            for(var i = 0; i < comp.body.size(); i += 1) {
                var stmt = comp.body.get(i)
                switch(stmt.kind) {
                    case StmtKind.IMPORT_DECL: {
                        moduleStmt.imports.add(stmt as (*ImportDecl))
                        break;
                    }
                    case StmtKind.NOTE_STMT: {
                        moduleStmt.notes.add(stmt as (*NoteStmt))
                        break;
                    }
                    case StmtKind.NOTES_DECL: {
                        var notes = stmt as (*NotesDecl)
                        moduleStmt.notes.addAll(notes.notes)
                        break;
                    }
                    case StmtKind.BLOCK_STMT: {
                        var block = stmt as (*BlockStmt)
                        for(var i = 0; i < block.stmts.size(); i += 1) {
                            var s = block.stmts.get(i)
                            if(s.kind == StmtKind.NOTE_STMT) {
                                moduleStmt.notes.add(s as (*NoteStmt))
                            }
                        }
                    }
                    default: {
                        if(IsDecl(stmt)) {
                            moduleStmt.declarations.add(stmt as (*Decl))
                        }
                    }
                }
            }
        }
        else if(comp.end) {
            this.evaluateForModule(module, moduleStmt, comp.end)
        }
    }
}

@profile
public func (this: *Preprocessor) evaluateForFunction(
        checker: *TypeChecker,
        comp: *CompStmt,
        isFirst: bool = true) : *Stmt {

    assert(comp != null)

    if(comp.evaluatedStmt) {
        return comp.evaluatedStmt
    }

    if(!isFirst) {
        if(comp.type.equals(IF) || comp.type.equals(STATIC_IF)) {
            this.lita.result.addError(
                comp.startPos, "'#static_if' and '#if' are only allowed as the first statement in the preprocessor chain.")
            return null
        }
    }

    this.callContext.checker = checker
    this.callContext.comp = comp

    if(comp.type.equals(IF)     ||
       comp.type.equals(ELSEIF) ||
       comp.type.equals(ELSE)) {

        if(comp.type.equals(ELSE) || this.eval(comp)) {
            comp.evaluatedStmt = NewBlockStmt(comp.startPos, comp.endPos, comp.body, this.lita.allocator)
        }
        else if(comp.end) {
            comp.evaluatedStmt = this.evaluateForFunction(checker, comp.end, false)
        }
    }
    else if(comp.type.equals(STATIC_IF) ||
            comp.type.equals(ELSE)) {

        this.lita.result.addError(
            comp.startPos, "'#static_if' is not allowed in '#if' chains")
        return null
    }
    else if(comp.type.equals(ELSE_ERROR)) {
        this.lita.result.addError(
            comp.startPos, "%.*s", comp.expr.length, comp.expr.buffer)
    }

    if(!comp.evaluatedStmt) {
        comp.evaluatedStmt = NewEmptyStmt(comp.startPos, comp.endPos, this.lita.allocator)
    }

    return comp.evaluatedStmt
}

public func (this: *Preprocessor) preResolveSymbols(checker: *TypeChecker, isIncrementalBuild: bool) {
    this.callContext.checker = checker
    this.callContext.resolveSymbols = false

    if(isIncrementalBuild) {
        for(var i = 0; i < this.preCheckers.size(); i += 1) {
            var ctx = this.preCheckers.get(i)
            if(ctx.module.flags & ModuleFlags.INCREMENTAL_COMPILATION) {
                this.callContext.comp = ctx.stmt
                this.eval(ctx.stmt)
            }
        }
    }
    else {
        for(var i = 0; i < this.preCheckers.size(); i += 1) {
            var ctx = this.preCheckers.get(i)
            this.callContext.comp = ctx.stmt
            this.eval(ctx.stmt)
        }
    }
}

public func (this: *Preprocessor) postResolveSymbols(checker: *TypeChecker, isIncrementalBuild: bool) {
    this.callContext.checker = checker
    this.callContext.resolveSymbols = true

    if(isIncrementalBuild) {
        for(var i = 0; i < this.postCheckers.size(); i += 1) {
            var ctx = this.postCheckers.get(i)
            if(ctx.module.flags & ModuleFlags.INCREMENTAL_COMPILATION) {
                this.callContext.comp = ctx.stmt
                this.eval(ctx.stmt)
            }
        }
    }
    else {
        for(var i = 0; i < this.postCheckers.size(); i += 1) {
            var ctx = this.postCheckers.get(i)
            this.callContext.comp = ctx.stmt
            this.eval(ctx.stmt)
        }
    }
}

func ApeGetTypeKind(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var element = ape_object_get_string(args[0]) as (*const char)
    if(!element) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty symbol name")
        return ape_object_make_null()
    }

    var elementIntern = context.pp.lita.strings.internCopy(element)
    var symbol = context.checker.current.currentScope.lookup(elementIntern)
    if(!symbol) {
        context.pp.lita.result.addError(context.comp.startPos, "no symbol found for '%s'", element)
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, TypeKindAsStr(symbol.type.kind))
}

func (this: *CallContext) logErrors() : bool {
    if(!ape_has_errors(this.pp.ape)) {
        return false;
    }

    var pos = SrcPos{}
    for (var i = 0; i < ape_errors_count(this.pp.ape); i+=1) {
        var err = ape_get_error(this.pp.ape, i);
        var errStr = ape_error_serialize(err);

        this.pp.lita.result.addError(pos, "%s", errStr)
    }

    return true
}


func (this: *Preprocessor) addNotes(obj: ape_object_t, module: *Module, attributes: *Attributes) {
    if(attributes.notes.size()) {

        /*
            HACK:
            Terrible work around - this won't work for all
            cases!!

            We have a chicken and egg problem here with generated symbols
            and resolving symbols.  We are generating new symbols in this
            preprocessor stage, however, we need symbols to be partially resolved
            (atleast their Notes).  Instead, we cheat and resolve the notes expressions
            here if they exist.
        */
        this.callContext.checker.enterModule(module)
        this.callContext.checker.resolveNotes(attributes.notes)
        this.callContext.checker.leaveModule()

        var notesArray = ape_object_make_array(this.ape)
        for(var i = 0; i < attributes.notes.size(); i += 1) {
            var note = attributes.notes.get(i)
            var noteObj = ape_object_make_map(this.ape)
            var name = ape_object_make_stringf(this.ape, "%.*s", note.type.name.length, note.type.name.buffer)
            ape_object_set_map_value(noteObj, "name", name)

            if(note.arguments.size()) {
                var argumentsArray = ape_object_make_array(this.ape)
                for(var j = 0; j < note.arguments.size(); j += 1) {
                    var attr = note.arguments.get(j)

                    var attrObj = ape_object_make_map(this.ape)
                    var name = ape_object_make_stringf(this.ape, "%.*s", attr.argName.str.length, attr.argName.str.buffer)

                    ape_object_set_map_value(attrObj, "name", name)
                    ape_object_add_array_value(argumentsArray, attrObj)

                    // TODO: Make this much more comprehensible...
                    if(attr.argExpr != null && attr.argExpr.operand.typeInfo != null) {
                        if(attr.argExpr.operand.typeInfo.kind == TypeKind.STR)  {
                            var value = ape_object_make_stringf(this.ape, "%.*s", attr.argExpr.operand.val.str.length, attr.argExpr.operand.val.str.buffer)
                            ape_object_set_map_value(attrObj, "value", value)
                        }
                        else if(IsNumberLike(attr.argExpr.operand.typeInfo)) {
                            if(IsInteger(attr.argExpr.operand.typeInfo)) {
                                ape_object_set_map_number(attrObj, "value", attr.argExpr.operand.val.intValue as (f64))
                            }
                            else {
                                ape_object_set_map_number(attrObj, "value", attr.argExpr.operand.val.floatValue)
                            }
                        }
                        else {
                            // TODO: other complex types...
                        }
                    }
                }
                ape_object_set_map_value(noteObj, "arguments", argumentsArray)
            }
            ape_object_add_array_value(notesArray, noteObj)
        }

        ape_object_set_map_value(obj, "notes", notesArray)
    }
}


func (this: *Preprocessor) typeInfoToApe(typeInfo: *TypeInfo) : ape_object_t {
    var typeObj = ape_object_make_map(this.ape)
    ape_object_set_map_value(typeObj, "name", ape_object_make_stringf(this.ape, "%.*s", typeInfo.name.length, typeInfo.name.buffer))
    ape_object_set_map_string(typeObj, "kind", TypeKindAsStr(typeInfo.kind))
    switch(typeInfo.kind) {
        case TypeKind.PTR: {
            var baseTypeObj = this.typeInfoToApe(typeInfo.ptrOf)
            ape_object_set_map_value(typeObj, "base", baseTypeObj)
            break
        }
        case TypeKind.CONST: {
            var baseTypeObj = this.typeInfoToApe(typeInfo.ptrOf)
            ape_object_set_map_value(typeObj, "base", baseTypeObj)
            break
        }
        default:{}
    }
    if(typeInfo.sym) {
        ape_object_set_map_value(typeObj, "symbol", this.declToApe(typeInfo.sym))
    }
    return typeObj
}

/**
    TODO:
        - This is incredibly incomplete, most elements are missing
*/
func (this: *Preprocessor) declToApe(sym: *Symbol) : ape_object_t {
    var declObj = ape_object_make_map(this.ape)
    ape_object_set_map_value(declObj, "name", ape_object_make_stringf(this.ape, "%.*s", sym.name.length, sym.name.buffer))
    ape_object_set_map_string(declObj, "kind", StmtKindAsStr(sym.decl.kind))
    ape_object_set_map_string(declObj, "moduleFilename", sym.declared.id.filename)
    ape_object_set_map_value(declObj, "moduleName", ape_object_make_stringf(this.ape, "%.*s", sym.declared.id.name.length, sym.declared.id.name.buffer))
    ape_object_set_map_value(declObj, "isPublic", ape_object_make_bool(sym.decl.attributes.isPublic))
    ape_object_set_map_value(declObj, "isGlobal", ape_object_make_bool(sym.decl.attributes.isGlobal))
    ape_object_set_map_value(declObj, "declPtr", ape_object_make_external(this.ape, sym.decl))

    this.addNotes(declObj, sym.declared, sym.decl.attributes)

    switch(sym.decl.kind) {
        case StmtKind.FUNC_DECL: {
            break;
        }
        case StmtKind.TRAIT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            var aggObj = ape_object_make_map(this.ape)
            if(StmtKind.UNION_DECL == sym.decl.kind) {
                ape_object_set_map_value(declObj, "unionDecl", aggObj)
            }
            else if(StmtKind.TRAIT_DECL == sym.decl.kind) {
                ape_object_set_map_value(declObj, "traitDecl", aggObj)
            }
            else {
                ape_object_set_map_value(declObj, "structDecl", aggObj)
            }

            var fieldsArray = ape_object_make_array(this.ape)
            var aggDecl = sym.decl as (*AggregateDecl)
            for(var i = 0; i < aggDecl.fields.size(); i += 1) {
                var field = aggDecl.fields.getPtr(i)

                var fieldObj = ape_object_make_map(this.ape)
                switch(field.kind) {
                    case StmtKind.TRAIT_FIELD_DECL: {
                        var varField = field.traitField

                        var name = ape_object_make_stringf(this.ape, "%.*s", varField.name.str.length, varField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)
                        this.addNotes(fieldObj, sym.declared, varField.attributes)
                        break
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        var varField = field.varField

                        var name = ape_object_make_stringf(this.ape, "%.*s", varField.name.str.length, varField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        // TODO: type and defaultExpr
                        if(varField.type && varField.type.typeInfo) {
                            var typeInfo = this.typeInfoToApe(varField.type.typeInfo)
                            ape_object_set_map_value(fieldObj, "typeInfo", typeInfo)
                        }

                        this.addNotes(fieldObj, sym.declared, varField.attributes)
                        break
                    }
                    case StmtKind.ENUM_FIELD_DECL: {
                        var enumField = field.enumField
                        // TODO

                        var name = ape_object_make_stringf(this.ape, "%.*s", enumField.name.str.length, enumField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        this.addNotes(fieldObj, sym.declared, enumField.attributes)
                        break;
                    }
                    case StmtKind.UNION_FIELD_DECL:
                    case StmtKind.STRUCT_FIELD_DECL: {
                        var aggregateField = field.aggregateField
                        // TODO
                        var name = ape_object_make_stringf(this.ape, "%.*s", aggregateField.name.str.length, aggregateField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        this.addNotes(fieldObj, sym.declared, aggregateField.attributes)
                        break;
                    }
                    default:
                        break;
                }

                ape_object_add_array_value(fieldsArray, fieldObj)
            }
            ape_object_set_map_value(aggObj, "fields", fieldsArray)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            // TODO:
            break;
        }
        case StmtKind.ENUM_DECL: {
            var enumObj = ape_object_make_map(this.ape)
            ape_object_set_map_value(declObj, "enumDecl", enumObj)

            var fieldsArray = ape_object_make_array(this.ape)
            var enumDecl = sym.decl as (*EnumDecl)
            for(var i = 0; i < enumDecl.fields.size(); i += 1) {
                var field = enumDecl.fields.get(i)
                var fieldObj = ape_object_make_map(this.ape)

                var name = ape_object_make_stringf(this.ape, "%.*s", field.name.str.length, field.name.str.buffer)
                ape_object_set_map_value(fieldObj, "name", name)

                this.addNotes(fieldObj, sym.declared, field.attributes)
                ape_object_add_array_value(fieldsArray, fieldObj)
            }
            ape_object_set_map_value(enumObj, "fields", fieldsArray)
            break;
        }
        default: {
            break
        }
    }
    return declObj
}


// TODO: Rethink this, is this necessary, why is this different from pre/postCheckers??
// can't we just rely on the AddDecl API??
@doc("""
Parses out the #postparse compile time statement which will attempt to
generate or alter existing source.
""")
func (this: *CallContext) postParse(module: *Module, moduleStmt: *ModuleStmt, comp: *CompStmt) {
    this.pp.eval(comp)

    var original = StringViewInit(this.buffer.buffer, this.buffer.length)
    if(original.empty()) {
        return;
    }

    var emitCode = original.copy(this.pp.lita.allocator)

    // TODO: Memory leak with incremental compilation
    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, emitCode.length, module, this.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.imports.size()) {
            moduleStmt.imports.addAll(stmts.imports)
        }
        if(stmts.notes.size()) {
            moduleStmt.notes.addAll(stmts.notes)
        }
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)
        }
    }
}


func ApeEmit(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    return FormatStr(context, &context.buffer, argc, args)
}

func ApeEmitClear(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    context.buffer.clear()
    return ape_object_make_null()
}

func ApeEmitStr(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    return ape_object_make_string(ape, context.buffer.cStr())
}

func ApeError(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var sb = StringBufferInit(1024, context.pp.lita.allocator)
    var result = FormatStr(context, &sb, argc, args)
    context.pp.lita.result.addError(context.comp.startPos, "%s", sb.cStr())
    return result;
}

func FormatStr(
    context: *CallContext,
    buffer: *StringBuffer,
    argc: i32,
    args: *ape_object_t) : ape_object_t {

    var argIndex = 1
    var str = ape_object_get_string(args[0]) as (*const char)
    if(!str) {
        return ape_object_make_null()
    }

    while(*str) {
        var c = *str
        if(c == '%') {
            if(str[1] == '%') {
                buffer.append("%s", "%") // escaped %
                str += 2
                continue
            }
            else {
                if(argIndex >= argc) {
                    context.pp.lita.result.addError(context.comp.startPos, "invalid argument index, there are more format parameters than supplied function arguments")
                    return ape_object_make_null()
                }

                if(str[1] == 's') {
                    var arg = ape_object_get_string(args[argIndex]) as (*const char)
                    buffer.append("%s", arg)
                }
                else if(str[1] == 'f') {
                    var arg = ape_object_get_number(args[argIndex]) as (f64)
                    buffer.append("%f", arg)
                }
                else if(str[1] == 'd') {
                    var arg = ape_object_get_number(args[argIndex]) as (i64)
                    buffer.append("%d", arg)
                }
                else if(str[1] == 'b') {
                    var arg = ape_object_get_bool(args[argIndex]) as (bool)
                    buffer.append("%s", arg ? "true" : "false")
                }
                else {
                    context.pp.lita.result.addError(context.comp.startPos, "invalid format parameter: '%%%c'", str[1])
                    return ape_object_make_null()
                }
                argIndex += 1
                str += 2
                continue
            }
        }
        else if(c == '\\') {
            if(str[1] == '\\') {
                buffer.append("\\")
                str += 2
                continue
            }
        }

        buffer.append("%c", c)
        str += 1
    }

    return ape_object_make_null()
}



func ApeGetSymbolsWithNote(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var element = ape_object_get_string(args[0]) as (*const char)
    if(!element) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty note name")
        return ape_object_make_null()
    }

    var results = ape_object_make_array(ape)
    for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
        var sym = context.checker.symbolFuncs.get(i)
        if(sym.decl.hasNote(element)) {
            var declObj = context.pp.declToApe(sym)
            ape_object_add_array_value(results, declObj)
        }
    }
    for(var i = 0; i < context.checker.symbolTypes.size(); i += 1) {
        var sym = context.checker.symbolTypes.get(i)
        if(sym.decl.hasNote(element)) {
            var declObj = context.pp.declToApe(sym)
            ape_object_add_array_value(results, declObj)
        }
    }

    return results
}

func ApeAddDeclaration(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code || code[0] == '\0') {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }

    var module = context.pp.lita.getModule(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleStmt = module.ast

    var original = StringViewInit(code)
    var emitCode = original.copy(context.pp.lita.allocator)

    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, emitCode.length, module, context.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.imports.size()) {
            moduleStmt.imports.addAll(stmts.imports)
        }
        if(stmts.notes.size()) {
            moduleStmt.notes.addAll(stmts.notes)
        }
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)

            context.checker.enterModule(module)
            defer context.checker.leaveModule()

            for(var i = 0; i < stmts.declarations.size(); i += 1) {
                var decl = stmts.declarations.get(i)
                var sym = context.checker.createDeclSymbol(decl)

                // make sure every import of this module's symbol
                // has the new symbol we just created
                if(sym) {
                    // mark that this symbol was created from the pre-processor
                    sym.flags |= SymbolFlags.IS_FROM_PREPROCESSOR

                    for(var it = module.importedBy.iter(); it.hasNext();) {
                        var entry = it.next()
                        var imp = entry.value
                        imp.module.importModuleSymbol(decl.startPos, module, imp.alias, sym, sym.name, imp.isUsing)
                    }

                    if(context.resolveSymbols) {
                        context.checker.resolveSymbol(sym)
                        context.checker.finishResolveSymbol(sym)
                    }
                }
            }
        }
    }

    return ape_object_make_bool(true)
}

func ApeReplaceDeclaration(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }

    var module = context.pp.lita.getModule(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleStmt = module.ast

    var original = StringViewInit(code)
    var emitCode = original.copy(context.pp.lita.allocator)

    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, emitCode.length, module, context.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)

            context.checker.enterModule(module)
            defer context.checker.leaveModule()

            for(var i = 0; i < stmts.declarations.size(); i += 1) {
                var decl = stmts.declarations.get(i)
                var name = decl.name.str

                // TODO: Should clean this up with a util
                // function for getting the canonical name
                // of a declaration
                var buffer = [MAX_SYMBOL_NAME]char{0};
                if(decl.kind == StmtKind.FUNC_DECL) {
                    var funcDecl = decl as (*FuncDecl)
                    if(!funcDecl.getName(buffer)) {
                        context.pp.lita.result.addError(context.comp.startPos,
                            "symbol '%.*s' could not get declaration method name", decl.name.str.length, decl.name.str.buffer)
                        return ape_object_make_null()
                    }
                    name = context.pp.lita.strings.internCopy(buffer)
                }

                var sym = context.checker.getTypeByName(name)
                if(!sym) {
                    context.pp.lita.result.addError(context.comp.startPos,
                        "symbol '%.*s' not found for replacement", decl.name.str.length, decl.name.str.buffer)
                    return ape_object_make_null()
                }

                sym.decl = decl
                decl.sym = sym

                // mark that this symbol was created from the pre-processor
                sym.flags |= SymbolFlags.IS_FROM_PREPROCESSOR
                sym.flags |= SymbolFlags.IS_INCOMPLETE

                if(context.resolveSymbols) {
                    context.checker.resolveSymbol(sym)
                    context.checker.finishResolveSymbol(sym)
                }
            }
        }
    }

    return ape_object_make_bool(true)
}


func ApeGetInputModuleFilename(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var moduleFilename = context.pp.lita.options.inputFile

    var mainModule = context.pp.lita.getModule(moduleFilename)
    if(!mainModule) {
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, moduleFilename)
}

func ApeGetCurrentModuleFilename(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var moduleFilename = context.comp.startPos.filename
    var mainModule = context.pp.lita.getModule(moduleFilename)
    if(!mainModule) {
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, moduleFilename)
}


func ApeGetMainSymbol(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var mainEntry = context.checker.mainEntry
    if(!mainEntry) {
        return ape_object_make_null()
    }

    return context.pp.declToApe(mainEntry)
}

func ApeAstInsert(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_EXTERNAL, ape_object_type.APE_OBJECT_STRING,  ape_object_type.APE_OBJECT_NUMBER)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var astPtr = ape_object_get_external(args[0])
    if(!astPtr) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty ast node")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }


    var index = ape_object_get_number(args[2]) as (i32)

    var astNode = astPtr as (*Node)
    var module = context.checker.current

    // TODO: Memory leak with incremental compilation...
    var parser = ParserInit(astNode.startPos.filename, code, strlen(code), module, context.pp.lita)
    var stmt = parser.statement()

    AstInsert(astNode, stmt, index, module, context.pp.lita)
    return ape_object_make_null()
}


func ApeAddImport(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    //@static var moduleNameIndex: i32;

    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }


    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var module = context.pp.lita.getModule(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleToImport = ape_object_get_string(args[1]) as (*const char)
    if(!moduleToImport) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module to import name")
        return ape_object_make_null()
    }

    // don't import to yourself
    if(strcmp(moduleName, moduleToImport) == 0) {
        return ape_object_make_null()
    }

    var importModule = context.pp.lita.getModule(moduleToImport)
    if(!importModule) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleToImport)
        return ape_object_make_null()
    }

    var alias = AstAddImport(context.pp.lita, context.checker, module, importModule)
    if(!alias) {
        // this is already being imported and doesn't have an alias
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, alias)
}


func ApeSetMainSymbol(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var module = context.pp.lita.getModule(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var symbolName = ape_object_get_string(args[1]) as (*const char)
    if(!symbolName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty symbol name")
        return ape_object_make_null()
    }

    var symbolNameIntern = context.pp.lita.strings.internCopy(symbolName)
    var sym = module.getType(symbolNameIntern)
    if(!sym) {
        context.pp.lita.result.addError(context.comp.startPos, "can not find symbol '%s' in module: '%s'", symbolName, moduleName)
        return ape_object_make_null()
    }

    if(sym.kind != SymbolKind.FUNC) {
        context.pp.lita.result.addError(context.comp.startPos, "can not make symbol '%s' a main entry point because it isn't a function", symbolName)
        return ape_object_make_null()
    }

    context.checker.mainEntry = sym
    return ape_object_make_bool(true)
}


func ApeGetSymbolsToTest(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var results = ape_object_make_array(ape)
    if(!context.pp.lita.options.testsOnly) {
        return results
    }

    // if we are testing by regex, test each function with @test attribute
    if(context.pp.lita.options.testsRegex) {
        var all = strcmp(context.pp.lita.options.testsRegex, ".*") == 0
        var pattern = RegexCompile(context.pp.lita.options.testsRegex)

        for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
            var sym = context.checker.symbolFuncs.get(i)
            if(sym.kind == SymbolKind.FUNC && sym.decl.hasNote("test")) {
                if(all) {
                    var declObj = context.pp.declToApe(sym)
                    ape_object_add_array_value(results, declObj)
                }
                else {
                    var note = sym.decl.getNote("test")
                    const MAX_SIZE = 256
                    var buffer: [MAX_SIZE]char;

                    for(var i = 0; i < note.arguments.size(); i += 1) {
                        var att = note.arguments.get(i)
                        var matchlength = 0

                        if(att.argExpr == null || att.argExpr.operand.typeInfo == null) {
                            continue
                        }

                        if(att.argExpr.operand.typeInfo.kind != TypeKind.STR) {
                            continue
                        }

                        var value = att.argExpr.operand.val.str
                        if(value.length >= MAX_SIZE) {
                            continue
                        }

                        value.copyTo(buffer, value.length)

                        if(pattern.match(buffer, &matchlength) > -1) {
                            var declObj = context.pp.declToApe(sym)
                            ape_object_add_array_value(results, declObj)
                            break
                        }
                    }
                }
            }
        }
    }
    // otherwise we are just testing the input file's tests
    else {
        var moduleName = context.pp.lita.options.inputFile
        var mainModule = context.pp.lita.getModule(moduleName)
        if(!mainModule) {
            return results;
        }

        // iterate thru all symbols, this way we are deterministic in our output
        for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
            var sym = context.checker.symbolFuncs.get(i)
            if(sym.declared == mainModule && sym.kind == SymbolKind.FUNC && sym.decl.hasNote("test")) {
                var declObj = context.pp.declToApe(sym)
                ape_object_add_array_value(results, declObj)
            }
        }
    }

    return results
}

func ApeAssert(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var stmt = ape_object_get_bool(args[0])
    if(!stmt) {
        // TODO: Get the position of the function call...
        context.pp.lita.result.addError(context.comp.startPos, "preprocessor assertion failure")
    }

    return ape_object_make_null()
}


func (this: *Preprocessor) loadScript(comp: *CompStmt, filename: *StringView, code: *StringView) : bool {
    var filepath = [MAX_PATH]char{0};
    var filepathStr = StringInit(filepath, MAX_PATH, 0)

    FilePath(comp.startPos.filename, filepath)

    filepathStr.adjust()
    filepathStr.append("/%.*s", filename.length, filename.buffer)

    if(!FileExists(filepathStr.cStr())) {
        this.lita.result.addError(comp.startPos, "unable to locate '%.*s'", filename.length, filename.buffer)
        return false
    }

    var buffer: *char = null;
    var length: usize = 0;

    var status = ReadFile(filepathStr.cStr(), &buffer, &length, this.lita.allocator)

    if(status != FileStatus.Ok) {
        this.lita.result.addError(comp.startPos, "error loading '%s'", filepathStr.cStr())
        return false
    }

    code.buffer = buffer;
    code.length = length as (i32);

    return true
}