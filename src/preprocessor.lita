import "std/libc"
import "std/assert"
import "std/array"
import "std/map"
import "std/string_buffer"
import "std/string_view"
import "std/mem"
import "std/profile"
import "std/regex"
import "std/system"

import "ast"
import "ast_new"
import "ast_copy"
import "phase_result"
import "checker"
import "parser"
import "lex"
import "module"
import "lita"
import "types"
import "symbols"
import "error_codes"

import "tcc/libtcc"
import "ape"

/*
================================================
    Compile time processing
================================================
*/

func noOpFree(mem: *void, freeArg: *void) {
    // do nothing
}


func litaMalloc(len: u64, arg: *void) : *void {
    var lita = arg as (*Lita)
    return lita.allocator.alloc(len)
}

public struct Preprocessor {
    lita: *Lita
    ape: *ape_t
    callContext: CallContext
    preCheckers: Array<*CompStmt>
    runners: Array<*CompStmt>
}

struct CallContext {
    pp: *Preprocessor
    checker: *TypeChecker
    comp: *CompStmt
    buffer: StringBuffer
}

public func PreprocessorInit(lita: *Lita) : Preprocessor {
    var pp = Preprocessor{}
    pp.init(lita)

    return pp
}

public func (this: *Preprocessor) init(lita: *Lita) {
    this.lita = lita
    this.ape = ape_make();
    this.preCheckers.init(8, lita.allocator)
    this.callContext.pp = this
    this.callContext.checker = null
    this.callContext.comp = null
    this.callContext.buffer.init(1024, lita.allocator)

    this.runners.init(16, lita.allocator)

    ape_set_repl_mode(this.ape, true) // allows redefinition of symbols if true
//    ape_set_gc_interval(this.ape, 1000000)
    ape_set_memory_functions(lita as (*void), &litaMalloc, lita as (*void), &noOpFree)

    // TODO: Read options from LitaOptions; allow for custom command line options
    //ape_set_global_constant(this.ape, "OS", ape_object_make_string(this.ape, "LINUX"))
    ape_set_global_constant(this.ape, "OS", ape_object_make_string(this.ape, OSAsStr(GetOS())))
    ape_set_global_constant(this.ape, "DEBUG", ape_object_make_bool(lita.options.isDebug))
    ape_set_global_constant(this.ape, "REFLECTION", ape_object_make_bool(lita.options.typeOption != TypeInfoOption.NONE))
    ape_set_global_constant(this.ape, "TESTING", ape_object_make_bool(lita.options.testsOnly))
    ape_set_global_constant(this.ape, "INSTRUMENT", ape_object_make_bool(lita.options.instrument))
    ape_set_global_constant(this.ape, "OUTPUT_NAME", ape_object_make_string(this.ape, lita.options.outputFile))
    ape_set_global_constant(this.ape, "OUTPUT_PATH", ape_object_make_string(this.ape, lita.options.outputPath))

    ape_set_native_function(this.ape, "getTypeKind", ApeGetTypeKind, &this.callContext)
    ape_set_native_function(this.ape, "getSymbolsByNote", ApeGetSymbolsWithNote, &this.callContext)
    ape_set_native_function(this.ape, "getSymbolsToTest", ApeGetSymbolsToTest, &this.callContext)
    ape_set_native_function(this.ape, "addDeclaration", ApeAddDeclaration, &this.callContext)
    ape_set_native_function(this.ape, "replaceDeclaration", ApeReplaceDeclaration, &this.callContext)
    ape_set_native_function(this.ape, "addImport", ApeAddImport, &this.callContext)

    ape_set_native_function(this.ape, "getMainSymbol", ApeGetMainSymbol, &this.callContext)
    ape_set_native_function(this.ape, "setMainSymbol", ApeSetMainSymbol, &this.callContext)
    ape_set_native_function(this.ape, "getInputModuleFilename", ApeGetInputModuleFilename, &this.callContext)
    ape_set_native_function(this.ape, "getCurrentModuleFilename", ApeGetCurrentModuleFilename, &this.callContext)
    ape_set_native_function(this.ape, "astInsert", ApeAstInsert, &this.callContext)
    ape_set_native_function(this.ape, "emit", ApeEmit, &this.callContext)
    ape_set_native_function(this.ape, "emitClear", ApeEmitClear, &this.callContext)
    ape_set_native_function(this.ape, "emitStr", ApeEmitStr, &this.callContext)
}

@profile
func (this: *Preprocessor) eval(comp: *CompStmt) : bool {
    var result = ape_execute(this.ape, comp.expr)
    if(ape_has_errors(this.ape)) {
        var error = ape_get_error(this.ape, 0)
        var pos = SrcPos {
            .filename: comp.startPos.filename,
            .lineStart: comp.startPos.lineStart,
            .start: comp.startPos.start,
            .end: comp.startPos.end,
            .lineNumber: comp.startPos.lineNumber /*+ ape_error_get_line_number(error)*/, // doesn't work because repl mode
            .position: comp.startPos.position /* ape_error_get_column_number(error) */
        }
        this.lita.result.addError(pos, "error evaluating preprocessor expression: '%s' for line: '%s'", ape_error_get_message(error), ape_error_get_line(error))
        return false
    }

    return ape_object_get_bool(result)
}
/*
    type: *const char
    expr: *const char
    body: Array<*Stmt>
    end: *CompStmt
    evaluatedStmt: *Stmt
*/
@profile
public func (this: *Preprocessor) evaluateForModule(moduleStmt: *ModuleStmt, comp: *CompStmt) {
    assert(comp != null)

    // TODO: we need a checker...
    this.callContext.comp = comp

    // Preprocessor directives
    if(strcmp(comp.type, "precheck") == 0) {
        this.preCheckers.add(comp)
    }
    else if(strcmp(comp.type, "postparse") == 0) {
        this.callContext.preprocessCall(moduleStmt, comp)
    }
    else if(strcmp(comp.type, "run") == 0) {
        this.runners.add(comp)
    }
    else if(strcmp(comp.type, "if")     == 0 ||
       strcmp(comp.type, "elseif") == 0 ||
       strcmp(comp.type, "else")   == 0) {

        if(strcmp(comp.type, "else") == 0 || this.eval(comp)) {
            for(var i = 0; i < comp.body.size(); i += 1) {
                var stmt = comp.body.get(i)
                switch(stmt.kind) {
                    case StmtKind.IMPORT_DECL: {
                        moduleStmt.imports.add(stmt as (*ImportDecl))
                        break;
                    }
                    case StmtKind.NOTE_STMT: {
                        moduleStmt.notes.add(stmt as (*NoteStmt))
                        break;
                    }
                    case StmtKind.NOTES_DECL: {
                        var notes = stmt as (*NotesDecl)
                        moduleStmt.notes.addAll(notes.notes)
                        break;
                    }
                    case StmtKind.BLOCK_STMT: {
                        var block = stmt as (*BlockStmt)
                        for(var i = 0; i < block.stmts.size(); i += 1) {
                            var s = block.stmts.get(i)
                            if(s.kind == StmtKind.NOTE_STMT) {
                                moduleStmt.notes.add(s as (*NoteStmt))
                            }
                        }
                    }
                    default: {
                        if(IsDecl(stmt)) {
                            moduleStmt.declarations.add(stmt as (*Decl))
                        }
                    }
                }
            }
        }
        else if(comp.end) {
            this.evaluateForModule(moduleStmt, comp.end)
        }
    }
}

@profile
public func (this: *Preprocessor) evaluateForFunction(checker: *TypeChecker, comp: *CompStmt) : *Stmt {
    assert(comp != null)

    if(comp.evaluatedStmt) {
        return comp.evaluatedStmt
    }

    this.callContext.checker = checker
    this.callContext.comp = comp

    if(strcmp(comp.type, "if")     == 0 ||
       strcmp(comp.type, "elseif") == 0 ||
       strcmp(comp.type, "else")   == 0) {

        if(strcmp(comp.type, "else") == 0 || this.eval(comp)) {
            comp.evaluatedStmt = NewBlockStmt(comp.startPos, comp.endPos, comp.body, this.lita.allocator)
        }
        else if(comp.end) {
            comp.evaluatedStmt = this.evaluateForFunction(checker, comp.end)
        }
    }

    if(!comp.evaluatedStmt) {
        comp.evaluatedStmt = NewEmptyStmt(comp.startPos, comp.endPos, this.lita.allocator)
    }

    return comp.evaluatedStmt
}


func ApeGetTypeKind(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var element = ape_object_get_string(args[0]) as (*const char)
    if(!element) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty symbol name")
        return ape_object_make_null()
    }

    var symbol = context.checker.current.currentScope.lookup(element)
    if(!symbol) {
        context.pp.lita.result.addError(context.comp.startPos, "no symbol found for '%s'", element)
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, TypeKindAsStr(symbol.type.kind))
}

func (this: *CallContext) logErrors() : bool {
    if(!ape_has_errors(this.pp.ape)) {
        return false;
    }

    var sb = StringBufferInit(1024, this.pp.lita.allocator)
    var pos = SrcPos{}

    for (var i = 0; i < ape_errors_count(this.pp.ape); i+=1) {
        var err = ape_get_error(this.pp.ape, i);
        var errStr = ape_error_serialize(err);
        defer if(errStr) free(errStr)

        this.pp.lita.result.addErrorStr(pos, sb)
    }

    return true
}


public func (this: *Preprocessor) preResolveSymbols(checker: *TypeChecker) {
    this.callContext.checker = checker

    for(var i = 0; i < this.preCheckers.size(); i += 1) {
        var comp = this.preCheckers.get(i)
        this.callContext.comp = comp
        this.eval(comp)
    }

    for(var i = 0; i < this.runners.size(); i += 1) {
        var comp = this.runners.get(i)
        this.callContext.comp = comp
        this.runCompStmt(comp)
    }
}

func (this: *Preprocessor) addNotes(obj: ape_object_t, attributes: *Attributes) {
    if(attributes.notes.size()) {
        var notesArray = ape_object_make_array(this.ape)
        for(var i = 0; i < attributes.notes.size(); i += 1) {
            var note = attributes.notes.get(i)
            var noteObj = ape_object_make_map(this.ape)
            var name = ape_object_make_stringf(this.ape, "%.*s", note.name.str.length, note.name.str.buffer)
            ape_object_set_map_value(noteObj, "name", name)

            if(note.attributes.size()) {
                var attributesArray = ape_object_make_array(this.ape)
                for(var i = 0; i < note.attributes.size(); i += 1) {
                    var attr = note.attributes.get(i)
                    var attrObj = ape_object_make_map(this.ape)
                    var name = ape_object_make_stringf(this.ape, "%.*s", attr.str.length, attr.str.buffer)
                    ape_object_set_map_value(attrObj, "name", name)
                    ape_object_add_array_value(attributesArray, attrObj)
                }
                ape_object_set_map_value(noteObj, "attributes", attributesArray)
            }

            ape_object_add_array_value(notesArray, noteObj)
        }

        ape_object_set_map_value(obj, "notes", notesArray)
    }
}

func (this: *Preprocessor) declToApe(sym: *Symbol) : ape_object_t {
    var declObj = ape_object_make_map(this.ape)
    ape_object_set_map_string(declObj, "name", sym.name)
    ape_object_set_map_string(declObj, "kind", StmtKindAsStr(sym.decl.kind))
    ape_object_set_map_string(declObj, "moduleFilename", sym.declared.id.filename)
    ape_object_set_map_value(declObj, "moduleName", ape_object_make_stringf(this.ape, "%.*s", sym.declared.id.name.length, sym.declared.id.name.buffer))
    ape_object_set_map_value(declObj, "isPublic", ape_object_make_bool(sym.decl.attributes.isPublic))
    ape_object_set_map_value(declObj, "isGlobal", ape_object_make_bool(sym.decl.attributes.isGlobal))
    ape_object_set_map_value(declObj, "declPtr", ape_object_make_external(this.ape, sym.decl))

    this.addNotes(declObj, sym.decl.attributes)

    switch(sym.decl.kind) {
        case StmtKind.FUNC_DECL: {
            break;
        }
        case StmtKind.TRAIT_DECL:
        case StmtKind.UNION_DECL:
        case StmtKind.STRUCT_DECL: {
            var aggObj = ape_object_make_map(this.ape)
            if(StmtKind.UNION_DECL == sym.decl.kind) {
                ape_object_set_map_value(declObj, "unionDecl", aggObj)
            }
            else if(StmtKind.TRAIT_DECL == sym.decl.kind) {
                ape_object_set_map_value(declObj, "traitDecl", aggObj)
            }
            else {
                ape_object_set_map_value(declObj, "structDecl", aggObj)
            }

            var fieldsArray = ape_object_make_array(this.ape)
            var aggDecl = sym.decl as (*AggregateDecl)
            for(var i = 0; i < aggDecl.fields.size(); i += 1) {
                var field = aggDecl.fields.get(i)

                var fieldObj = ape_object_make_map(this.ape)
                switch(field.kind) {
                    case StmtKind.TRAIT_FIELD_DECL: {
                        var varField = field.traitField

                        var name = ape_object_make_stringf(this.ape, "%.*s", varField.name.str.length, varField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)
                        this.addNotes(fieldObj, varField.attributes)
                        break
                    }
                    case StmtKind.VAR_FIELD_DECL: {
                        var varField = field.varField

                        var name = ape_object_make_stringf(this.ape, "%.*s", varField.name.str.length, varField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        // TODO: type and defaultExpr

                        this.addNotes(fieldObj, varField.attributes)
                        break
                    }
                    case StmtKind.ENUM_FIELD_DECL: {
                        var enumField = field.enumField
                        // TODO

                        var name = ape_object_make_stringf(this.ape, "%.*s", enumField.name.str.length, enumField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        this.addNotes(fieldObj, enumField.attributes)
                        break;
                    }
                    case StmtKind.UNION_FIELD_DECL:
                    case StmtKind.STRUCT_FIELD_DECL: {
                        var aggregateField = field.aggregateField
                        // TODO
                        var name = ape_object_make_stringf(this.ape, "%.*s", aggregateField.name.str.length, aggregateField.name.str.buffer)
                        ape_object_set_map_value(fieldObj, "name", name)

                        this.addNotes(fieldObj, aggregateField.attributes)
                        break;
                    }
                    default:
                        break;
                }

                ape_object_add_array_value(fieldsArray, fieldObj)
            }
            ape_object_set_map_value(aggObj, "fields", fieldsArray)
            break;
        }
        case StmtKind.TYPEDEF_DECL: {
            // TODO:
            break;
        }
        case StmtKind.ENUM_DECL: {
            var enumObj = ape_object_make_map(this.ape)
            ape_object_set_map_value(declObj, "enumDecl", enumObj)

            var fieldsArray = ape_object_make_array(this.ape)
            var enumDecl = sym.decl as (*EnumDecl)
            for(var i = 0; i < enumDecl.fields.size(); i += 1) {
                var field = enumDecl.fields.get(i)
                var fieldObj = ape_object_make_map(this.ape)

                var name = ape_object_make_stringf(this.ape, "%.*s", field.name.str.length, field.name.str.buffer)
                ape_object_set_map_value(fieldObj, "name", name)

                this.addNotes(fieldObj, field.attributes)
                ape_object_add_array_value(fieldsArray, fieldObj)
            }
            ape_object_set_map_value(enumObj, "fields", fieldsArray)
            break;
        }
        default: {
            break
        }
    }

    return declObj

}

@doc("""
Parses out the #preprocess compile time statement which will attempt to
generate or alter existing source.
""")
func (this: *CallContext) preprocessCall(moduleStmt: *ModuleStmt, comp: *CompStmt) {
    this.pp.eval(comp)

    var original = StringViewInit(this.buffer.buffer, this.buffer.length)
    var emitCode = original.copy(this.pp.lita.allocator)

    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, this.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.imports.size()) {
            moduleStmt.imports.addAll(stmts.imports)
        }
        if(stmts.notes.size()) {
            moduleStmt.notes.addAll(stmts.notes)
        }
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)
        }
    }
}


func ApeEmit(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    /*if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }*/

    var argIndex = 1
    var element = ape_object_get_string(args[0]) as (*const char)
    if(element) {
        var str: *const char = element
        while(*str) {
            var c = *str
            if(c == '%') {
                if(str[1] == '%') {
                    context.buffer.append("%s", "%") // escaped %
                }
                else {
                    if(argIndex >= argc) {
                        context.pp.lita.result.addError(context.comp.startPos, "invalid argument index, there are more format parameters than supplied function arguments")
                        return ape_object_make_null()
                    }

                    if(str[1] == 's') {
                        var arg = ape_object_get_string(args[argIndex]) as (*const char)
                        context.buffer.append("%s", arg)
                    }
                    else if(str[1] == 'f') {
                        var arg = ape_object_get_number(args[argIndex]) as (f64)
                        context.buffer.append("%f", arg)
                    }
                    else if(str[1] == 'd') {
                        var arg = ape_object_get_number(args[argIndex]) as (i64)
                        context.buffer.append("%d", arg)
                    }
                    else if(str[1] == 'b') {
                        var arg = ape_object_get_bool(args[argIndex]) as (bool)
                        context.buffer.append("%s", arg ? "true" : "false")
                    }
                    else {
                        context.pp.lita.result.addError(context.comp.startPos, "invalid format parameter: '%%%c'", str[1])
                        return ape_object_make_null()
                    }
                    argIndex += 1
                    str += 2
                    continue
                }
            }
            else if(c == '\\') {
                if(str[1] == '\\' && str[2] == 'n') {
                    context.buffer.append("\\n")
                    str += 3
                    continue
                }
                else {
                    context.buffer.append("\\\\")
                }
            }

            context.buffer.append("%c", c)
            str += 1
        }
    }

    return ape_object_make_null()
}

func ApeEmitClear(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    context.buffer.clear()
    return ape_object_make_null()
}

func ApeEmitStr(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    //printf("String: %s\n", context.buffer.cStr())
    return ape_object_make_string(ape, context.buffer.cStr())
}

func ApeGetSymbolsWithNote(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var element = ape_object_get_string(args[0]) as (*const char)
    if(!element) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty note name")
        return ape_object_make_null()
    }

    var results = ape_object_make_array(ape)
    for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
        var sym = context.checker.symbolFuncs.get(i)
        if(sym.decl.hasNote(element)) {
            var declObj = context.pp.declToApe(sym)
            ape_object_add_array_value(results, declObj)
        }
    }
    for(var i = 0; i < context.checker.symbolTypes.size(); i += 1) {
        var sym = context.checker.symbolTypes.get(i)
        if(sym.decl.hasNote(element)) {
            var declObj = context.pp.declToApe(sym)
            ape_object_add_array_value(results, declObj)
        }
    }

    return results
}

func ApeAddDeclaration(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }

    var module = context.pp.lita.modules.get(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleStmt = module.ast

    var original = StringViewInit(code)
    var emitCode = original.copy(context.pp.lita.allocator)

    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, context.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.imports.size()) {
            moduleStmt.imports.addAll(stmts.imports)
        }
        if(stmts.notes.size()) {
            moduleStmt.notes.addAll(stmts.notes)
        }
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)

            context.checker.enterModule(module)
            defer context.checker.leaveModule()

            for(var i = 0; i < stmts.declarations.size(); i += 1) {
                var decl = stmts.declarations.get(i)
                var sym = context.checker.createDeclSymbol(decl)

                // make sure every import of this module's symbol
                // has the new symbol we just created
                if(sym) {
                    for(var i = 0; i < module.importedBy.size(); i += 1) {
                        var imp = module.importedBy.get(i)
                        imp.module.importModuleSymbol(module, imp.alias, sym, sym.name, imp.isUsing)
                    }
                }
            }
        }
    }

    return ape_object_make_bool(true)
}

func ApeReplaceDeclaration(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }

    var module = context.pp.lita.modules.get(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleStmt = module.ast

    var original = StringViewInit(code)
    var emitCode = original.copy(context.pp.lita.allocator)

    var parser = ParserInit(moduleStmt.startPos.filename, emitCode.buffer, context.pp.lita)
    var stmts = parser.parseModule()

    if(stmts) {
        if(stmts.declarations.size()) {
            moduleStmt.declarations.addAll(stmts.declarations)

            context.checker.enterModule(module)
            defer context.checker.leaveModule()

            for(var i = 0; i < stmts.declarations.size(); i += 1) {
                var decl = stmts.declarations.get(i)
                var sym = context.checker.getTypeByName(decl.name.asString())
                if(!sym) {
                    context.pp.lita.result.addError(context.comp.startPos, "symbol '%s' not found for replacement", decl.name.asString())
                    return ape_object_make_null()
                }

                sym.decl = decl
                decl.sym = sym
            }
        }
    }

    return ape_object_make_bool(true)
}


func ApeGetInputModuleFilename(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var moduleFilename = context.pp.lita.options.inputFile
    var mainModule = context.pp.lita.modules.get(moduleFilename)
    if(!mainModule) {
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, moduleFilename)
}

func ApeGetCurrentModuleFilename(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var moduleFilename = context.comp.startPos.filename
    var mainModule = context.pp.lita.modules.get(moduleFilename)
    if(!mainModule) {
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, moduleFilename)
}


func ApeGetMainSymbol(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var mainEntry = context.checker.mainEntry
    if(!mainEntry) {
        return ape_object_make_null()
    }

    return context.pp.declToApe(mainEntry)
}

func ApeAstInsert(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_EXTERNAL, ape_object_type.APE_OBJECT_STRING,  ape_object_type.APE_OBJECT_NUMBER)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var astPtr = ape_object_get_external(args[0])
    if(!astPtr) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty ast node")
        return ape_object_make_null()
    }

    var code = ape_object_get_string(args[1]) as (*const char)
    if(!code) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty code buffer")
        return ape_object_make_null()
    }


    var index = ape_object_get_number(args[2]) as (i32)

    var astNode = astPtr as (*Node)

    var parser = ParserInit(astNode.startPos.filename, code, context.pp.lita)
    var stmt = parser.statement()

    AstInsert(astNode, stmt, index, context.pp.lita.allocator)
    return ape_object_make_null()
}


func ApeAddImport(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    //@static var moduleNameIndex: i32;

    var context = data as (*CallContext)
    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }


    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var module = context.pp.lita.modules.get(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var moduleToImport = ape_object_get_string(args[1]) as (*const char)
    if(!moduleToImport) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module to import name")
        return ape_object_make_null()
    }

    // don't import to yourself
    if(strcmp(moduleName, moduleToImport) == 0) {
        return ape_object_make_null()
    }

    var importModule = context.pp.lita.modules.get(moduleToImport)
    if(!importModule) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleToImport)
        return ape_object_make_null()
    }

    var alias = AstAddImport(context.pp.lita, context.checker, module, importModule)
    if(!alias) {
        // this is already being imported and doesn't have an alias
        return ape_object_make_null()
    }

    return ape_object_make_string(ape, alias)
}


func ApeSetMainSymbol(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    if(!ape_check_argsx(ape, true, argc, args, ape_object_type.APE_OBJECT_STRING, ape_object_type.APE_OBJECT_STRING)) {
        context.logErrors()
        return ape_object_make_null()
    }

    var moduleName = ape_object_get_string(args[0]) as (*const char)
    if(!moduleName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty module filename")
        return ape_object_make_null()
    }

    var module = context.pp.lita.modules.get(moduleName)
    if(!module) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid module: '%s'", moduleName)
        return ape_object_make_null()
    }

    var symbolName = ape_object_get_string(args[1]) as (*const char)
    if(!symbolName) {
        context.pp.lita.result.addError(context.comp.startPos, "invalid empty symbol name")
        return ape_object_make_null()
    }

    var sym = module.getType(symbolName)
    if(!sym) {
        context.pp.lita.result.addError(context.comp.startPos, "can not find symbol '%s' in module: '%s'", symbolName, moduleName)
        return ape_object_make_null()
    }

    if(sym.kind != SymbolKind.FUNC) {
        context.pp.lita.result.addError(context.comp.startPos, "can not make symbol '%s' a main entry point because it isn't a function", symbolName)
        return ape_object_make_null()
    }

    context.checker.mainEntry = sym
    return ape_object_make_bool(true)
}


func ApeGetSymbolsToTest(ape: *ape_t, data: *void, argc: i32, args: *ape_object_t) : ape_object_t {
    var context = data as (*CallContext)

    var results = ape_object_make_array(ape)
    if(!context.pp.lita.options.testsOnly) {
        return results
    }

    // if we are testing by regex, test each function with @test attribute
    if(context.pp.lita.options.testsRegex) {
        var all = strcmp(context.pp.lita.options.testsRegex, ".*") == 0
        var pattern = RegexCompile(context.pp.lita.options.testsRegex)

        for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
            var sym = context.checker.symbolFuncs.get(i)
            if(sym.kind == SymbolKind.FUNC && sym.decl.hasNote("test")) {
                if(all) {
                    var declObj = context.pp.declToApe(sym)
                    ape_object_add_array_value(results, declObj)
                }
                else {
                    var note = sym.decl.getNote("test")
                    for(var i = 0; i < note.attributes.size(); i += 1) {
                        var att = note.attributes.get(i)
                        var matchlength = 0

                        if(pattern.match(att.asString(), &matchlength) > -1) {
                            var declObj = context.pp.declToApe(sym)
                            ape_object_add_array_value(results, declObj)
                            break
                        }
                    }
                }
            }
        }
    }
    // otherwise we are just testing the input file's tests
    else {
        var moduleName = context.pp.lita.options.inputFile
        var mainModule = context.pp.lita.modules.get(moduleName)
        if(!mainModule) {
            return results;
        }

        // iterate thru all symbols, this way we are deterministic in our output
        for(var i = 0; i < context.checker.symbolFuncs.size(); i += 1) {
            var sym = context.checker.symbolFuncs.get(i)
            if(sym.declared == mainModule && sym.kind == SymbolKind.FUNC && sym.decl.hasNote("test")) {
                var declObj = context.pp.declToApe(sym)
                ape_object_add_array_value(results, declObj)
            }
        }
    }

    return results
}


public func (this: *Preprocessor) runCompStmt(comp: *CompStmt) : bool {
    if(!comp) return false

    return this.runCode(comp.expr)
}

public func (this: *Preprocessor) runCode(sourceCode: *const char) : bool {
    var lita = Lita{}
    defer lita.free()

//printf("Lita code: \n%s\n", sourceCode)

    var options:LitaOptions = *this.lita.options
    options.maxMemory = 20 * MiB

    lita.init(options)

    //var parser = ParserInit("<compile-time>", sourceCode, lita)
    //var ast = parser.parseModule()

    var module = NewModule(lita, "<compile-time>")
    module.text = sourceCode as (*char)

    ParseModule(lita, module, SrcPos{})

    if(!lita.typeCheck(module)) {
        goto err;
    }

    var cCode = lita.genC(module)

    var state = tcc_new()
    defer if(state) tcc_delete(state)

    // Bind state
    //tcc_add_symbol(state, "symbols", this.)

    tcc_set_error_func(state, this, LibtccErrorFunc)
    tcc_set_output_type(state, TCC_OUTPUT_MEMORY)

    if(tcc_compile_string(state, cCode) < 0) {
        return false
    }

    tcc_relocate(state, TCC_RELOCATE_AUTO)

    var mainFn = tcc_get_symbol(state, "main")
    if(mainFn) {
        var function = mainFn as (func() : void)
        function()
    }

    return true

err:
    this.lita.result.errors.addAll(lita.result.errors)
    printf("Errors %d...\n", lita.result.errors.size())
    var sb = StringBufferInit(1024)
    defer sb.free()

    if(!lita.result.errors.empty()) {
        for(var i = 0; i < lita.result.errors.size(); i += 1) {
            PrintError(sb, lita.result.errors.get(i))

            printf("%s\n", sb.cStr())
            sb.clear()
        }
        printf("Total errors: %d\n", lita.result.errors.size())
    }
    return false
}