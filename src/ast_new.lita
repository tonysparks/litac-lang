import "std/mem"
import "std/array"
import "std/bucket_list"
import "std/string_view"
import "std/assert"

import "ast"
import "lex"
import "symbols"
import "types"
import "common"
import "module"
import "lita"
import "intern"


public struct TypeSpecAllocator {
    allocator: *const Allocator
    typeSpecs: BucketList<TypeSpec>
}

public func (this: *TypeSpecAllocator) init(allocator: *const Allocator) {
    this.allocator = allocator
    this.typeSpecs.init(1024, allocator)
}

public func (this: *TypeSpecAllocator) free() {
    this.typeSpecs.free()
}

public func (this: *TypeSpecAllocator) clear() {
    this.typeSpecs.clear()
}

public func (this: *TypeSpecAllocator) alloc() : *TypeSpec {
    this.typeSpecs.add(TypeSpec{})
    return this.typeSpecs.lastPtr()
}


public func NewVoidTypeSpec(pos: SrcPos, typeAllocator: *TypeSpecAllocator) : *TypeSpec {
    var voidSpec = NewTypeSpec(TypeSpecKind.NAME, pos, typeAllocator)
    voidSpec.name = VOID
    return voidSpec as (*TypeSpec)
}

public func NewNameTypeSpecIntern(pos: SrcPos, name: InternedString, typeAllocator: *TypeSpecAllocator) : *TypeSpec {
    var result = typeAllocator.alloc()
    result.kind = TypeSpecKind.NAME
    result.pos = pos
    result.base = null
    result.name = name
    result.genericArgs.init(0, typeAllocator.allocator)
    return result
}

public func NewTypeSpec(kind: TypeSpecKind, pos: SrcPos, typeAllocator: *TypeSpecAllocator) : *TypeSpec {
    switch(kind) {
        case TypeSpecKind.NONE: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.NONE
            result.pos = pos
            result.base = null
            return result
        }
        case TypeSpecKind.ARRAY: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.ARRAY
            result.pos = pos
            result.base = null
            result.numElements = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.PTR: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.PTR
            result.pos = pos
            result.base = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.CONST: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.CONST
            result.pos = pos
            result.base = null
            return result as (*TypeSpec)
        }
        case TypeSpecKind.NAME: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.NAME
            result.pos = pos
            result.base = null
            result.name = EMPTY_STR
            result.genericArgs.init(0, typeAllocator.allocator)
            return result as (*TypeSpec)
        }
        case TypeSpecKind.FUNC_PTR: {
            var result = typeAllocator.alloc()
            result.kind = TypeSpecKind.FUNC_PTR
            result.pos = pos
            result.base = null
            result.args.init(0, typeAllocator.allocator)
            result.ret = null
            result.hasVarargs = false
            result.genericParams.init(0, typeAllocator.allocator)
            return result as (*TypeSpec)
        }
        default: {
            Panic("Invalid TypeSpecKind: '%d'\n", kind)
        }
    }

    return null
}

public func NewImportDecl(startPos: SrcPos,
                          endPos: SrcPos,
                          name: Identifier,
                          alias: Identifier,
                          isUsing: bool,
                          allocator: *const Allocator) : *Decl {
    var decl = new<ImportDecl>(allocator)
    decl.kind = StmtKind.IMPORT_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.alias = alias
    decl.isUsing = isUsing

    return decl as (*Decl)
}

public func NewVarDecl(startPos: SrcPos,
                       endPos: SrcPos,
                       name: Identifier,
                       type: *TypeSpec,
                       expr: *Expr,
                       allocator: *const Allocator) : *Decl {
    var decl = new<VarDecl>(allocator)
    decl.kind = StmtKind.VAR_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.typeSpec = type
    decl.expr = expr

    return decl as (*Decl)
}

public func NewFuncDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         genericParams: Array<GenericParam>,
                         params: *ParametersStmt,
                         body: *Stmt,
                         returnType: *TypeSpec,
                         flags: i32,
                         allocator: *const Allocator) : *Decl {
    var decl = new<FuncDecl>(allocator)
    decl.kind = StmtKind.FUNC_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.genericParams = genericParams
    decl.params = decl.node.becomeParentOf(params)
    decl.body = decl.node.becomeParentOf(body)
    decl.returnType = returnType
    decl.flags = flags

    return decl as (*Decl)
}

public func NewAggregateDecl(startPos: SrcPos,
                      endPos: SrcPos,
                      kind: StmtKind,
                      name: Identifier,
                      genericParams: Array<GenericParam>,
                      fields: Array<FieldStmt>,
                      flags: i32,
                      allocator: *const Allocator) : *Decl {
    var decl = new<AggregateDecl>(allocator)
    decl.kind = kind
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.genericParams = genericParams
    decl.fields = fields
    decl.flags = flags

    for(var i = 0; i < fields.size(); i += 1) {
        var field = fields.get(i)
        switch(field.kind) {
            case StmtKind.ENUM_FIELD_DECL: {
                decl.node.becomeParentOf(field.enumField)
                break
            }
            case StmtKind.UNION_FIELD_DECL:
            case StmtKind.STRUCT_FIELD_DECL: {
                decl.node.becomeParentOf(field.aggregateField)
                break
            }
            case StmtKind.TRAIT_FIELD_DECL: {
                decl.node.becomeParentOf(field.traitField)
                break
            }
            case StmtKind.VAR_FIELD_DECL: {
                decl.node.becomeParentOf(field.varField)
                break
            }
            case StmtKind.POISON_EXPR: {
                decl.node.becomeParentOf(field.poisonField)
                break;
            }
            default: {
                assert(false)
            }
        }
    }

    return decl as (*Decl)
}

public func NewStructDecl(startPos: SrcPos,
                          endPos: SrcPos,
                          name: Identifier,
                          genericParams: Array<GenericParam>,
                          fields: Array<FieldStmt>,
                          flags: i32,
                          allocator: *const Allocator) : *Decl {
    return NewAggregateDecl(startPos, endPos, StmtKind.STRUCT_DECL,
                                name, genericParams, fields, flags, allocator)
}

public func NewUnionDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         genericParams: Array<GenericParam>,
                         fields: Array<FieldStmt>,
                         flags: i32,
                         allocator: *const Allocator) : *Decl {

    return NewAggregateDecl(startPos, endPos, StmtKind.UNION_DECL,
                                name, genericParams, fields, flags, allocator)
}

public func NewTraitDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         genericParams: Array<GenericParam>,
                         fields: Array<FieldStmt>,
                         flags: i32,
                         allocator: *const Allocator) : *Decl {

    return NewAggregateDecl(startPos, endPos, StmtKind.TRAIT_DECL,
                                name, genericParams, fields, flags, allocator)
}

public func NewEnumDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         fields: Array<*EnumFieldEntryDecl>,
                         allocator: *const Allocator) : *Decl {
    var decl = new<EnumDecl>(allocator)
    decl.kind = StmtKind.ENUM_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.fields = *decl.node.becomeParentOfChildren(fields)

    return decl as (*Decl)
}

public func NewTypedefDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         genericParams: Array<GenericParam>,
                         type: *TypeSpec,
                         allocator: *const Allocator) : *Decl {
    var decl = new<TypedefDecl>(allocator)
    decl.kind = StmtKind.TYPEDEF_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.genericParams = genericParams
    decl.type = type

    return decl as (*Decl)
}


public func NewNoteDecl(startPos: SrcPos,
                        endPos: SrcPos,
                        name: Identifier,
                        fields: Array<FieldStmt>,
                        allocator: *const Allocator) : *Decl {
    return NewAggregateDecl(startPos, endPos, StmtKind.NOTE_DECL,
                                name, Array<GenericParam>{}, fields, 0, allocator)
}


public func NewParameterDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         name: Identifier,
                         type: *TypeSpec,
                         defaultExpr: *Expr,
                         isUsing: bool,
                         allocator: *const Allocator) : *Decl {
    var decl = new<ParameterDecl>(allocator)
    decl.kind = StmtKind.PARAM_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.name = name
    decl.type = type
    decl.defaultExpr = decl.node.becomeParentOf(defaultExpr)
    decl.attributes.isUsing = isUsing

    return decl as (*Decl)
}

public func NewNotesDecl(startPos: SrcPos,
                         endPos: SrcPos,
                         notes: Array<*NoteStmt>,
                         allocator: *const Allocator) : *Decl {
    var decl = new<NotesDecl>(allocator)
    decl.kind = StmtKind.NOTES_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.notes = notes
    return decl as (*Decl)
}

public func NewBuiltinDecl(startPos: SrcPos,
                           endPos: SrcPos,
                           type: *TypeInfo,
                           allocator: *const Allocator) : *Decl {
    var decl = new<NativeDecl>(allocator)
    decl.kind = StmtKind.NATIVE_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    decl.typeInfo = type
    return decl as (*Decl)
}

public func NewPoisonDecl(startPos: SrcPos,
                          endPos: SrcPos,
                          allocator: *const Allocator) : *Decl {
    var decl = new<PoisonDecl>(allocator)
    decl.kind = StmtKind.POISON_DECL;
    decl.startPos = startPos
    decl.endPos = endPos
    return decl as (*Decl)
}

public func NewTernaryExpr(startPos: SrcPos,
                           endPos: SrcPos,
                           cond: *Expr,
                           then: *Expr,
                           other: *Expr,
                           allocator: *const Allocator) : *Expr {
    var expr = new<TernaryExpr>(allocator)
    expr.kind = StmtKind.TERNARY_EXPR;
    expr.startPos = startPos
    expr.endPos = endPos
    expr.cond = expr.node.becomeParentOf(cond)
    expr.then = expr.node.becomeParentOf(then)
    expr.other = expr.node.becomeParentOf(other)

    return expr as (*Expr)
}

public func NewBinaryExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          left: *Expr,
                          operator: TokenType,
                          right: *Expr,
                          allocator: *const Allocator) : *Expr {
    var binExpr = new<BinaryExpr>(allocator)
    binExpr.kind = StmtKind.BINARY_EXPR;
    binExpr.startPos = startPos
    binExpr.left = binExpr.node.becomeParentOf(left)
    binExpr.operator = operator
    binExpr.right = binExpr.node.becomeParentOf(right)
    binExpr.endPos = endPos

    return binExpr as (*Expr)
}

public func NewUnaryExpr(startPos: SrcPos,
                         endPos: SrcPos,
                         operator: TokenType,
                         expr: *Expr,
                         allocator: *const Allocator) : *Expr {
    var unaryExpr = new<UnaryExpr>(allocator)
    unaryExpr.kind = StmtKind.UNARY_EXPR;
    unaryExpr.startPos = startPos
    unaryExpr.unaryExpr = unaryExpr.node.becomeParentOf(expr)
    unaryExpr.operator = operator
    unaryExpr.endPos = endPos

    return unaryExpr as (*Expr)
}

public func NewInitExpr(startPos: SrcPos,
                        endPos: SrcPos,
                        type: *TypeSpec,
                        arguments: Array<*InitArgExpr>,
                        allocator: *const Allocator) : *Expr {
    var initExpr = new<InitExpr>(allocator)
    initExpr.kind = StmtKind.INIT_EXPR
    initExpr.startPos = startPos
    initExpr.endPos = endPos
    initExpr.type = type
    initExpr.arguments = arguments
    initExpr.node.becomeParentOfChildren(initExpr.arguments)

    return initExpr as (*Expr)
}

public func NewFuncCallExpr(startPos: SrcPos,
                            endPos: SrcPos,
                            object: *Expr,
                            arguments: Array<CallArg>,
                            genericArgs: Array<*TypeSpec>,
                            allocator: *const Allocator) : *Expr {
    var expr = new<FuncCallExpr>(allocator)
    expr.kind = StmtKind.FUNC_CALL_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.genericArgs = genericArgs
    for(var i = 0; i < arguments.size(); i+= 1) {
        expr.node.becomeParentOf(arguments.get(i).argExpr)
    }
    expr.arguments = arguments
    return expr as (*Expr)
}

public func NewSubscriptGetExpr(startPos: SrcPos,
                                endPos: SrcPos,
                                object: *Expr,
                                index: *Expr,
                                allocator: *const Allocator) : *Expr {
    var expr = new<SubscriptGetExpr>(allocator)
    expr.kind = StmtKind.SUBSCRIPT_GET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.index = expr.node.becomeParentOf(index)

    return expr as (*Expr)
}

public func NewSubscriptSetExpr(startPos: SrcPos,
                                endPos: SrcPos,
                                object: *Expr,
                                index: *Expr,
                                operator: TokenType,
                                value: *Expr,
                                allocator: *const Allocator) : *Expr {
    var expr = new<SubscriptSetExpr>(allocator)
    expr.kind = StmtKind.SUBSCRIPT_SET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.index = expr.node.becomeParentOf(index)
    expr.operator = operator
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewGetExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       object: *Expr,
                       field: *IdentifierExpr,
                       allocator: *const Allocator) : *Expr {
    var expr = new<GetExpr>(allocator)
    expr.kind = StmtKind.GET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.field = expr.node.becomeParentOf(field) as (*IdentifierExpr)

    return expr as (*Expr)
}

public func NewSetExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       object: *Expr,
                       field: *IdentifierExpr,
                       operator: TokenType,
                       value: *Expr,
                       allocator: *const Allocator) : *Expr {
    var expr = new<SetExpr>(allocator)
    expr.kind = StmtKind.SET_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.object = expr.node.becomeParentOf(object)
    expr.field = expr.node.becomeParentOf(field) as (*IdentifierExpr)
    expr.operator = operator
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewIdentifierExpr(startPos: SrcPos,
                              endPos: SrcPos,
                              type: *TypeSpec,
                              allocator: *const Allocator) : *Expr {
    var expr = new<IdentifierExpr>(allocator)
    expr.kind = StmtKind.IDENTIFIER_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.type = type

    return expr as (*Expr)
}

public func NewTypeIdentifierExpr(startPos: SrcPos,
                                  endPos: SrcPos,
                                  type: *TypeSpec,
                                  allocator: *const Allocator) : *Expr {
    var expr = new<TypeIdentifierExpr>(allocator)
    expr.kind = StmtKind.TYPE_IDENTIFIER_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.type = type

    return expr as (*Expr)
}

public func NewCastExpr(startPos: SrcPos,
                       endPos: SrcPos,
                       castExpr: *Expr,
                       castTo: *TypeSpec,
                       allocator: *const Allocator) : *Expr {
    var expr = new<CastExpr>(allocator)
    expr.kind = StmtKind.CAST_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.exprToCast = expr.node.becomeParentOf(castExpr)
    expr.castTo = castTo

    return expr as (*Expr)
}

public func NewArrayDesignationExpr(startPos: SrcPos,
                                    endPos: SrcPos,
                                    index: *Expr,
                                    value: *Expr,
                                    allocator: *const Allocator) : *Expr {
    var expr = new<ArrayDesignationExpr>(allocator)
    expr.kind = StmtKind.ARRAY_DESIGNATION_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.index = expr.node.becomeParentOf(index)
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewInitArgExpr(startPos: SrcPos,
                           endPos: SrcPos,
                           fieldName: Identifier,
                           position: i32,
                           value: *Expr,
                           allocator: *const Allocator) : *Expr {
    var expr = new<InitArgExpr>(allocator)
    expr.kind = StmtKind.INIT_ARG_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.fieldName = fieldName
    expr.argPosition = position
    expr.value = expr.node.becomeParentOf(value)

    return expr as (*Expr)
}

public func NewBooleanExpr(startPos: SrcPos,
                           endPos: SrcPos,
                           boolean: bool,
                           allocator: *const Allocator) : *Expr {
    var expr = new<BooleanExpr>(allocator)
    expr.kind = StmtKind.BOOLEAN_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.boolean = boolean
    return expr as (*Expr)
}

public func NewNullExpr(startPos: SrcPos,
                        endPos: SrcPos,
                        allocator: *const Allocator) : *Expr {
    var expr = new<NullExpr>(allocator)
    expr.kind = StmtKind.NULL_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    return expr as (*Expr)
}

public func NewNumberExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          number: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<NumberExpr>(allocator)
    expr.kind = StmtKind.NUMBER_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.number = number
    return expr as (*Expr)
}

public func NewStringExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          string: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<StringExpr>(allocator)
    expr.kind = StmtKind.STRING_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.string = string
    return expr as (*Expr)
}


public func NewCharExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          character: Token,
                          allocator: *const Allocator) : *Expr {
    var expr = new<CharExpr>(allocator)
    expr.kind = StmtKind.CHAR_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.character = character
    return expr as (*Expr)
}

public func NewGroupExpr(startPos: SrcPos,
                         endPos: SrcPos,
                         groupedExpr: *Expr,
                         allocator: *const Allocator) : *Expr {
    var expr = new<GroupExpr>(allocator)
    expr.kind = StmtKind.GROUP_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.groupedExpr = expr.node.becomeParentOf(groupedExpr)

    return expr as (*Expr)
}

public func NewArrayInitExpr(startPos: SrcPos,
                             endPos: SrcPos,
                             type: *TypeSpec,
                             values: Array<*Expr>,
                             allocator: *const Allocator) : *Expr {
    var expr = new<ArrayInitExpr>(allocator)
    expr.kind = StmtKind.ARRAY_INIT_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.type = type
    expr.values = *expr.node.becomeParentOfChildren(values)

    assert(expr.type.kind == TypeSpecKind.ARRAY)

    // if we are relying on the values to determine the
    // size, create the AST number
    var arrayType = expr.type
    if(!arrayType.numElements && !expr.values.empty()) {
        var token = Token {
            .type = TokenType.USIZE,
            .typeInfo = &USIZE_TYPE,
            .pos = startPos, // TODO: fix this...
            .value = Value {
                .intValue = expr.values.size()
            }
        }
        arrayType.numElements = NewNumberExpr(startPos, startPos, token, allocator)
    }

    return expr as (*Expr)
}

public func NewSizeOfExpr(startPos: SrcPos,
                         endPos: SrcPos,
                         sizeOfExpr: *Expr,
                         allocator: *const Allocator) : *Expr {
    var expr = new<SizeOfExpr>(allocator)
    expr.kind = StmtKind.SIZE_OF_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.sizeOfExpr = expr.node.becomeParentOf(sizeOfExpr)

    return expr as (*Expr)
}


public func NewTypeOfExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          typeOfExpr: *Expr,
                          type: *TypeSpec,
                          allocator: *const Allocator) : *Expr {
    var expr = new<TypeOfExpr>(allocator)
    expr.kind = StmtKind.TYPE_OF_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.typeOfExpr = expr.node.becomeParentOf(typeOfExpr)
    expr.type = type

    return expr as (*Expr)
}

public func NewOffsetOfExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          type: *TypeSpec,
                          field: Identifier,
                          allocator: *const Allocator) : *Expr {
    var expr = new<OffsetOfExpr>(allocator)
    expr.kind = StmtKind.OFFSET_OF_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    expr.type = type
    expr.field = field

    return expr as (*Expr)
}

public func NewPoisonExpr(startPos: SrcPos,
                          endPos: SrcPos,
                          allocator: *const Allocator) : *Expr {
    var expr = new<PoisonExpr>(allocator)
    expr.kind = StmtKind.POISON_EXPR
    expr.startPos = startPos
    expr.endPos = endPos
    return expr as (*Expr)
}

public func NewModuleStmt(startPos: SrcPos,
                          endPos: SrcPos,
                          imports: Array<*ImportDecl>,
                          notes: Array<*NoteStmt>,
                          declarations: Array<*Decl>,
                          allocator: *const Allocator) : *Stmt {
    var stmt = new<ModuleStmt>(allocator)
    stmt.kind = StmtKind.MODULE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.imports = imports
    stmt.notes = notes
    stmt.declarations = declarations
    return stmt as (*Stmt)
}

public func NewCompStmt(startPos: SrcPos,
                        endPos: SrcPos,
                        type: InternedString,
                        expr: StringView,
                        body: Array<*Stmt>,
                        end: *CompStmt,
                        isScriptLoad: bool,
                        isStatic: bool,
                        allocator: *const Allocator) : *Stmt {
    var stmt = new<CompStmt>(allocator)
    stmt.kind = StmtKind.COMP_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.type = type
    stmt.expr = expr
    stmt.end = end
    stmt.body = body
    stmt.evaluatedStmt = null
    stmt.isScriptLoad = isScriptLoad
    stmt.isStatic = isStatic
    return stmt as (*Stmt)
}

public func NewFuncBodyStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         stmts: Array<*Stmt>,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<BlockStmt>(allocator)
    stmt.kind = StmtKind.FUNC_BODY_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.stmts = *stmt.node.becomeParentOfChildren(stmts)
    return stmt as (*Stmt)
}


public func NewBlockStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         stmts: Array<*Stmt>,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<BlockStmt>(allocator)
    stmt.kind = StmtKind.BLOCK_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.stmts = *stmt.node.becomeParentOfChildren(stmts)
    return stmt as (*Stmt)
}

public func NewIfStmt(startPos: SrcPos,
                      endPos: SrcPos,
                      cond: *Expr,
                      then: *Stmt,
                      other: *Stmt,
                      allocator: *const Allocator) : *Stmt {
    var stmt = new<IfStmt>(allocator)
    stmt.kind = StmtKind.IF_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.then = stmt.node.becomeParentOf(then)
    stmt.elseStmt = stmt.node.becomeParentOf(other)
    return stmt as (*Stmt)
}


public func NewWhileStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         cond: *Expr,
                         body: *Stmt,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<WhileStmt>(allocator)
    stmt.kind = StmtKind.WHILE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.body = stmt.node.becomeParentOf(body)
    return stmt as (*Stmt)
}

public func NewDoWhileStmt(startPos: SrcPos,
                           endPos: SrcPos,
                           cond: *Expr,
                           body: *Stmt,
                           allocator: *const Allocator) : *Stmt {
    var stmt = new<DoWhileStmt>(allocator)
    stmt.kind = StmtKind.DO_WHILE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.body = stmt.node.becomeParentOf(body)
    return stmt as (*Stmt)
}

public func NewForStmt(startPos: SrcPos,
                       endPos: SrcPos,
                       init: *Stmt,
                       cond: *Expr,
                       post: *Stmt,
                       body: *Stmt,
                       allocator: *const Allocator) : *Stmt {
    var stmt = new<ForStmt>(allocator)
    stmt.kind = StmtKind.FOR_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.init = stmt.node.becomeParentOf(init)
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.post = stmt.node.becomeParentOf(post)
    stmt.body = stmt.node.becomeParentOf(body)
    return stmt as (*Stmt)
}

public func NewSwitchCaseStmt(startPos: SrcPos,
                              endPos: SrcPos,
                              cond: *Expr,
                              body: *Stmt,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<SwitchCaseStmt>(allocator)
    stmt.kind = StmtKind.SWITCH_CASE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.body = stmt.node.becomeParentOf(body)
    return stmt as (*Stmt)
}

public func NewSwitchStmt(startPos: SrcPos,
                              endPos: SrcPos,
                              cond: *Expr,
                              cases: Array<*SwitchCaseStmt>,
                              defaultStmt: *Stmt,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<SwitchStmt>(allocator)
    stmt.kind = StmtKind.SWITCH_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.cond = stmt.node.becomeParentOf(cond)
    stmt.cases = *stmt.node.becomeParentOfChildren(cases)
    stmt.defaultStmt = stmt.node.becomeParentOf(defaultStmt)
    return stmt as (*Stmt)
}

public func NewBreakStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<BreakStmt>(allocator)
    stmt.kind = StmtKind.BREAK_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewContinueStmt(startPos: SrcPos,
                            endPos: SrcPos,
                            allocator: *const Allocator) : *Stmt {
    var stmt = new<ContinueStmt>(allocator)
    stmt.kind = StmtKind.CONTINUE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewReturnStmt(startPos: SrcPos,
                          endPos: SrcPos,
                          expr: *Expr,
                          allocator: *const Allocator) : *Stmt {
    var stmt = new<ReturnStmt>(allocator)
    stmt.kind = StmtKind.RETURN_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.expr = stmt.node.becomeParentOf(expr)
    return stmt as (*Stmt)
}

public func NewDeferStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         defered: *Stmt,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<DeferStmt>(allocator)
    stmt.kind = StmtKind.DEFER_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.deferedStmt = stmt.node.becomeParentOf(defered)
    return stmt as (*Stmt)
}

public func NewGotoStmt(startPos: SrcPos,
                        endPos: SrcPos,
                        label: Identifier,
                        allocator: *const Allocator) : *Stmt {
    var stmt = new<GotoStmt>(allocator)
    stmt.kind = StmtKind.GOTO_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.label = label
    return stmt as (*Stmt)
}

public func NewLabelStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         label: Identifier,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<LabelStmt>(allocator)
    stmt.kind = StmtKind.LABEL_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.label = label
    return stmt as (*Stmt)
}

public func NewNoteStmt(startPos: SrcPos,
                        endPos: SrcPos,
                        type: *TypeSpec,
                        arguments: Array<CallArg>,
                        allocator: *const Allocator) : *Stmt {
    var stmt = new<NoteStmt>(allocator)
    stmt.kind = StmtKind.NOTE_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.type = type
    stmt.arguments = arguments
    return stmt as (*Stmt)
}

public func NewEmptyStmt(startPos: SrcPos,
                         endPos: SrcPos,
                         allocator: *const Allocator) : *Stmt {
    var stmt = new<EmptyStmt>(allocator)
    stmt.kind = StmtKind.EMPTY_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    return stmt as (*Stmt)
}

public func NewParametersStmt(startPos: SrcPos,
                              endPos: SrcPos,
                              params: Array<*ParameterDecl>,
                              isVararg: bool,
                              allocator: *const Allocator) : *Stmt {
    var stmt = new<ParametersStmt>(allocator)
    stmt.kind = StmtKind.PARAMETERS_STMT
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.params = *stmt.node.becomeParentOfChildren(params)
    stmt.isVararg = isVararg
    return stmt as (*Stmt)
}


public func NewVarFieldDecl(startPos: SrcPos,
                            endPos: SrcPos,
                            fieldName: Identifier,
                            type: *TypeSpec,
                            attributes: Attributes,
                            defaultExpr: *Expr,
                            allocator: *const Allocator) : *Stmt {
    var stmt = new<VarFieldDecl>(allocator)
    stmt.kind = StmtKind.VAR_FIELD_DECL
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.name = fieldName
    stmt.type = type
    stmt.attributes = attributes
    stmt.defaultExpr = stmt.node.becomeParentOf(defaultExpr)
    return stmt as (*Stmt)
}

public func NewTraitFieldDecl(startPos: SrcPos,
                            endPos: SrcPos,
                            fieldName: Identifier,
                            type: *TypeSpec,
                            attributes: Attributes,
                            allocator: *const Allocator) : *Stmt {
    var stmt = new<TraitFieldDecl>(allocator)
    stmt.kind = StmtKind.TRAIT_FIELD_DECL
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.name = fieldName
    stmt.type = type
    stmt.attributes = attributes
    return stmt as (*Stmt)
}


public func NewEnumFieldEntryDecl(startPos: SrcPos,
                            endPos: SrcPos,
                            fieldName: Identifier,
                            value: *Expr,
                            attributes: Attributes,
                            allocator: *const Allocator) : *Stmt {
    var stmt = new<EnumFieldEntryDecl>(allocator)
    stmt.kind = StmtKind.ENUM_FIELD_ENTRY_DECL
    stmt.startPos = startPos
    stmt.endPos = endPos
    stmt.name = fieldName
    stmt.attributes = attributes
    stmt.value = stmt.node.becomeParentOf(value)
    return stmt as (*Stmt)
}


@test
func typeSpecAllocator() {
    var specs = TypeSpecAllocator{}
    specs.init(defaultAllocator)

    var x = specs.alloc()
    x.name = InternedString{}
    specs.free()
}
