import "std/assert"
import "std/libc"
import "std/mem"
import "std/array"
import "std/map"
import "std/string_buffer"
import "std/string_view"
import "std/string"
import "std/system"

import "checker"
import "symbols"
import "phase_result"
import "module"
import "lex"
import "lita"
import "parser"
import "ast"
import "error_codes"
import "ast_copy"
import "intern"

public func Instrument(lita: *Lita, checker: *TypeChecker) {

    var filename = [MAX_PATH]char{0}
    var moduleName = StringViewInit("profile")
    if(!FindModulePath(lita, moduleName, filename)) {
        lita.result.addError(SrcPos{}, "could not find module 'profile' on the system path.")
        return;
    }

    var module = lita.getModule(filename)
    if(!module) {
        return;
    }

    var sb = StringBufferInit(2048*2, lita.allocator)
    var profileAll = true

    // creating the Profile tags
    sb.append("@generated public enum ProfileTag {\n")
    var numOfProfiled = 0
    for(var i = 0; i < checker.symbolFuncs.size(); i += 1) {
        var sym = checker.symbolFuncs.get(i)
        if(sym.declared == module) {
            continue
        }

        if(sym.flags & (SymbolFlags.IS_FOREIGN|SymbolFlags.IS_MAIN|SymbolFlags.IS_TEST)) {
            continue
        }

        if(sym.decl.hasNote("no_profile")) {
            continue
        }

        if(profileAll || sym.decl.hasNote("profile")) {
            sb.append("    %.*s__%.*s,\n", sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
            numOfProfiled += 1
        }
    }
    sb.append("    MAX_PROFILE_TAGS\n")
    sb.append("\n}\n")

    // Create the array of profile entries
    sb.append("@generated const profileEntries = [%d]ProfileEntry {\n", numOfProfiled)
    for(var i = 0; i < checker.symbolFuncs.size(); i += 1) {
        var sym = checker.symbolFuncs.get(i)
        if(sym.declared == module) {
            continue
        }

        if(sym.flags & (SymbolFlags.IS_FOREIGN|SymbolFlags.IS_MAIN|SymbolFlags.IS_TEST)) {
            continue
        }

        if(sym.decl.hasNote("no_profile")) {
            continue
        }

        if(profileAll || sym.decl.hasNote("profile")) {
            sb.append("""
                ProfileEntry {
                    .functionName = "%.*s::%.*s",
                    .count = 0_u64,
                    .startTime = 0_f64,
                    .totalTime = 0_f64,
                },
            """,  sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
        }
    }
    sb.append("\n}\n")

    var parser = ParserInit(module.id.filename, sb.cStr(), sb.length, module, lita)
    var stmts = parser.parseModule()
    if(stmts) {
        checker.enterModule(module)
        defer checker.leaveModule()

        // the ProfileTag
        {
            var tagDecl = stmts.declarations.get(0)
            assert(tagDecl.kind == StmtKind.ENUM_DECL)

            var existingDecl = module.getType(PROFILE_TAG)
            assert(existingDecl != null)

            tagDecl.sym = existingDecl
            existingDecl.decl = tagDecl
        }

        // the profileEntries
        {
            var entriesDecl = stmts.declarations.get(1)
            assert(entriesDecl.kind == StmtKind.CONST_DECL)

            var existingDecl = module.getType(PROFILE_ENTRIES)
            assert(existingDecl != null)

            entriesDecl.sym = existingDecl
            existingDecl.decl = entriesDecl
        }
    }


    sb = StringBufferInit(2048, lita.allocator)


    // Now inject each function with start/stop watch
    for(var i = 0; i < checker.symbolFuncs.size(); i += 1) {
        var sym = checker.symbolFuncs.get(i)
        if(sym.declared == module) {
            continue
        }

        if(sym.flags & (SymbolFlags.IS_FOREIGN|SymbolFlags.IS_MAIN|SymbolFlags.IS_TEST)) {
            continue
        }

        if(sym.decl.hasNote("no_profile")) {
            continue
        }

        if(profileAll || sym.decl.hasNote("profile")) {
            var alias = AstAddImport(lita, checker, sym.declared, module)
            if(alias) {
                sb.clear()
                sb.append("defer %s::StopWatch(%s::ProfileTag.%.*s__%.*s)\n", alias, alias, sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
                AstInsertText(sym.decl, StringClone(sb.cStr(), sb.length, module.allocator), 0, module, lita)

                sb.clear()
                sb.append("%s::StartWatch(%s::ProfileTag.%.*s__%.*s)\n", alias, alias, sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
                AstInsertText(sym.decl, StringClone(sb.cStr(), sb.length, module.allocator), 0, module, lita)

            }
            else {
                sb.clear()
                sb.append("defer StopWatch(ProfileTag.%.*s__%.*s)\n", sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
                AstInsertText(sym.decl, StringClone(sb.cStr(), sb.length, module.allocator), 0, module, lita)

                sb.clear()
                sb.append("StartWatch(ProfileTag.%.*s__%.*s)\n", sym.declared.id.name.length, sym.declared.id.name.buffer, sym.name.length, sym.name.buffer)
                AstInsertText(sym.decl, StringClone(sb.cStr(), sb.length, module.allocator), 0, module, lita)
            }
        }
    }
}