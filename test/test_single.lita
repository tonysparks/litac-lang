import "std/assert"
import "std/libc"

//import "test_module"

/*
import "type"
import "json"
import "string_buffer"
*/

/*
func MyFunc(a: i32) : f32 {
    return 4
}

typedef i32 as int;

struct X<T> {
    a: T
}

func (this: X<T>) name<T>() : T {
    return this.a
}

struct TestStruct {
    a: i32
}

enum MyEnum {
    X = 10,
    Y
}

const SIZE3 = 55
*/
/*
func toJson<T>(sb: *StringBuilder, type: T) {
}

func toJson_<T>(sb: *StringBuilder, type: T) {
    var typeid = typeof(:T)
    var typeInfo = getTypeInfo(typeid)
    var input: *void = (&type) as (*void)
    switch(typeInfo.kind) {
        case TypeKind.BOOL: {
            // TODO: *bool doesn't work with introspection????
           // var boolPtr = input as (*bool)
           // sb.append((*boolPtr) ? "true" : "false")
            break
        }
        case TypeKind.CHAR: {
            var charPtr = input as (*char)
            sb.appendChar((*charPtr) as (char))
            break
        }
        case TypeKind.I8:
        case TypeKind.U8:
        case TypeKind.I16:
        case TypeKind.U16:
        case TypeKind.I32: {
            var ptr = input as (*i32)
            sb.append("%llu", (*ptr) as (i32))
            break
        }
        case TypeKind.U32:
        case TypeKind.I64:
        case TypeKind.U64:
        case TypeKind.USIZE: {
            var sizePtr = input as (*usize)
            sb.append("%llu", (*sizePtr) as (usize))
            break
        }
        case TypeKind.F32: {
            var floatPtr = input as (*f32)
            sb.append("%.3f", (*floatPtr) as (f32))
            break
        }
        case TypeKind.F64: {
            var floatPtr = input as (*f64)
            sb.append("%.4f", (*floatPtr) as (f64))
            break
        }
        case TypeKind.NULL: {
            break
        }
        case TypeKind.STR: {
            var ptr = input as (*const char)
            if(ptr)  sb.append("\"%s\"", ptr)
            else     sb.append("null")

            break
        }
        case TypeKind.VOID: {
            break
        }
        case TypeKind.PTR: {
            break
        }
        case TypeKind.STRUCT: {
            var val = input as (T)
            var aggInfo = typeInfo.aggType
            for(var i = 0; i < aggInfo.numOfFields; i += 1) {
                if(i > 0) {
                    sb.append(",\n")
                }
                var field = aggInfo.fields[i]
                var fieldName = field.name
                var value = getFieldValue(any{.data = input, .id = typeid}, fieldName)
                //offsetof(T, fieldName)
                sb.append("\"%s\": ", field.name)
               // toJson(sb, value)
            }
            sb.append("\n")
            break
        }
        default: {
            sb.append("<not implemented>")
            break
        }
    }
}*/
//import "system"
@raw("""
#define MAX_PATH (260)
""");
@foreign const MAX_PATH: i32;
const SIZE3 = 55
const SIZE1C = 4
const SIZE2C = 8

func main(len:i32, args:**char) : i32 {
    const SIZE1 = 4
    const SIZE2 = 8

    const BUFFER_SIZE = (1024*10)
    var filename = [MAX_PATH]char{0}
    var filedata = [BUFFER_SIZE]char{0}

    assert(typeof(filedata) != typeof(filename))

    assert(typeof(:[4]i32) == typeof(:[SIZE1]i32))
    assert(typeof(:[4]i32) == typeof(:[SIZE1C]i32))

    var array = [4]char{0}
    assert(typeof(array) == typeof(:[4]char))
    assert(typeof(array) == typeof(:[SIZE1]char))
    assert(typeof(array) == typeof(:[SIZE1C]char))

    assert(typeof(:[4]i32) != typeof(:[SIZE2]i32))
    assert(typeof(:[4]i32) != typeof(:[SIZE2C]i32))

    assert(typeof(:[SIZE2]i32) != typeof(:[SIZE2]f32))
    assert(typeof(:[SIZE2]i32) != typeof(:[SIZE2C]f32))

    assert(typeof(:[8]i32) != typeof(:[SIZE2]f32))
    assert(typeof(:[8]i32) != typeof(:[SIZE2C]f32))
    printf("Done\n")
   // printf("%llu\n", 0xFFFF_FFFF)

/*
    var sb = StringBuilderInit()
    defer sb.free()

    toJson(sb, 4)

    printf("'%s'\n", sb.cStr())
*/

//printf("Hello world\n")
/*
    var x = any {
        .value = null,
        .id = 0
    }

    printf("id: %llu\n", x.id)*/

    /*
    var x = X<int>{4}
    printf("X<int> %lld vs X<i32> %lld\n", typeof(:X<int>), typeof(:X<i32>))
    assert(x.a == 4)
    var v = 2>>1
    assert(v == 1)
    */
    //assert(x.name() == 4) // TODO: Fix alias generics bug

/*
    var id1 = typeof(:*i32)
    var id2 = typeof(:*i32)
    printf("Ids: %llu vs %llu\n", id1, id2)


    assert(typeof(:TestStruct) == typeof(:TestStruct))
    assert(typeof(:*TestStruct) == typeof(:*TestStruct))
    assert(typeof(:**TestStruct) == typeof(:**TestStruct))
    assert(typeof(:* const TestStruct) == typeof(:* const TestStruct))

    const SIZE = 256
    const SIZE2 = 4
    var array = [256]char{0}
    var idx = typeof(array)
    var idy = typeof(:[256]char)
    var idz = typeof(:[SIZE]char)
    var idw = typeof(:[SIZE]char)
    var idw2 = typeof(:[SIZE2]char)
    var idw3 = typeof(:[SIZE3]char)
    //printf("Array: %llu vs. %llu vs %llu vs %llu vs %llu vs %llu\n", idx, idy, idz, idw, idw2, idw3)

    var a = typeof(:[SIZE3]char)
    var b = typeof(:[55]char)
    printf("Array: %llu vs %llu\n", a, b)
*/
    /*
    var id = typeof(:MyFunc)
    var info = getTypeInfo(id)

    //TODO: Bug with c geb
    //var funcInfo = info.funcType

    printf("Name: %s\n", info.name)
    for(var i = 0; i < info.funcType.numOfParams; i += 1) {
        var param = info.funcType.params[i]
        printf("Param: %s\n", param.name)
    }

    var id2 = typeof(:f32)
    printf("typeid: %llu %llu\n", id, id2)*/
    return 0
}