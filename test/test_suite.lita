/*
    Test Suite Application
*/
import "std/libc"
import "std/json"
import "std/io"
import "std/array"
import "std/mem"
import "std/mem/linear_allocator"
import "std/map"
import "std/string_buffer"
import "std/string"
import "std/system"

import "../src/lita"
import "../src/phase_result"
import "../src/error_codes"

struct TestHarness {
    allocator: *const Allocator
    buffer: StringBuffer
    numberOfTests: i32
    numberOfFailures: i32
}

struct TestSuite {
    filename: *const char
    description: *const char
    disabled: bool
    programTemplate: *const char
    buildCmd: *const char
    tests: Array<Test>
}

struct TestModule {
    name: *const char
    code: *const char
}

struct Test {
    programText: StringBuffer
    name: *const char
    buildCmd: *const char

    modules: Array<TestModule>
    //definitions: *const char
    //code: *const char
    disabled: bool
    expectedOutput: *const char
    expectedErrorOutput: *const char
}

enum TestResult {
    SUCCESS,
    LOADING_ERROR,
    OUTPUT_MISMATCH,
    ERROR_MISMATCH,
}

const testHarness = TestHarness{}
const lita = Lita{}

func main(len: i32, args: **char) : i32 {
    SystemInit()

    var options = LitaOptions{
        .maxMemory = 1024 * 1024 * 50
    }
    lita.init(&options)
    defer lita.free()

    var startTime = SystemTimeMSec()

    var testFiles = []*const char {
        //"../test/tests/notes.json",
        // "../test/tests/misc.json", json syntax error
        //"../test/tests/from_json.json",
        //"../test/tests/to_json.json",

        "../test/tests/static_if.json",
        "../test/tests/single.json",
        "../test/tests/bugs.json",
        "../test/tests/bucket_allocator.json",
        "../test/tests/stack_allocator.json",
        "../test/tests/unicode_support.json",
        "../test/tests/func_named_args.json",
        "../test/tests/traits.json",
        "../test/tests/typeof.json",
        "../test/tests/strings.json",
        "../test/tests/using.json",
        "../test/tests/notes.json",
        "../test/tests/foreign_type.json",
        "../test/tests/arena.json",
        "../test/tests/alias.json",
        "../test/tests/enums.json",
        "../test/tests/compile_time_stmt.json",
        "../test/tests/consts.json",
        "../test/tests/aggregates.json",
        "../test/tests/json.json",
        "../test/tests/map.json",
        "../test/tests/offsetof.json",
        "../test/tests/sizeof.json",
        "../test/tests/type_checker.json",
        "../test/tests/string_view.json",
        "../test/tests/string_buffer.json",
        "../test/tests/stmts.json",
        "../test/tests/array.json",
        "../test/tests/methods.json",
        "../test/tests/defer.json",
        "../test/tests/declarations.json",
        "../test/tests/arrays.json",
        "../test/tests/var_decl.json",
        "../test/tests/syntax_errors.json",
        "../test/tests/generics.json",
        "../test/tests/generics_inference.json",
        null
    }

    var memSize = 1024*1024*50
    var linearAllocator = LinearAllocator{}
    var mem = defaultAllocator.alloc(memSize)
    defer defaultAllocator.free(mem)

    linearAllocator.init(mem, memSize)
    testHarness.allocator = (&linearAllocator) as (*Allocator)
    testHarness.buffer = StringBufferInit(1024 * 1024, defaultAllocator)
    defer testHarness.buffer.free()

    testHarness.numberOfTests = 0
    testHarness.numberOfFailures = 0

    for(var i = 0; testFiles[i] != null; i+=1) {
        var filename = testFiles[i]

        var suite = TestSuite{
            .disabled = false,
            .filename = filename,
            .description = null,
            .buildCmd = null,
            .programTemplate = """
            @include("assert.h");
            @foreign func assert(e:bool):void;

            %definitions%

            func main(len:i32, args:**char):i32 {
                %code%
            }
            """
        }


        printf("Testing Suite: '%s'\n", filename)
        if(!RunTestSuite(suite, filename)) {
            printf("***FAILED Loading test suite: '%s'***\n", filename)
        }

        // free memory
        linearAllocator.currentOffset = 0
    }

    printf("\nRan %d tests with %d failures\n", testHarness.numberOfTests, testHarness.numberOfFailures)
    printf("Run time: %.4f\n", (SystemTimeMSec() - startTime))
    printf("Complete.\n")
    return testHarness.numberOfFailures > 0 ? 42 : 0;
}

func RunTestSuite(suite: *TestSuite, filename: *const char) : i32 {
    var data:*char;
    var length: usize;
    if(ReadFile(filename, &data, &length, testHarness.allocator) != FileStatus.Ok) {
        goto err;
    }

    var parser = JsonParser{}
    parser.init(testHarness.allocator)
    defer parser.free()

    var node = parser.parseJson(data)
    defer if(node) node.free()

    if(!node) {
        if(parser.hasError()) {
            printf("Test Json Syntax error: '%s' in file '%s'\n", parser.errorMsg, filename)
        }
        goto err;
    }

    suite.description = node.getStr("description", suite.description)
    suite.disabled = node.getBool("disabled", false)
    suite.programTemplate = node.getStr("program", suite.programTemplate)
    suite.buildCmd = node.getStr("buildCmd", null)

    var tests = node.getArray("tests")
    if(!tests) {
        printf("No tests\n")
        return 0
    }

    suite.tests.init(tests.size(), testHarness.allocator)
    for(var i = 0; i < tests.size(); i += 1) {
        var testNode = tests.at(i)
        if(!testNode) {
            continue
        }

        var test = CreateTest(suite, testNode, &suite.tests.elements[i])
        if(!test) {
            printf("FAILED to load test\n")
            testHarness.numberOfFailures += 1
        }
        else {
            if(test.disabled) {
                printf("    %-85s ......%s\n", test.name, "SKIPPED!")
            }
            else {
                testHarness.numberOfTests += 1

                var startTime = SystemTimeMSec()
                var result = RunTest(suite, test)
                var deltaTime = SystemTimeMSec() - startTime

                var passed = result == TestResult.SUCCESS;
                printf("    %-85s (%.2f msec)......%s\n", test.name, deltaTime, passed ? "SUCCESS" : "***FAILED***")
                if(!passed) {
                    testHarness.numberOfFailures += 1
                    switch(result) {
                        case TestResult.LOADING_ERROR: {
                            printf("        Error with the test case\n")
                            break
                        }
                        case TestResult.OUTPUT_MISMATCH: {
                            printf("        The expected output did not match the actual output:\n")
                            printf("\n'%s'\n\n", testHarness.buffer.cStr())
                            break
                        }
                        case TestResult.ERROR_MISMATCH: {
                            printf("        The expected ERROR output did not match the actual output:\n")
                            printf("\n%s\n\n", testHarness.buffer.cStr())
                            break
                        }
                        default: {}
                    }
                }
            }
        }
    }
    return 1

err:
    return 0
}

func CreateTest(suite: *TestSuite, testNode: *JsonNode, output: *Test) : *Test {
    var programText = StringBufferInit(2048, testHarness.allocator)
    programText.append("%s\n", suite.programTemplate)

    const defsTemplate = "%definitions%"
    var defsLen = strlen(defsTemplate)
    var defsIndex = programText.indexOf(defsTemplate)
    if(defsIndex > -1) {
        programText.replace(defsIndex, defsIndex + defsLen, testNode.getStr("definitions", ""))
    }

    const codeTemplate = "%code%"
    var codeLen = strlen(codeTemplate)
    var codeIndex = programText.indexOf(codeTemplate)
    if(codeIndex > -1) {
        programText.replace(codeIndex, codeIndex + codeLen, testNode.getStr("code", ""))
    }

    output.programText = programText
    output.name = testNode.getStr("name", "")
    output.expectedOutput = testNode.getStr("output", null)
    output.expectedErrorOutput = testNode.getStr("error", null)
    output.disabled = testNode.getBool("disabled", false)
    output.buildCmd = testNode.getStr("buildCmd", null)

    var modules = testNode.getArray("modules")
    if(modules) {
        output.modules.init(modules.size(), testHarness.allocator)
        for(var i = 0; i < modules.size(); i += 1) {
            var module = modules.at(i)
            var m = TestModule {
                .name = module.getStr("name", ""),
                .code = module.getStr("program", "")
            }
            output.modules.add(m)
        }

    }
    else {
        output.modules.length = 0
    }
    return output
}

func RunTest(suite: *TestSuite, test: *Test) : TestResult {
    testHarness.buffer.clear() // clear previous run

    var tmpSrcFile = "test_output/lita_test.lita"
    Mkdir("test_output")

    if(WriteFile(tmpSrcFile, test.programText.cStrConst(), test.programText.length) != FileStatus.Ok) {
        return TestResult.LOADING_ERROR
    }

    var moduleFilename = [260]char {};
    var moduleFilenameStr = StringInit(moduleFilename, 260, 0)
    for(var i = 0; i < test.modules.size(); i += 1) {
        var m = test.modules.get(i)
        moduleFilenameStr.clear()
        moduleFilenameStr.format("test_output/%s.lita", m.name)
        if(WriteFile(moduleFilenameStr.cStr(), m.code, strlen(m.code)) != FileStatus.Ok) {
            return TestResult.LOADING_ERROR
        }
    }

    var options = new<LitaOptions>()
    defer defaultAllocator.free(options)

    options.checkerOnly = false
    options.cOutputOnly = false
    options.showProfileInfo = false
    options.run = false // we run outselves
    options.cFormat = false
    //options.maxMemory = 1024 * 1024 * 50
    //options.isDebug = true
    if(test.buildCmd) {
        options.compileCmd = test.buildCmd
    }
    else {
        if(suite.buildCmd) {
            options.compileCmd = suite.buildCmd
        }
        else {
            options.compileCmd = "clang %input% -o %output% -D_CRT_SECURE_NO_WARNINGS"
        }
    }


    strncpy(options.inputFile, tmpSrcFile, MAX_PATH)
    strncpy(options.litaPath, GetEnv("LITAC_HOME"), MAX_PATH)

    var outputFile = "test"
    strncpy(options.outputFile, outputFile, MAX_PATH)

    var outputPath = "test_output"
    strncpy(options.outputPath, outputPath, MAX_PATH)
    var len = strlen(options.outputPath)
    if(len > 0) {
        if(options.outputPath[len-1] != '/') {
            strcat(options.outputPath, "/")
        }
    }

    FilePath(options.inputFile, options.srcPath)

    // TODO: Bug with reset not clearing buffers correctly, tests end up failing if running too many "invalid" type tests
    //lita.options = &options
    //lita.reset()

    var lita = Lita{}
    lita.init(options)
    defer lita.free()

    var root = lita.parse()
    if(!root) {
        goto report
    }

    if(!lita.typeCheck(root)) {
        goto report
    }

    if(!lita.transpile(root)) {
        goto err
    }

    lita.runCaptureOutput(testHarness.buffer)

    if(test.expectedOutput) {
        if(strcmp(test.expectedOutput, testHarness.buffer.cStr())  != 0) {
            goto err
        }
    }
    else if(testHarness.buffer.length) {
        goto err
    }

report:
    if(!lita.result.errors.empty()) {
        testHarness.buffer.clear() // clear program output

        for(var i = 0; i < lita.result.errors.size(); i += 1) {
            PrintError(testHarness.buffer, lita.result.errors.get(i))
            testHarness.buffer.append("\n")
        }
        testHarness.buffer.append("Total errors: %d\n", lita.result.errors.size())

        if(test.expectedErrorOutput) {
            if(testHarness.buffer.contains(test.expectedErrorOutput)) {
                return TestResult.SUCCESS
            }
            else {
                return TestResult.ERROR_MISMATCH
            }
        }

        goto err
    }
    else if(test.expectedErrorOutput) {
        return TestResult.ERROR_MISMATCH
    }


    return TestResult.SUCCESS

err:
    return TestResult.OUTPUT_MISMATCH
}


public func (this: *Lita) runCaptureOutput(sb: *StringBuffer) : *const char {
    var path: [MAX_PATH]char;
    FilePath(this.binaryFilename, path)

    var len = strlen(path)
    sb.appendStrn("cd ", 3)
    sb.appendStrn(path, len)
    sb.append(" && .%s%s 2>&1", PATH_SEPARATOR, &this.binaryFilename[len + 1])

    var process = SystemExec(sb.cStr())
    if(!process.pipe) {
        return "failed to spawn test"
    }
    defer process.close()

    sb.clear()

    var buffer = [1024]char{};
    var bytesRead = -1_i64
    while((bytesRead = process.readOutput(buffer, 1024)) > 0) {
        sb.appendStr(buffer)
    }

    return sb.cStrConst()
}