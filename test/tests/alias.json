{
    "description": "Field alias",
    "disabled": false,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [

        {
            "name": "Struct Aliased",
            "definitions": `

                struct Test {
                    @alias("brett")
                    v: i32
                }
            `,
            "code": `
                var t = Test{
                    .v = 4
                }

                assert(t.v == 4)
            `,
        },
        {
            "name": "Struct Foreign Aliased ",
            "definitions": `
                @raw("""
                    typedef struct Test {
                        int brett;
                    } Test;
                """);

                @foreign
                struct Test {
                    @alias("brett")
                    v: i32
                }
            `,
            "code": `
                var t = Test{
                    .v = 4
                }

                assert(t.v == 4)
            `,
        },
        {
            "name": "Struct Embedded Aliased",
            "definitions": `

                struct Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.t.v == 4)
            `,
        },
        {
            "name": "Struct Embedded Foreign Aliased ",
            "definitions": `
                @raw("""
                    typedef struct Test {
                        int brett;
                    } Test;
                """);

                @foreign
                struct Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.t.v == 4)
            `,
        },
        {
            "name": "Struct Aliased with Using",
            "definitions": `

                struct Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: using Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.v == 4)
            `,
        },
        {
            "name": "Struct Embedded Foreign Aliased with Using",
            "definitions": `
                @raw("""
                    typedef struct Test {
                        int brett;
                    } Test;
                """);

                @foreign
                struct Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: using Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.v == 4)
            `,
        },
        {
            "name": "Union Aliased",
            "definitions": `

                union Test {
                    @alias("brett")
                    v: i32
                }
            `,
            "code": `
                var t = Test{
                    .v = 4
                }

                assert(t.v == 4)
            `,
        },
        {
            "name": "Union Foreign Aliased ",
            "definitions": `
                @raw("""
                    typedef union Test {
                        int brett;
                    } Test;
                """);

                @foreign
                union Test {
                    @alias("brett")
                    v: i32
                }
            `,
            "code": `
                var t = Test{
                    .v = 4
                }

                assert(t.v == 4)
            `,
        },
        {
            "name": "Union Embedded Aliased",
            "definitions": `

                union Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.t.v == 4)
            `,
        },
        {
            "name": "Union Embedded Foreign Aliased ",
            "definitions": `
                @raw("""
                    typedef union Test {
                        int brett;
                    } Test;
                """);

                @foreign
                union Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.t.v == 4)
            `,
        },
        {
            "name": "Union Aliased with Using",
            "definitions": `

                union Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: using Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.v == 4)
            `,
        },
        {
            "name": "Union Embedded Foreign Aliased with Using",
            "definitions": `
                @raw("""
                    typedef union Test {
                        int brett;
                    } Test;
                """);

                @foreign
                union Test {
                    @alias("brett")
                    v: i32
                }

                struct X {
                    t: using Test
                }
            `,
            "code": `
                var t = X{Test{
                    .v = 4
                }}

                assert(t.v == 4)
            `,
        },
        {
            "name" : "Aliased Module with methods",
            "definitions": `
                import "test_module" as tester;

                public func (this: *tester::TestStruct) testMethod2() : i32 {
                    return this.a * 2;
                }
            `,
            "modules": [
                {
                    "name" : "test_module",
                    "program" : `
                        public struct TestStruct {
                            a: i32
                        }

                        public func (this: *TestStruct) testMethod() : i32 {
                            return this.a
                        }
                    `
                }
            ],
            "code": `
                var t = tester::TestStruct {
                    .a = 4
                }

                var result = t.testMethod()
                assert(result == 4)

                var result2 = t.testMethod2()
                assert(result2 == 8)
            `,
        },
        {
            "name" : "Aliased Module with generic methods",
            "definitions": `
                import "test_module" as tester;

                public func (this: *tester::TestStruct) testMethod2<T>(a : T) : i32 {
                    return this.a * 2 + a;
                }
            `,
            "modules": [
                {
                    "name" : "test_module",
                    "program" : `
                        public struct TestStruct {
                            a: i32
                        }

                        public func (this: *TestStruct) testMethod<T>(a: T) : i32 {
                            return this.a + a
                        }
                    `
                }
            ],
            "code": `
                var t = tester::TestStruct {
                    .a = 4
                }

                var result = t.testMethod(4)
                assert(result == 8)

                var result2 = t.testMethod2(8)
                assert(result2 == 16)
            `,
        },
        {
            "name" : "Generic Across Modules",
            "definitions": `
                import "gen_module";

                public struct TestStruct {
                    a: i32
                }

                public func (this: *TestStruct) testMethod() : i32 {
                    return this.a * 2;
                }
            `,
            "modules": [
                {
                    "name" : "gen_module",
                    "program" : `

                        public func TestGen<T>(a: *void) : i32 {
                            var this = a as (*T)
                            return this.testMethod()
                        }
                    `
                }
            ],
            "code": `
                var t = TestStruct {
                    .a = 4
                }

                var result = TestGen<TestStruct>(&t)
                assert(result == 8)

            `,
        },
        {
            "name" : "Generic Alias Across Modules",
            "definitions": `
                import "gen_module" as tester;

                public struct TestStruct {
                    a: i32
                }

                public func (this: *TestStruct) testMethod() : i32 {
                    return this.a * 2;
                }
            `,
            "modules": [
                {
                    "name" : "gen_module",
                    "program" : `

                        public func TestGen<T>(a: *void) : i32 {
                            var this = a as (*T)
                            return this.testMethod()
                        }
                    `
                }
            ],
            "code": `
                var t = TestStruct {
                    .a = 4
                }

                var result = tester::TestGen<TestStruct>(&t)
                assert(result == 8)

            `,
        },
        {
            "name" : "Generic Alias with Struct Across Modules",
            "definitions": `
                import "gen_module" as tester;

                public func (this: *tester::TestStruct) testMethod() : i32 {
                    return this.a * 2;
                }
            `,
            "modules": [
                {
                    "name" : "gen_module",
                    "program" : `

                        public struct TestStruct {
                            a: i32
                        }

                        public func TestGen<T>(a: *void) : i32 {
                            var this = a as (*T)
                            return this.testMethod()
                        }
                    `
                }
            ],
            "code": `
                var t = tester::TestStruct {
                    .a = 4
                }

                var result = tester::TestGen<tester::TestStruct>(&t)
                assert(result == 8)

            `,
        },

    ]
}