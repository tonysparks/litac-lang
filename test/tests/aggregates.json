{
    "description": "Aggregates",
    "disabled": false,
    "debug": true,
    "disableLines": true,
    "includeTypeInfos": false,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "BitField invalid integer type float",
            "definitions": `
                struct TestStruct {
                    a: i32:2
                    b: bool:1
                    c: bool:1
                    d: i32:0.5
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField invalid integer type bool",
            "definitions": `
                struct TestStruct {
                    a: i32:true
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField invalid integer type null",
            "definitions": `
                struct TestStruct {
                    a: i32:null
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField invalid integer type string",
            "definitions": `
                struct TestStruct {
                    a: i32:"true"
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField missing const expression",
            "definitions": `
                struct TestStruct {
                    a: i32:
                    z: bool
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField invalid from constant variable",
            "definitions": `
                const Z = 12
                struct TestStruct {
                    a: i32:Z
                    z: bool
                }
            `,
            "code": `

            `,
            "error" : "Invalid bit field constant expression, only integer values are supported"
        },
        {
            "name": "BitField valid bit fields",
            "definitions": `
                import "std/libc"

                struct TestStruct {
                    a: u8  : 2
                    d: u8  : 4
                    b: u8 : 1
                    c: u8 : 1
                }
                struct OtherStruct {
                    a: u8
                }
            `,
            "code": `
                // this is compiler specific, so this might fail tests
                // if this becomes problematic, we can disable
                assert(sizeof(:TestStruct) == sizeof(:OtherStruct))
            `,
        },
        {
            "name": "Struct default values",
            "definitions": `
                struct X {
                    a: i32 = 1
                    b: i32
                }
            `,
            "code": `
                var x1:X;
                var x2:X = X{}
                var x3 = X{.a = 2}
                var x4 = X{.b = 2}

                assert(x2.a == 1)
                assert(x2.b == 0)

                assert(x3.a == 2)
                assert(x3.b == 0)

                assert(x4.a == 1)
                assert(x4.b == 2)
            `,
        },
        {
            "name": "Struct default values invalid type",
            "definitions": `
                struct X {
                    a: *X = "hi"
                }
            `,
            "code": `

            `,
            "error": "'*const char' can't be assigned to '*X'"
        },
        {
            "name": "Embedded Struct default values",
            "definitions": `
                struct X {
                    a: i32 = 1
                    b: i32

                    struct Y {
                        z: i32 = 4
                    }
                }
            `,
            "code": `
                var x1:X = X{}

                assert(x1.a == 1)
                assert(x1.b == 0)
                assert(x1.Y.z == 0) // notice it zeroes out and does NOT use default

                var x2:X = X{
                    .a = 32,
                    .b = 42,
                    .Y = Y{
                        .z = 52
                    }
                }

                assert(x2.a == 32)
                assert(x2.b == 42)
                assert(x2.Y.z == 52)


                var x3:X = X{
                    .b = 42,
                    .Y = Y{
                    }
                }

                assert(x3.a == 1)
                assert(x3.b == 42)
                assert(x3.Y.z == 4)
            `,
        },
        {
            "name": "Embedded Struct default invalid values",
            "definitions": `
                struct X {
                    a: i32 = 1
                    b: i32

                    struct Y {
                        z: i32 = 4.4
                    }
                }
            `,
            "code": `

            `,
            "error": "'f64' can't be assigned to 'i32'"
        },
        {
            "name": "Embedded Struct default values by position",
            "definitions": `
                struct X {
                    a: i32 = 2
                    b: i32 = 3

                    struct Y {
                        z: i32
                        x: i32 = 4
                    }
                }
            `,
            "code": `
                var x2:X = X{
                    32,
                    42,
                    Y{
                        52
                    }
                }

                assert(x2.a == 32)
                assert(x2.b == 42)
                assert(x2.Y.z == 52)
                assert(x2.Y.x == 4)
            `,
        },
        {
            "name": "Struct default values by position",
            "definitions": `
                struct X {
                    a: i32 = 2
                    b: i32 = 3
                }
            `,
            "code": `
                var x2:X = X{
                    32
                }

                assert(x2.a == 32)
                assert(x2.b == 3)
            `,
        },
        {
            "name": "Union default values",
            "definitions": `
                union X {
                    a: i32 = 1
                    b: f32 = 1.0f
                }
            `,
            "code": `

                var x1:X = X{}
            `,
            "error": "Invalid default assignment statement, only allowed for 'struct'"
        },
    ]
}