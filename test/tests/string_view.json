{
    "description": "String",
    "disabled": false,
    "program": `
        import "std/string";

        @include("assert.h");
        @foreign func assert(e:bool):void;

        import "std/io";

        @include("<string.h>");
        @foreign func strncmp(a:*const char, b:*const char, len: i32) : i32;
        @foreign func strcmp(a:*const char, b:*const char) : i32;
        @foreign func sprintf(b: *char, format: *const char, ...) : i32;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "String_equals",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var b = StringInit("Bye World")
                var c = a
                var d = StringInit("HelloWorld")
                var e = StringInit(null)

                assert(a.equalsString(c.buffer, c.length) == true)
                assert(a.equalsString("Hell") == false)
                assert(a.equalsString("Hello World") == true)
                assert(a.equalsString(b.buffer, b.length) == false)
                assert(a.equalsString(d.buffer, d.length) == false)
                assert(e.equalsString(d.buffer, d.length) == false)
                assert(a.equalsString(e.buffer, e.length) == false)
            `,
        },
        {
            "name": "String_contains",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                assert(a.contains($"World") == true)
                assert(a.contains($"d") == true)
                assert(a.contains($"H") == true)
                assert(a.contains($"Which".substring(0, 1)) == true)
                assert(e.contains($"World") == false)
                assert(a.contains(e) == false)
            `,
        },
        {
            "name": "String_startsWith",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                assert(a.startsWith($"World") == false)
                assert(a.startsWith($"World", 2) == false)
                assert(a.startsWith($"World", 6) == true)
                assert(a.startsWith($"d") == false)
                assert(a.startsWith($"H") == true)
                assert(a.startsWith($"Hell") == true)
                assert(a.startsWith($"Hello World") == true)
                assert(a.startsWith($"Hello World!") == false)
                assert(a.startsWith($"Which", 1) == false)
                assert(a.startsWith($"Hhich".substring(0, 1)) == true)
                assert(e.startsWith($"World") == false)
                assert(a.startsWith(e) == false)
            `,
        },
        {
            "name": "String_endsWith",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                assert(a.endsWith($"World") == true)
                assert(a.endsWith($"d") == true)
                assert(a.endsWith($"H") == false)
                assert(a.endsWith($"Hell") == false)
                assert(a.endsWith($"Hello World") == true)
                assert(a.endsWith($"Hello World!") == false)
                assert(a.endsWith($"Which") == false)
                assert(a.endsWith($"dhich".substring(0, 1)) == true)
                assert(e.endsWith($"World") == false)
                assert(a.endsWith(e) == false)
            `,
        },
        {
            "name": "String_indexOfAt",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                assert(a.indexOfAt($"World", 2) == 6)
                assert(a.indexOfAt($"World", 7) == -1)
                assert(a.indexOfAt($"d") == 10)
                assert(a.indexOfAt($"H") == 0)
                assert(a.indexOfAt($"H", 2) == -1)

                assert(e.indexOfAt($"World") == -1)
                assert(a.indexOfAt(e) == -1)
            `,
        },
        {
            "name": "String_substring",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                assert(a.substring(-1, 2).length == 0)
                assert(strncmp(a.substring(0, 2).buffer, "He", 2) == 0)
                assert(a.substring(0, 2).equalsString("He", 2) == true)
                assert(a.substring(1, 2).equalsString("e") == true)
                assert(a.substring(1, 11).equalsString("ello World") == true)
                assert(a.substring(1).equalsString("ello World") == true)
                assert(a.substring(1, 10).equalsString("ello Worl") == true)
                assert(a.substring(10, 11).equalsString("d") == true)
                assert(a.substring(0).equalsString(a.buffer) == true)
                assert(a.substring(12).equalsString(a.buffer) == false)
                assert(a.substring(0).equalsString(e.buffer) == false)
                assert(e.substring(0).equalsString(a.buffer) == false)
                assert(e.substring(0).equalsString(e.buffer) == true)

                assert(a.substring(22).buffer == null)
            `,
        },
        {
            "name": "String_copyTo",
            "disabled": false,
            "definitions": `

            `,
            "code": `
                var a = StringInit("Hello World")
                var e = StringInit(null)

                var b : [255]char
                assert(a.copyTo(null, 255) == 0)
                assert(a.copyTo(b, 0) == 0)
                assert(a.copyTo(b, 255) == a.size())

                var v = StringInit(b)
                assert(v.equalsString(a.buffer))
                assert(e.copyTo(b, 255) == 0)
            `,
        },
    ]
}