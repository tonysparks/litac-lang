{
    "description": "Arena",
    "disabled": false,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;
        import "std/mem/debug_allocator"
        import "std/mem/libc_allocator"

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "Anon Union",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct X {
                    a: i32
                }

                func (x: *X) method() : i32 {
                    return x.a
                }

                struct Test {
                    union {
                        w: *X
                        y: *X
                    }
                }
            `,
            "code": `
                var x = X{4}
                var t = Test {.w = &x}
                var w = t.w
                assert(w.method() == 4)
            `,
        },
        {
            "name": "Arena Allocator",
            "definitions": `
                import "std/mem";
                import "std/mem/arena_allocator"
                import "std/array";
                import "std/io";
                import "std/map";
                import "std/json";
                import "std/string_buffer"
                import "std/libc"

            `,
            "code": `
                var debugAllocator = DebugAllocator{}
                debugAllocator.init()
                defer {
                    debugAllocator.report();
                    debugAllocator.free();
                }

                var arena = ArenaAllocator{}
                arena.init(4096, &debugAllocator.alloc)
                defer {
                    arena.free()
                    assert(debugAllocator.allocations.empty())
                }

                var array = Array<i32>{}
                array.init(2, &arena.allocator)

                const size = 1024
                for(var i = 0; i < size; i+=1) {
                    array.add(i)
                }

                assert(array.size() == size)

                var map = Map<*const char, i32>{}
                map.init(0, 1, &StrHashFn, &StrEqualFn, &arena.allocator)

                map.put("hi1", 421)
                map.put("hi2", 422)
                map.put("hi3", 423)
                map.put("hi4", 424)
                map.put("hi5", 425)

                assert(map.size() == 5)

                var parser = JsonParser{}
                parser.init(&arena.allocator)

                var node = parser.parseJson("""
                    {
                        "x" : true,
                        "y" : false,
                        "z" : [1,2,3]
                    }
                """);

                var buf = StringBuffer{}
                buf.init(1, &arena.allocator)
                node.print(&buf)

                assert(!strcmp("{\"x\":true,\"y\":false,\"z\":[1,2,3]}", buf.cStr()))
            `,
            "output":
`Leaked Allocations: {
}
`
        },
        {
            "name": "Arena Allocator with Default",
            "definitions": `
                import "std/mem";
                import "std/mem/arena_allocator"
                import "std/array";
                import "std/io";
                import "std/map";
                import "std/json";
                import "std/string_buffer"
                import "std/libc"

            `,
            "code": `
                var debugAllocator = DebugAllocator{}
                debugAllocator.init(cAllocator)
                defer {
                    debugAllocator.report();
                    debugAllocator.free();
                }

                var arena = ArenaAllocator{}
                arena.init(4096, &debugAllocator.alloc)
                defer {
                    arena.free()
                    assert(debugAllocator.allocations.empty())
                }

                defaultAllocator = (&arena.allocator) as (*const Allocator)

                var array = Array<i32>{}
                array.init(2)

                const size = 1024
                for(var i = 0; i < size; i+=1) {
                    array.add(i)
                }

                assert(array.size() == size)

                var map = Map<*const char, i32>{}
                map.init(0, 1, &StrHashFn, &StrEqualFn)

                map.put("hi1", 421)
                map.put("hi2", 422)
                map.put("hi3", 423)
                map.put("hi4", 424)
                map.put("hi5", 425)

                assert(map.size() == 5)

                var parser = JsonParser{}
                parser.init()

                var node = parser.parseJson("""
                    {
                        "x" : true,
                        "y" : false,
                        "z" : [1,2,3]
                    }
                """);

                var buf = StringBuffer{}
                buf.init(1)
                node.print(&buf)

                assert(!strcmp("{\"x\":true,\"y\":false,\"z\":[1,2,3]}", buf.cStr()))
            `,
            "output":
`Leaked Allocations: {
}
`
        },
    ]
}