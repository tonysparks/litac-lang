{
    "description": "Tests Consts",
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        @include("<string.h>");
        @foreign func strncmp(a:*const char, b:*const char, len: i32) : i32;
        @foreign func strcmp(a:*const char, b:*const char) : i32;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "Constant native string",
            "definitions": `
                const sourceDir = $"../src/"
            `,
            "code": `
                assert(sourceDir.buffer != null)
                assert(sourceDir.length == 7)
            `,
        },
        {
            "name": "Var native string",
            "definitions": `
                var sourceDir = $"../src/"
            `,
            "code": `
                assert(sourceDir.buffer != null)
                assert(sourceDir.length == 7)
            `,
        },
        {
            "name": "Const Primitives",
            "code": `
                const X = 10;
                assert(X == 10);

                const Y = 10.0;
                assert(Y == 10.0);

                const Z = 10 + 100_i64;
                assert(Z == 110_i64);

                const W = "Hi";
                assert(strcmp(W, "Hi") == 0);

                const B = true;
                assert(B == true);
            `
        },
        {
            "name": "Const Complex Types",
            "definitions": `
                struct Test {
                    x: f32
                }
                var i = 0
                func call() : i32 {
                    i += 1
                    return i
                }
            `,
            "code": `
                const x = Test{1f}
                assert(x.x == 1f);

                const y = &Test{2f}
                assert(y.x == 2f);

                const v = call()
                assert(v == 1)
                assert(v == 1)
            `
        },
	    {
            "name": "Const Imports",
			"modules": [
                {
                    "name": "const_public",
                    "program": `
                        public const X = 10
						const Y = -10

						public func test() : i32 {
						  return Y + 0
						}
                    `
                }
            ],
            "definitions": `
                import "const_public"
            `,
            "code": `
                const Y = 1.0f
                assert(X == 10);
                assert(Y == 1.0f);
                assert(test() == -10)
            `
        },
        {
            "name": "Constant Array Declaration",
            "definitions": `
                const X = 1 + 1
                const Y = X + 2
                const Z = Y + X
            `,
            "code": `
                var x = [Z + X]i32
                assert(X == 2)
                assert(Y == 4)
                assert(Z == 6)
            `,
        },
        {
            "name": "Constant Reassign",
            "definitions": `
                const X = 1 + 1
                const Y = X + 2
                const Z = Y + X
                const W = X+=1
            `,
            "code": `
                var x = [Z + X]i32
                assert(X == 2)
                assert(Y == 4)
                assert(Z == 6)
            `,
            "error": "can't reassign constant variable 'X'"
        },
        {
            "name": "Constant Scoping",
            "definitions": `
                const X = 1 + 1
            `,
            "code": `
                {
                    const X = 44
                    assert(X == 44)
                    {
                        const Y = 31
                        assert(Y == 31)
                    }
                    var Y = 55
                    assert(Y == 55)
                }
                assert(X == 2)
            `,
        },
    ]
}