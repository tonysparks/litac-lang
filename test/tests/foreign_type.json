{
    "description": "Foreign Type",
    "disabled": false,
    "includeTypeInfos": false,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name" : "Test foreign names",
            "definitions": `
                @raw("""
                    typedef float vec2[2];
                """);
                @foreign public typedef [2]f32 as vec2;
            `,
            "code": `
                @raw("__attribute__((aligned(16)))") var v: vec2 = vec2 { 0f, 2f };
                assert(v[0] == 0f)
                assert(v[1] == 2f)
            `,
        },
        {
            "name": "Foreign funcPtr",
            "symbolPrefix": "litaC__",
            "definitions": `
                @raw("""
                typedef int (*SomeFunc)(int x);

                int nativeFn(SomeFunc aFn) {
                    return aFn(4);
                }

                """);

                @foreign
                func nativeFn(aFn: SomeFunc) : i32;

                @foreign
                typedef func(i32) : i32 as SomeFunc;

                func test(x: i32) : i32 {
                    return x
                }

                func testFn(aFn: SomeFunc) : i32 {
                    return aFn(4)
                }
            `,
            "code": `
                var fn = &test

                assert(fn(4)== 4)
                assert(testFn(fn) == 4)
                assert(nativeFn(fn) == 4)

            `,
        },
        {
            "name": "Foreign Primitive",
            "definitions": `
                @raw("""
                int test(int x) {
                    return x;
                }
                """);

                @foreign
                typedef void as int;

                @foreign
                func test(x: int) : int;

                func test2(y: int) : int {
                    return y
                }

                struct X {
                    x: int
                }

            `,
            "code": `
                var x: int = 4;
                assert(test(x) == 4);

                var y = x
                var z = test2(y)
                assert(z == 4)

                var t = X{.x = y}
                assert(t.x == 4)
            `,
        },
        {
            "name": "Foreign Primitive Generics",
            "definitions": `
                @raw("""
                int test(int x) {
                    return x;
                }
                """);

                @foreign
                typedef void as int;

                @foreign
                func test(x: int) : int;

                func test2<T>(y: T) : T {
                    return y
                }

                struct X<T> {
                    x: T
                }

            `,
            "code": `
                var x: int = 4;
                assert(test(x) == 4);

                var y = x
                var z = test2(y)
                assert(z == 4)

                var t = X{.x = y}
                assert(t.x == 4)
            `,
        },
        {
            "name": "Foreign Primitive Generics time_t",
            "definitions": `
                @raw("""
                typedef long long time_t;

                time_t test(time_t x) {
                    return x;
                }
                """);

                @foreign
                typedef i64 as time_t;

                @foreign
                func test(x: time_t) : time_t;

                func test2<T>(y: T) : T {
                    return y
                }

                struct X<T> {
                    x: T
                }

            `,
            "code": `
                var x: time_t = 4;
                assert(test(x) == 4);

                var y = x
                var z = test2(y)
                assert(z == 4)

                var t = X{.x = y}
                assert(t.x == 4)
            `,
        },
        {
            "name": "Foreign Primitive out of order time_t",
            "symbolPrefix": "litaC__",
            "definitions": `
                @raw("""
                typedef long long time_t;

                time_t test(time_t x) {
                    return x;
                }
                """);


                func test2(y: time_t) : time_t {
                    return y
                }

                struct X {
                    x: time_t
                }


                @foreign
                typedef i64 as time_t;

                @foreign
                func test(x: time_t) : time_t;

            `,
            "code": `
                var x: time_t = 4;
                assert(test(x) == 4);

                var y = x
                var z = test2(y)
                assert(z == 4)

                var t = X{.x = y}
                assert(t.x == 4)
            `,
        },
        {
            "name": "Foreign funcPtr",
            "symbolPrefix": "litaC__",
            "definitions": `
                @raw("""
                typedef int (*SomeFunc)(int x);

                int nativeFn(SomeFunc aFn) {
                    return aFn(4);
                }

                """);

                @foreign
                func nativeFn(aFn: SomeFunc) : i32;

                @foreign
                typedef func(i32) : i32 as SomeFunc;

                func test(x: i32) : i32 {
                    return x
                }

                func testFn(aFn: SomeFunc) : i32 {
                    return aFn(4)
                }
            `,
            "code": `
                var fn = &test

                assert(fn(4)== 4)
                assert(testFn(fn) == 4)
                assert(nativeFn(fn) == 4)

            `,
        },
        {
            "name": "Foreign struct",
            "symbolPrefix": "litaC__",
            "definitions": `
                @raw("""
                typedef struct Test {
                    int x;
                } Test;

                int nativeFn(Test t) {
                    return t.x;
                }

                """);

                @foreign
                func nativeFn(t: Test) : i32;

                @foreign
                struct Test {x:i32};

                //@foreign (won't work!!)
                typedef Test as Test2;
            `,
            "code": `
                var test = Test{4}
                var test2 = Test2{8}
                assert(nativeFn(test) == 4)
                assert(nativeFn(test2) == 8)

            `,
        },
    ]
}