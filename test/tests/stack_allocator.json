{
    "description": "Tests Declarations",
    "enabled": true,
    "program" : `
    import "std/mem/debug_allocator"
    import "std/mem/libc_allocator"

    @include("assert.h");
    @foreign func assert(e:bool):void;

    @include("stdio.h");
    @foreign func printf(...):void;

    %definitions%

    func main(len:i32, args:**char):i32 {
        %code%
    }
    `,
    "tests": [
        {
            "name" : "Stack Allocator",
            "definitions": `
                import "std/mem"
                import "std/mem/stack_allocator"
            `,
            "code": `
                var debugAllocator = DebugAllocator{}
                debugAllocator.init(cAllocator)

                var allocator = StackAllocator{}
                allocator.init(&debugAllocator.alloc)
                var n1 = allocator.alloc(sizeof(:i32)) as (*i32);
                *n1 = 4

                var n2 = allocator.alloc(sizeof(:i32)) as (*i32);
                *n2 = 8


                assert(allocator.totalAllocations == 2)

                allocator.pop()
                assert(allocator.totalAllocations == 1)

                allocator.pop()
                assert(allocator.totalAllocations == 0)

                allocator.pop()
                assert(allocator.totalAllocations == 0)

                debugAllocator.report()
            `,
            "output":
`Leaked Allocations: {
}
`
        },

    ]
}