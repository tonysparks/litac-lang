{
    "description": "Single",
    "disabled": false,
    "includeTypeInfos": true,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "Generic Constraint Primative With Lower Type",
            "definitions": `
                struct Thing<X: i32> {
                    a: [X]i32
                }
            `,
            "code": `
                var t = Thing<1024> {
                }

                //assert(t.a == 4)
            `,
            //"error": "'f32' can't be assigned to 'i32' due to violating type constraint definition:"
        },/*
        {
            "name": "Generic Constraint Primative With Invalid Type",
            "definitions": `
                struct Thing<X: i32> {
                    a: X
                }
            `,
            "code": `
                var t = Thing {
                    .a = 4f
                }

                assert(t.a == 4)
            `,
            "error": "'f32' can't be assigned to 'i32' due to violating type constraint definition:"
        },
        {
            "name": "Generic Constraint Primative With Lower Type",
            "definitions": `
                struct Thing<X: i32> {
                    a: X
                }
            `,
            "code": `
                var t = Thing {
                    .a = 4_u16
                }

                assert(t.a == 4)
            `,
            //"error": "'f32' can't be assigned to 'i32' due to violating type constraint definition:"
        },
        {
            "name": "Generic Constraint Primative",
            "definitions": `
                struct Thing<X: i32> {
                    a: X
                }
            `,
            "code": `
                var t = Thing {
                    .a = 4
                }

                assert(t.a == 4)
            `
        },
        {
            "name": "Generic Constraint Double Primative",
            "definitions": `
                struct Thing<X: i32, Y: f32> {
                    a: X
                    b: Y
                }
            `,
            "code": `
                var t = Thing {
                    .a = 4,
                    .b = 4f
                }

                assert(t.a == 4)
                assert(t.b == 4f)
            `
        },

        {
            "name": "Generic Constraint Double Primative With Alias",
            "definitions": `
                struct Thing<X: i32, Y: f32> {
                    a: X
                    b: Y
                }

                func Make<Y: f32>() : Thing<i32, Y> {
                    return Thing<i32, Y> {
                        .a = 4,
                        .b = 4f
                    }
                }
            `,
            "code": `
                var t = Make<f32>()

                assert(t.a == 4)
                assert(t.b == 4f)
            `
        },

        {
            "name": "Generic Constraint Trait",
            "definitions": `
                trait Thing {
                    call: func() : i32
                }
                struct Wrapper<X: Thing> {
                    a: X
                }

                func (this: *Wrapper<X>) exec<X: Thing>() : i32 {
                    return this.a.call()
                }

                struct ThingImpl {
                    x: i32
                }

                func (this: *ThingImpl) call() : i32 {
                    return this.x
                }
            `,
            "code": `
                var thing = ThingImpl {
                    .x = 4,
                }

                var wrapper = Wrapper {
                    .a = &thing
                }

                assert(wrapper.exec() == 4)
            `
        },





        /*
        {
            "name": "Array Init",
            "definitions": `
                import "std/mem"
                import "std/mem/linear_allocator"
                import "std/mem/track_allocator"
                import "std/mem/debug_allocator" as d
                import "std/array"
            `,
            "code": `

            `
        },

        {
            "name": "Generic Function With Alias",
            "definitions": `
                import "a"
                import "b" as b
            `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            aa: A
                        }

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        #if (DEBUG)
                        public struct TestStruct {
                            a: i32
                            b: A
                        }
                        #else
                        public struct TestStruct {
                            a: i32
                            b: A
                            filename: [32]char
                            lineno: i32
                        }
                        #end

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
            ],
            "code": `
                var ta = TestStruct{}
                var tb = b::TestStruct{}
            `
        },


        {
            "name": "Generics Type Inference from Union Generic Type with typedef",
            "definitions": `
                union Test<V> {
                    a : V
                }

                typedef Test<V> as Foo<V>

                func test<T>(t:Foo<T>):T {
                    return t.a
                }
            `,
            "code": `
                var t = Test<i32> { 4 }
                assert(test(t) == 4)
            `,
        },

        {
            "name": "Array Init",
            "definitions": `
                import "std/array"
            `,
            "code": `
                var array = ArrayInit<i32>()
            `
        },


        {
            "name": "Generic of same type name in different module struct member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            aa: A
                        }

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            b: B
                        }

                        public struct B {
                            array: Array<*TestStruct>
                        }
                    `
                }
            ],
            "code": `
                var a = A{}
                var b = b::B{}
            `,
        },
        {
            "name": "Generic of same type name in different module member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                }
            ],
            "code": `
                var a = TestStruct{}
                var b = b::TestStruct{}
            `,
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<m::Map<i32, str::StringBuffer>>(m::Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },
        {
            "name": "Generics with conflicting type names",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value * 2
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = 32
                }

                var m2 = m2::Map {
                    .key = 44,
                    .value = v2
                }

                assert(m1.key == k1)
                assert(m1.value == 32)

                assert(m2.key == 44)
                assert(m2.value == v2)

                assert(m1.call() == 64)
                assert(m2.call() == v2)

            `
        },
        {
            "name": "Generics with conflicting type names generic",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = m2::Map {
                        .key = 44,
                        .value = v2
                    }
                }

                assert(m1.key == k1)
                assert(m1.value.key == 44)
                assert(m1.value.value == v2)

                assert(m1.call().key == 44)
                assert(m1.value.call() == v2)

            `
        },
        {
            "name" : "Generic Type Infer Return Type Simple",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                assert(doSomething(t) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Void",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() {
                    return;
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                doSomething(t)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.x.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                var o = Other {.x = t }
                assert(doSomething(o) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething(t)
                assert(o.x == 8)
            `,
            "error" : "unable to infer generic parameters ['T', 'Y'] due to return type of 'lita_test::Other<Y>' containing a generic argument that can not be inferred"
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type Partial",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }

                func doSomething2<T>(a: T) : Other<i32> {
                    return doSomething<T, i32>(a)
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething2(t)
                assert(o.x == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type No Inferrence",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething<Thing, i32>(t)
                assert(o.x == 8)
            `,
        },


        {
            "name" : "Traits With No Impl",
            "definitions": `

                trait Buffer {
                    length: func() : usize;
                }

                @note implements_trait {
                    traits: []u64
                }

                @implements_trait(.traits = []u64 {
                    typeof(:Buffer)
                })
                public struct BufferImpl {
                    buffer: *char
                    length: i32
                }
            `,
            "code": `

            `,
        },*/
    ]
}