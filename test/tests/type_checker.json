{
    "description": "Type Checker",
    "disabled": false,
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [

        {
            "name": "Str assigned to const char pointer",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    name: *const char
                }
            `,
            "code": `
                var t = Test{
                    .name = "Brett"
                }

                assert(strcmp(t.name, "Brett") == 0)
            `,
        },
        {
            "name": "array invalid assignment with string literal",
            "definitions": `
            `,
            "code": `

                var x: [32]char;
                x = "Brett";
            `,
            "error": "'[32]char' is not assignable as arrays are not mutable lvalues"
        },
        {
            "name": "array invalid assignment with array initializer",
            "definitions": `
            `,
            "code": `

                var x: [32]char;
                x = [32]char{'c', '\0'};
            `,
            "error": "'[32]char' is not assignable as arrays are not mutable lvalues"
        },
        {
            "name": "array initializer",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    x: [32]char
                    y: [32]char
                }
            `,
            "code": `

                var a = [2][2]char {
                    [2]char { 'c', '\0' },
                    "H"
                }

                assert(strcmp(a[0], "c") == 0)
                assert(strcmp(a[1], "H") == 0)
            `,
        },
        {
            "name": "struct array initializer",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    x: [32]char
                    y: [32]char
                }
            `,
            "code": `

                var t = Test {
                    .x = [32]char{'c', '\0'},
                    .y = "Brett"

                }

                var x: [32]char;
                var y: [32]char;
                assert(strcmp(t.x, "c") == 0)
                assert(strcmp(t.y, "Brett") == 0)
            `,
        },
        {
            "name": "array assigned to str",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    name: *char
                    x: [32]char
                }

                struct X {
                    x: [32]char
                }
            `,
            "code": `
                var m : [32]char = "Brett"
                assert(strcmp(m, "Brett") == 0)
            `,
        },
        {
            "name": "array assigned to array",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    name: *char
                    x: [32]char
                }

                struct X {
                    x: [32]char
                }
            `,
            "code": `
                var m : [32]char = "Brett"
                var x = X{m}
                var t = Test{
                    .name = m,
                    .x = x.x

                }
            `,
            "error": "'[32]char' is not assignable as arrays are not mutable lvalues"
        },
        {
            "name": "array passed to function",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                func testPass(a: [32]char) : *char {
                    return a;
                }
            `,
            "code": `
                var m : [32]char = "Brett"

                var x = testPass(m)
                assert(strcmp(x, "Brett") == 0)
            `,
        },
        {
            "name": "struct default values",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    x: [2]const char = "H"
                    y: *const char = "Hello"
                    z: [2]const char = [2]const char {'Z', '\0'}
                }
            `,
            "code": `
                var t = Test {}
                assert(strcmp(t.x, "H") == 0)
                assert(strcmp(t.y, "Hello") == 0)
                assert(strcmp(t.z, "Z") == 0)
            `,
        },
        {
            "name": "note default values",
            "definitions": `
                @note Test {
                    x: [2]const char = "H"
                    y: *const char = "Hello"
                    z: [2]const char = [2]const char {'Z', '\0'}
                }

                @Test(
                )
            `,
            "code": `

            `,
        },
        {
            "name": "Const char index to char",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct Test {
                    name: *const char

                }
            `,
            "code": `
                var t = Test{"Brett"}
                var x = *t.name

                assert(x == 'B')
            `,
        },


        {
            "name": "Anon Union",
            "definitions": `
                @include("<string.h>");
                @foreign func strcmp(a:*const char, b:*const char) : i32;

                struct X {
                    a: i32
                }

                func (x: *X) method() : i32 {
                    return x.a
                }

                struct Test {
                    union {
                        w: *X
                        y: *X
                    }
                }
            `,
            "code": `
                var x = X{4}
                var t = Test {.w = &x}
                var w = t.w
                assert(w.method() == 4)
            `,
        },

    ]
}