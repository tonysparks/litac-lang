{
    "description": "Tests Generics",
    "program": `
        @include("assert.h");
        @foreign func assert(e:bool):void;

        %definitions%

        func main(len:i32, args:**char):i32 {
            %code%
        }
    `,
    "tests": [
        {
            "name": "Generic of same type name in different module struct member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            aa: A
                        }

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            b: B
                        }

                        public struct B {
                            array: Array<*TestStruct>
                        }
                    `
                }
            ],
            "code": `
                var a = A{}
                var b = b::B{}
            `,
        },
        {
            "name": "Generic of same type name in different module member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                }
            ],
            "code": `
                var a = TestStruct{}
                var b = b::TestStruct{}
            `,
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<m::Map<i32, str::StringBuffer>>(m::Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },
        {
            "name": "Generics with conflicting type names",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value * 2
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = 32
                }

                var m2 = m2::Map {
                    .key = 44,
                    .value = v2
                }

                assert(m1.key == k1)
                assert(m1.value == 32)

                assert(m2.key == 44)
                assert(m2.value == v2)

                assert(m1.call() == 64)
                assert(m2.call() == v2)

            `
        },
        {
            "name": "Generics with conflicting type names generic",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = m2::Map {
                        .key = 44,
                        .value = v2
                    }
                }

                assert(m1.key == k1)
                assert(m1.value.key == 44)
                assert(m1.value.value == v2)

                assert(m1.call().key == 44)
                assert(m1.value.call() == v2)

            `
        },
        {
            "name" : "Generic Type Infer Return Type Simple",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                assert(doSomething(t) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Void",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() {
                    return;
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                doSomething(t)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.x.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                var o = Other {.x = t }
                assert(doSomething(o) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething(t)
                assert(o.x == 8)
            `,
            "error" : "unable to infer generic parameters ['T', 'Y'] due to return type of 'lita_test::Other<Y>' containing a generic argument that can not be inferred"
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type Partial",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }

                func doSomething2<T>(a: T) : Other<i32> {
                    return doSomething<T, i32>(a)
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething2(t)
                assert(o.x == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type No Inferrence",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething<Thing, i32>(t)
                assert(o.x == 8)
            `,
        },



        ///////////////////////////////
        {
            "name": "Generics with module alias",
            "definitions": `
                import "map1" as m1;
            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct XMap<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *XMap<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                },
            ],
            "code": `
                var k1 = "Hello";
                var m1 = m1::XMap {
                    .key = k1,
                    .value = 32
                }

                assert(m1.key == k1)
                assert(m1.value == 32)
                assert(m1.call() == 32)

            `
        },

        {
            "name": "Generics with conflicting type names",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value * 2
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = 32
                }

                var m2 = m2::Map {
                    .key = 44,
                    .value = v2
                }

                assert(m1.key == k1)
                assert(m1.value == 32)

                assert(m2.key == 44)
                assert(m2.value == v2)

                assert(m1.call() == 64)
                assert(m2.call() == v2)

            `
        },

        {
            "name": "Generics with conflicting type names generic",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = m2::Map {
                        .key = 44,
                        .value = v2
                    }
                }

                assert(m1.key == k1)
                assert(m1.value.key == 44)
                assert(m1.value.value == v2)

                assert(m1.call().key == 44)
                assert(m1.value.call() == v2)

            `
        },

        {
            "name": "Generics struct with union",
            "definitions": `
                struct Person<T> {
                    union X<T> {
                        v: T
                    }
                }

            `,
            "code": `
                var x = Person<i32> { .X: X<i32>{4} }
                assert(x.X.v == 4)

            `
        },
        {
            "name": "Generics struct within union and generic field",
            "definitions": `
                struct Person<T> {
                    union X<T> {
                        v: T
                    }
                    age: T
                }

            `,
            "code": `
                var x = Person<i32> { .X: X<i32>{4}, .age:56 }
                assert(x.X.v == 4)
                assert(x.age == 56)
            `
        },
        {
            "name": "Generics struct within union and field",
            "definitions": `
                struct Person<T> {
                    union X<T> {
                        v: T
                    }
                    age: i64
                }

            `,
            "code": `
                var x = Person<i32> { .X: X<i32>{4}, .age:56_i64 }
                assert(x.X.v == 4)
                assert(x.age == 56_i64)
            `
        },
        {
            "name": "Generics struct and function",
            "definitions": `
                @include("stdlib.h");

                @foreign func malloc(size: usize) : *void;

                struct Array<T> {
                    size: i32
                    capacity: i32
                    elements: *T
                }

                func ArrayInit<T>(a: **Array<T>, initialSize: i32) {
                    var size = sizeof(Array<T>) + (sizeof(T) * initialSize as (u64));
                    *a = malloc(size) as (*Array<T>);
                    (*a).size = 0;
                    (*a).capacity = initialSize;
                    (*a).elements = (*a + sizeof(Array<T>)) as (*T)
                }

                func ArrayAdd<T>(a: *Array<T>, element: T) {
                 //   a.elements[a.size] = element;
                    a.size += 1
                }

            `,
            "code": `
                var a : *Array<i32> = null;
                ArrayInit<i32>(&a, 23);

                assert(a);
                assert(a.capacity == 23)
                assert(a.size == 0);

                ArrayAdd<i32>(a, 4)
                //assert(a.elements[0] == 4)

            `
        },
        {
            "name": "Generics with greaterthan sign",
            "definitions": `
                func test<T>(a: T) : T {
                    return a
                }

            `,
            "code": `
                var x = test<i32> (4) < 5;
                assert(x)
            `
        },
        {
            "name": "Generics with greaterthan sign cast",
            "definitions": `
                struct Test<T> {
                    u: T
                }

            `,
            "code": `
                var a: Test<f32>{}
                var b: Test<f32>{}
                var x = a as (Test<f32>) > 0
                assert(x)
            `,
            "error": "illegal, left operand has type 'lita_test::Test<f32>'"
        },
        {
            "name": "Break Generics via Expression",
            "code": `
                var a = 1
                var b = 2
                var c = a < b > 2
                assert(!c)
            `,
        },
        {
            "name": "Break Generics via Cast",
            "definitions": `
                struct Test {
                    u: i32
                }

            `,
            "code": `
                var a = Test {}
                var b = 2
                var c = a as (Test) < b > 2
                assert(!c)
            `,
            "error": "illegal, left operand has type 'Test'"
        },
        {
            "name": "Generics via Sizeof with lt expr",
            "definitions": `
                struct Test {
                    u: i32
                }

            `,
            "code": `
                var b = 1
                var c = sizeof(:Test) < b > 0
                assert(c == false)
            `,
        },
        {
            "name": "Break Generics via Sizeof",
            "definitions": `
                struct Test {
                    u: i32
                }

            `,
            "code": `
                var b = 1
                var c = sizeof (Test < b > 0)
                assert(c == false)
            `,
            "error": "Missing )"
        },
        {
            "name": "ReadME Generics",
            "definitions": `

                // Defines a generic structure
                struct Vec2<T> {
                    x: T
                    y: T
                }

                // Defines a generic function
                func Vec2Add<T>(a: Vec2<T>, b: Vec2<T>, out: Vec2<T>) : Vec2<T> {
                    out.x = a.x + b.x
                    out.y = a.y + b.y
                    return out
                }

                // You alias this type
                typedef Vec2<i32> as Vec2i

            `,
            "code": `

                var origin = Vec2<f32> { 0.0f, 0.0f }  // using generics syntax
                var vel    = Vec2i { 0,0 }           // using the alias

                Vec2Add<i32>(vel, vel, vel)
                Vec2Add<f32>(origin, origin, origin)

            `
        },
        {
            "name": "Generic Func Ptr in Struct",
            "definitions": `

                // Defines a generic structure
                struct Test<T> {
                    y: func<T>(T):T
                }

                func test(a:i32) : i32 {
                    return a;
                }

            `,
            "code": `

                var t = Test<i32> { &test }
                assert(t.y(1) == 1)
            `
        },
        {
            "name": "Generic Func Ptr in Struct x2",
            "definitions": `

                struct Test<T> {
                    y: func<T>(T):T
                }

                func test(a:i32) : i32 {
                    return a;
                }
                func test2(a:f32) : f32 {
                    return a;
                }
            `,
            "code": `

                var t = Test<i32> { &test }
                assert(t.y(1) == 1)

                var t2 = Test<f32> { &test2 }
                assert(t2.y(1.4f) == 1.4f)
            `
        },
        {
            "name": "Generic Func Ptr in Func",
            "definitions": `
                func testx(a:i32) : i32 {
                    return a;
                }

                func gen<T>(a: func<T>(T):T, b: T) : T {
                    return a<T>(b);
                }

            `,
            "code": `

                var t = gen<i32>(&testx, 24)
                assert(t == 24)
            `
        },
        {
            "name": "Invalid Generic Func Ptr in Func",
            "definitions": `
                func test(a:f32) : f32 {
                    return a;
                }

                func gen<T>(a: func<T>(T):T, b: T) : T {
                    return a<T>(b);
                }

            `,
            "code": `

                var t = gen<i32>(&test, 24)
                assert(t == 24)
            `,
            "error": "'func(f32) : f32' is not of type 'func(i32) : i32'"
        },
        {
            "name": "Generic of Generic",
            "definitions": `
                struct B<T> {
                    y : T
                }

                struct A<T> {
                    x : *T
                }
            `,
            "code": `
                var b = B<i32> {4};
                var a = A<B<i32>> {
                    .x: &b
                }

                assert(a.x.y == 4)
            `,
        },
        {
            "name": "Generics Struct with No GenArgs",
            "definitions": `
                struct X<T> {
                    y: T
                }
            `,
            "code": `
                var t = X{}
            `,
            "error": "'X' is missing generic arguments ['T']"
        },
        {
            "name": "Generics Union with No GenArgs",
            "definitions": `
                union X<T> {
                    y: T
                }
            `,
            "code": `
                var t = X{}
            `,
            "error": "'X' is missing generic arguments ['T']"
        },
        {
            "name": "Generics Func with No GenArgs",
            "definitions": `
                func test<T>() {
                }
            `,
            "code": `
                test()
            `,
            "error": "'test' is missing generic arguments ['T']"
        },
        {
            "name": "Generics Var mismatch Types",
            "definitions": `
                struct X<T> {
                    y : T
                }
            `,
            "code": `
                var x : X<i32> = X<f32>{}
            `,
            "error": "'lita_test::X<f32>' can't be assigned to 'lita_test::X<i32>'"
        },
        {
            "name": "Generics Var mismatch Types no GenArgs",
            "definitions": `
                struct X<T> {
                    y : T
                }
            `,
            "code": `
                var x : X = X<f32>{}
            `,
            "error": "'lita_test::X<f32>' can't be assigned to 'X'"
        },
        {
            "name": "Generics Var mismatch Types no GenArgs Init",
            "definitions": `
                struct X<T> {
                    y : T
                }
            `,
            "code": `
                var x : X<f32> = X{}
            `,
            "error": "'X' is missing generic arguments ['T']"
        },
        {
            "name": "Generics call generic func ptr in struct field",
            "definitions": `
                struct Person<T> {
                    f : func<T>(T): T
                }

                func test(a:i32) : i32 {
                    return a
                }

                func call<T>(p : Person<T>) : T {
                    return p.f<T>(4)
                }

            `,
            "code": `
                var x = Person<i32> {
                    .f: &test
                }
                assert(call<i32>(x) == 4)

            `
        },
        {
            "name": "Func Independent declaration Generics",
            "definitions": `
                func test<T>(a: T) : i32 {
                    return a.x.y;
                }

                struct A {
                    x : B
                }
                struct B {
                    y : i32
                }
            `,
            "code": `
                var a = A {
                    .x: B {4}
                }
                assert(test<A>(a) == 4)
            `,
        },
        {
            "name": "Generics embedded",
            "definitions": `
                typedef func<T>(T):T as Test<T>;

                func test<T>(t: Test<T>, a: T) : T {
                    if(!t) {
                        return a + 1
                    }
                    return t<T>(a)
                }

                func z(a: i32) : i32 {
                    return a
                }

            `,
            "code": `
                assert(test<i32>(&z, 4) == 4)
            `,
        },

        {
            "name": "TypeCheck struct ptr",
            "definitions": `


                struct X {
                    a: i32
                }

                struct Y {
                    b: i32
                }

                func (x: *X) method(y: Y) : i32 {
                    return call(y)
                }

                func call(y: *Y) : i32 {
                    return y.b
                }

            `,
            "code": `
                var x = X{4}
                var y = &Y{8}

                assert(x.method(y) == 8)
                assert(call(*y) == 8)
            `,
        },
        {
            "name": "Generics Test missing generics",
            "definitions": `


                struct X<T> {
                    a: T
                }

                func (x: *X<T>) method(t: T) : T {
                    return x.a
                }


            `,
            "code": `
                var x = X<i32>{4}
                x.method(8)
            `,
            "error": "unknown type 'T'"
        },

        {
            "name": "Generic With Typedef Generic",
            "definitions": `
                import "std/string/buffer";
                import "std/map";
                import "std/hash"

                public typedef Map<i32, StringBuffer> as XStringMap

                public func (this: *Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = StrMap<XStringMap>(XStringMap{})
                test.exec()

            `,
        },
        {
            "name": "Generic With Generic",
            "definitions": `
                import "std/string/buffer";
                import "std/map";
                import "std/hash"

                public func (this: *Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = StrMap<Map<i32, StringBuffer>>(Map<i32, StringBuffer>{})
                test.exec()

            `
        },

        {
            "name": "Generic With Typedef Generic with alias",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map";
                import "std/hash"

                public typedef Map<i32, str::StringBuffer> as XStringMap

                public func (this: *Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = StrMap<XStringMap>(XStringMap{})
                test.exec()

            `,
        },
        {
            "name": "Generic With Generic with alias",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map";
                import "std/hash"

                public func (this: *Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = StrMap<Map<i32, str::StringBuffer>>(Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },

        {
            "name": "Generic With Typedef Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public typedef m::Map<i32, str::StringBuffer> as StringMap

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<StringMap>(StringMap{})
                test.exec()

            `,
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<m::Map<i32, str::StringBuffer>>(m::Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "Person" as p
            `,
            "modules": [
                {
                    "name": "Person",
                    "program": `
                        public struct Person {
                            age: i32
                        }

                        public func (this: *Person) getAge() : i32 {
                            return this.age
                        }
                    `
                }
            ],
            "code": `
                var person = p::Person {.age = 31}
                assert(person.getAge() == 31)

            `
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<m::Map<i32, str::StringBuffer>>(m::Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },

        {
            "name" : "Trait in other module with Generics",
            "modules": [
                {
                    "name": "pool",
                    "program": `
                    public trait Counter<T> {
                        count: func(*T) : void
                    }

                    public struct Pool<T> {
                        counter: Counter<T>
                    }

                    public func (this: *Pool<T>) init<T>(x: Counter<T>) {
                        this.counter = x
                    }

                    // public func (this: *Pool<T>) count<T>(x: *T) {
                    //     this.counter.count(x)
                    // }
                    `
                },
                {
                    "name": "engine",
                    "program": `
                    import "pool"
                    import "std/assert"

                    internal struct Engine {
                        pool: Pool<Result>
                    }

                    struct Result {
                        x: i32
                    }

                    internal func (this: *Engine) init() {
                        this.pool.init(this)
                    }

                    func (this: *Engine) other(r: *Result) {

                    }

                    public func (this: *Engine) count(r: *Result) {
                        assert(r != null)
                    }
                    `
                }
            ],
            "definitions": `
                import using "engine"

            `,
            "code": `
                var engine = Engine{}
                engine.init()
            `,
        },
        {
            "name": "Array Init",
            "definitions": `
                import "std/mem"
                import "std/mem/linear_allocator"
                import "std/mem/track_allocator"
                import "std/mem/debug_allocator" as d
                import "std/array"
            `,
            "code": `

            `
        },

        {
            "name": "Generic Function With Alias",
            "definitions": `
                import "a"
                import "b" as b
            `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            aa: A
                        }

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        #if (DEBUG)
                        public struct TestStruct {
                            a: i32
                            b: A
                        }
                        #else
                        public struct TestStruct {
                            a: i32
                            b: A
                            filename: [32]char
                            lineno: i32
                        }
                        #end

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
            ],
            "code": `
                var ta = TestStruct{}
                var tb = b::TestStruct{}
            `
        },


        {
            "name": "Generics Type Inference from Union Generic Type with typedef",
            "definitions": `
                union Test<V> {
                    a : V
                }

                typedef Test<V> as Foo<V>

                func test<T>(t:Foo<T>):T {
                    return t.a
                }
            `,
            "code": `
                var t = Test<i32> { 4 }
                assert(test(t) == 4)
            `,
        },

        {
            "name": "Array Init",
            "definitions": `
                import "std/array"
            `,
            "code": `
                var array = ArrayInit<i32>()
            `
        },


        {
            "name": "Generic of same type name in different module struct member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            aa: A
                        }

                        public struct A {
                            array: Array<*TestStruct>
                        }
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                            b: B
                        }

                        public struct B {
                            array: Array<*TestStruct>
                        }
                    `
                }
            ],
            "code": `
                var a = A{}
                var b = b::B{}
            `,
        },
        {
            "name": "Generic of same type name in different module member",
            "definitions": `
                import "a";
                import "b" as b;
                `,
            "modules": [
                {
                    "name" : "a",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                },
                {
                    "name" : "b",
                    "program" : `
                        import "std/array"
                        public struct TestStruct {
                            a: i32
                        }

                        var array: Array<*TestStruct>
                    `
                }
            ],
            "code": `
                var a = TestStruct{}
                var b = b::TestStruct{}
            `,
        },
        {
            "name": "Generic With Generic with alias2",
            "definitions": `
                import "std/string/buffer" as str;
                import "std/map" as m;
                import "std/hash"

                public func (this: *m::Map<K, V>) exec<K,V>() {
                }
            `,
            "code": `
                var test = m::StrMap<m::Map<i32, str::StringBuffer>>(m::Map<i32, str::StringBuffer>{})
                test.exec()

            `
        },
        {
            "name": "Generics with conflicting type names",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value * 2
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = 32
                }

                var m2 = m2::Map {
                    .key = 44,
                    .value = v2
                }

                assert(m1.key == k1)
                assert(m1.value == 32)

                assert(m2.key == 44)
                assert(m2.value == v2)

                assert(m1.call() == 64)
                assert(m2.call() == v2)

            `
        },
        {
            "name": "Generics with conflicting type names generic",
            "definitions": `
                import "map1" as m1
                import "map2" as m2

            `,
            "modules": [
                {
                    "name": "map1",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                },
                {
                    "name": "map2",
                    "program": `
                        public struct Map<K, V> {
                            key: K
                            value: V
                        }

                        public func (this: *Map<K,V>) call<K,V>() : V {
                            return this.value
                        }
                    `
                }
            ],
            "code": `
                var k1 = "Hello";
                var v2 = "Hi"
                var m1 = m1::Map {
                    .key = k1,
                    .value = m2::Map {
                        .key = 44,
                        .value = v2
                    }
                }

                assert(m1.key == k1)
                assert(m1.value.key == 44)
                assert(m1.value.value == v2)

                assert(m1.call().key == 44)
                assert(m1.value.call() == v2)

            `
        },
        {
            "name" : "Generic Type Infer Return Type Simple",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                assert(doSomething(t) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Void",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() {
                    return;
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                doSomething(t)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Y {
                    return a.x.doThat()
                }
            `,
            "code": `
                var t = Thing {4}
                var o = Other {.x = t }
                assert(doSomething(o) == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething(t)
                assert(o.x == 8)
            `,
            "error" : "unable to infer generic parameters ['T', 'Y'] due to return type of 'lita_test::Other<Y>' containing a generic argument that can not be inferred"
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type Partial",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }

                func doSomething2<T>(a: T) : Other<i32> {
                    return doSomething<T, i32>(a)
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething2(t)
                assert(o.x == 8)
            `,
        },
        {
            "name" : "Generic Type Infer Return Type With Generic Type No Inferrence",
            "definitions": `

                struct Thing {
                    a: i32
                }

                func (this: *Thing) doThat() : i32 {
                    return this.a * 2
                }

                struct Other<X> {
                    x: X
                }

                func doSomething<T, Y>(a: T) : Other<Y> {
                    var r = a.doThat()
                    return Other<Y> {
                        .x = r
                    }
                }
            `,
            "code": `
                var t = Thing {4}
                var o = doSomething<Thing, i32>(t)
                assert(o.x == 8)
            `,
        },


        {
            "name" : "Traits With No Impl",
            "definitions": `

                trait Buffer {
                    length: func() : usize;
                }

                @note implements_trait {
                    traits: []u64
                }

                @implements_trait(.traits = []u64 {
                    typeof(:Buffer)
                })
                public struct BufferImpl {
                    buffer: *char
                    length: i32
                }
            `,
            "code": `

            `,
        },

    ]
}