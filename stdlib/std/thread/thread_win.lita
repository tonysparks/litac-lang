/* Based off of tinycthread
Copyright (c) 2012 Marcus Geelnard
Copyright (c) 2013-2016 Evan Nemerson
*/

@raw("""
/* Which platform are we on? */
#if !defined(_TTHREAD_PLATFORM_DEFINED_)
  #if defined(_WIN32) || defined(__WIN32__) || defined(__WINDOWS__)
    #define _TTHREAD_WIN32_
  #else
    #define _TTHREAD_POSIX_
  #endif
  #define _TTHREAD_PLATFORM_DEFINED_
#endif

/* Activate some POSIX functionality (e.g. clock_gettime and recursive mutexes) */
#if defined(_TTHREAD_POSIX_)
  #undef _FEATURES_H
  #if !defined(_GNU_SOURCE)
    #define _GNU_SOURCE
  #endif
  #if !defined(_POSIX_C_SOURCE) || ((_POSIX_C_SOURCE - 0) < 199309L)
    #undef _POSIX_C_SOURCE
    #define _POSIX_C_SOURCE 199309L
  #endif
  #if !defined(_XOPEN_SOURCE) || ((_XOPEN_SOURCE - 0) < 500)
    #undef _XOPEN_SOURCE
    #define _XOPEN_SOURCE 500
  #endif
  #define _XPG6
#endif

/* Generic includes */
#include <time.h>

/* Platform specific includes */
#if defined(_TTHREAD_POSIX_)
  #include <pthread.h>
#elif defined(_TTHREAD_WIN32_)
  #ifndef WIN32_LEAN_AND_MEAN
    #define WIN32_LEAN_AND_MEAN
    #define __UNDEF_LEAN_AND_MEAN
  #endif
  #include <windows.h>
  #ifdef __UNDEF_LEAN_AND_MEAN
    #undef WIN32_LEAN_AND_MEAN
    #undef __UNDEF_LEAN_AND_MEAN
  #endif
#endif

/* Compiler-specific information */
#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
  #define TTHREAD_NORETURN _Noreturn
#elif defined(__GNUC__)
  #define TTHREAD_NORETURN __attribute__((__noreturn__))
#else
  #define TTHREAD_NORETURN
#endif

/* If TIME_UTC is missing, provide it and provide a wrapper for
   timespec_get. */
#ifndef TIME_UTC
  #define TIME_UTC 1
  #define _TTHREAD_EMULATE_TIMESPEC_GET_
#endif

/* Macros */
#if defined(_TTHREAD_WIN32_)
  #define TSS_DTOR_ITERATIONS (4)
#else
  #define TSS_DTOR_ITERATIONS PTHREAD_DESTRUCTOR_ITERATIONS
#endif


/* Thread local storage */
#if defined(_TTHREAD_WIN32_)
typedef DWORD tss_t;
#else
typedef pthread_key_t tss_t;
#endif

/** Destructor function for a thread-specific storage.
* @param val The value of the destructed thread-specific storage.
*/
typedef void (*tss_dtor_t)(void *val);

/** Create a thread-specific storage.
* @param key The unique key identifier that will be set if the function is
*        successful.
* @param dtor Destructor function. This can be NULL.
* @return @ref thrd_success on success, or @ref thrd_error if the request could
* not be honored.
* @note On Windows, the @c dtor will definitely be called when
* appropriate for threads created with @ref thrd_create.  It will be
* called for other threads in most cases, the possible exception being
* for DLLs loaded with LoadLibraryEx.  In order to be certain, you
* should use @ref thrd_create whenever possible.
*/
int tss_create(tss_t *key, tss_dtor_t dtor);

/** Delete a thread-specific storage.
* The function releases any resources used by the given thread-specific
* storage.
* @param key The key that shall be deleted.
*/
void tss_delete(tss_t key);

/** Get the value for a thread-specific storage.
* @param key The thread-specific storage identifier.
* @return The value for the current thread held in the given thread-specific
* storage.
*/
void *tss_get(tss_t key);

/** Set the value for a thread-specific storage.
* @param key The thread-specific storage identifier.
* @param val The value of the thread-specific storage to set for the current
*        thread.
* @return @ref thrd_success on success, or @ref thrd_error if the request could
* not be honored.
*/
int tss_set(tss_t key, void *val);

#if defined(_TTHREAD_WIN32_)
  typedef struct {
    LONG volatile status;
    CRITICAL_SECTION lock;
  } once_flag;
  #define ONCE_FLAG_INIT {0,}
#else
  #define once_flag pthread_once_t
  #define ONCE_FLAG_INIT PTHREAD_ONCE_INIT
#endif

/** Invoke a callback exactly once
 * @param flag Flag used to ensure the callback is invoked exactly
 *        once.
 * @param func Callback to invoke.
 */
#if defined(_TTHREAD_WIN32_)
  void call_once(once_flag *flag, void (*func)(void));
#else
  #define call_once(flag,func) pthread_once(flag,func)
#endif

#ifdef __cplusplus
}
#endif

""");

@raw("""
#include <stdlib.h>

/* Platform specific includes */
#if defined(_TTHREAD_WIN32_)
  #include <process.h>
  #include <sys/timeb.h>

  #define _CONDITION_EVENT_ONE 0
  #define _CONDITION_EVENT_ALL 1
#endif

typedef struct _timeb _timeb;


struct TinyCThreadTSSData {
  void* value;
  tss_t key;
  struct TinyCThreadTSSData* next;
};

static tss_dtor_t _tinycthread_tss_dtors[1088] = { NULL, };

static _Thread_local struct TinyCThreadTSSData* _tinycthread_tss_head = NULL;
static _Thread_local struct TinyCThreadTSSData* _tinycthread_tss_tail = NULL;

static void _tinycthread_tss_cleanup (void);

static void _tinycthread_tss_cleanup (void) {
  struct TinyCThreadTSSData* data;
  int iteration;
  unsigned int again = 1;
  void* value;

  for (iteration = 0 ; iteration < TSS_DTOR_ITERATIONS && again > 0 ; iteration++)
  {
    again = 0;
    for (data = _tinycthread_tss_head ; data != NULL ; data = data->next)
    {
      if (data->value != NULL)
      {
        value = data->value;
        data->value = NULL;

        if (_tinycthread_tss_dtors[data->key] != NULL)
        {
          again = 1;
          _tinycthread_tss_dtors[data->key](value);
        }
      }
    }
  }

  while (_tinycthread_tss_head != NULL) {
    data = _tinycthread_tss_head->next;
    free (_tinycthread_tss_head);
    _tinycthread_tss_head = data;
  }
  _tinycthread_tss_head = NULL;
  _tinycthread_tss_tail = NULL;
}

static void NTAPI _tinycthread_tss_callback(PVOID h, DWORD dwReason, PVOID pv)
{
  (void)h;
  (void)pv;

  if (_tinycthread_tss_head != NULL && (dwReason == DLL_THREAD_DETACH || dwReason == DLL_PROCESS_DETACH))
  {
    _tinycthread_tss_cleanup();
  }
}

#if defined(_MSC_VER)
  #ifdef _M_X64
    #pragma const_seg(".CRT$XLB")
  #else
    #pragma data_seg(".CRT$XLB")
  #endif
  PIMAGE_TLS_CALLBACK p_thread_callback = _tinycthread_tss_callback;
  #ifdef _M_X64
    #pragma data_seg()
  #else
    #pragma const_seg()
  #endif
#else
  PIMAGE_TLS_CALLBACK p_thread_callback __attribute__((section(".CRT$XLB"))) = _tinycthread_tss_callback;
#endif

""");

import "std/libc" as c


@generated
public enum ThreadStatus {
    ERROR    = 0,
    SUCCESS  = 1,
    TIMEDOUT = 2,
    BUSY     = 3,
    NOMEM    = 4,
}

@generated
public enum MutexType {
    PLAIN     = 0,
    TIMED     = 1,
    RECURSIVE = 2,
}

/*==============================================================
    Windows specific Types bindings
  ==============================================================
*/

@foreign
typedef void as WORD;

@foreign
typedef void as DWORD;

@foreign
typedef void as DWORD_PTR;

@foreign
typedef void as LPDWORD;

@foreign
typedef *void as LPVOID;

@foreign
struct CRITICAL_SECTION;

@foreign
typedef void as HANDLE;

@foreign
struct _timeb {
    time: time_t
    millitm: i64
}

@foreign
struct SYSTEM_INFO {
    union DUMMYUNIONNAME {
        dwOemId: DWORD
        struct DUMMYSTRUCTNAME {
            wProcessorArchitecture: WORD;
            wReserved: WORD;
        }
    }
    dwPageSize: DWORD;
    lpMinimumApplicationAddress: LPVOID;
    lpMaximumApplicationAddress: LPVOID;
    dwActiveProcessorMask: DWORD_PTR;
    dwNumberOfProcessors: DWORD;
    dwProcessorType: DWORD;
    dwAllocationGranularity: DWORD;
    wProcessorLevel: WORD;
    wProcessorRevision: WORD;
}

@foreign
const INFINITE: i32;

@foreign
const WAIT_OBJECT_0: i32;

@foreign
const WAIT_ABANDONED: i32;

@foreign
const WAIT_TIMEOUT: i32;

@foreign
const WAIT_FAILED: i32;

@foreign
const WAIT_IO_COMPLETION: i32;

@foreign
const TIME_UTC: i32;

@foreign
const _CONDITION_EVENT_ONE: i32;

@foreign
const _CONDITION_EVENT_ALL: i32;

@foreign
const CREATE_SUSPENDED: i32;


@foreign
func _ftime_s(t: *_timeb);

@foreign
func InitializeCriticalSection(cs: *CRITICAL_SECTION);

@foreign
func EnterCriticalSection(cs: *CRITICAL_SECTION);

@foreign
func TryEnterCriticalSection(cs: *CRITICAL_SECTION) : bool;

@foreign
func LeaveCriticalSection(cs: *CRITICAL_SECTION);

@foreign
func DeleteCriticalSection(cs: *CRITICAL_SECTION);

@foreign
func WaitForSingleObject(handle: HANDLE, t: i64) : i32;

@foreign
func WaitForMultipleObjects(count: i32, handles: *HANDLE, b: bool, t: DWORD) : DWORD;

@foreign
func CloseHandle(handle: HANDLE) : bool;

@foreign
func CreateMutex(n: *void, b: bool, x: *void) : HANDLE;

@foreign
func ReleaseMutex(handle: HANDLE) : bool;

@foreign
func CreateEvent(n: *void, b: bool, c: bool, x: *void) : HANDLE;

@foreign
func SetEvent(handle: HANDLE) : i32;

@foreign
func ResetEvent(handle: HANDLE) : i32;

@foreign
public func Sleep(msec: i64);

@foreign
func SleepEx(msec: DWORD, b: bool) : DWORD;

@foreign
typedef i64 as time_t;

@foreign
func _tinycthread_tss_cleanup();

@foreign
struct TinyCThreadTSSData;

@foreign
var _tinycthread_tss_head: *TinyCThreadTSSData;

@foreign
func CreateThread(n: *void, i: i32, fn: func(LPVOID): DWORD, t: LPVOID, z:i32, v: *void) : HANDLE;

@foreign
func ResumeThread(handle: HANDLE) : DWORD;

@foreign
func SuspendThread(handle: HANDLE) : DWORD;

@foreign
func GetExitCodeThread(h: HANDLE, res: *DWORD) : i32;

@foreign
func GetCurrentThread() : HANDLE;

@foreign
func GetThreadId(h: HANDLE) : i32;

@foreign
func ExitThread(res: DWORD);

@foreign
func GetSystemInfo(info: *SYSTEM_INFO): i32;

/*==============================================================
    Public APIs
  ==============================================================
*/

public struct TimeSpec {
    sec: time_t
    nsec: i64
}


public func (ts: *TimeSpec) get(base: i32) : i32 {
    if (base != TIME_UTC) {
        return 0;
    }

    var tb: _timeb;
    _ftime_s(&tb);

    ts.sec = tb.time as (time_t);
    ts.nsec = 1_000_000_i64 * tb.millitm as (i64);

    return base;
}



/*==============================================================
    Mutex Public API
  ==============================================================
*/

public struct Mutex {
    union mHandle {
        cs: CRITICAL_SECTION;    /* Critical section handle (used for non-timed mutexes) */
        mut: HANDLE;             /* Mutex handle (used for timed mutex) */
    };                           /* Mutex handle */
    mAlreadyLocked: bool;        /* TRUE if the mutex is already locked */
    mRecursive: bool;            /* TRUE if the mutex is recursive */
    mTimed: bool;                /* TRUE if the mutex is timed */
}

public func (mtx: *Mutex) init(type: i32 = MutexType.PLAIN) : ThreadStatus {
    mtx.mAlreadyLocked = false;
    mtx.mRecursive = type & MutexType.RECURSIVE;
    mtx.mTimed = type & MutexType.TIMED;

    if (!mtx.mTimed) {
        InitializeCriticalSection(&(mtx.mHandle.cs));
    }
    else {
        mtx.mHandle.mut = CreateMutex(null, false, null);
        if (mtx.mHandle.mut == null) {
            return ThreadStatus.ERROR;
        }
    }
    return ThreadStatus.SUCCESS;
}

public func (mtx: *Mutex) destroy() {
    if (!mtx.mTimed) {
        DeleteCriticalSection(&(mtx.mHandle.cs));
    }
    else {
        CloseHandle(mtx.mHandle.mut);
    }
}

public func (mtx: *Mutex) lock() : ThreadStatus {
    if (!mtx.mTimed) {
        EnterCriticalSection(&(mtx.mHandle.cs));
    }
    else {
        switch (WaitForSingleObject(mtx.mHandle.mut, INFINITE)) {
            case WAIT_OBJECT_0:
            break;
        case WAIT_ABANDONED:
        default:
            return ThreadStatus.ERROR;
        }
    }

    if (!mtx.mRecursive) {
        while(mtx.mAlreadyLocked) Sleep(1); /* Simulate deadlock... */
        mtx.mAlreadyLocked = true;
    }
    return ThreadStatus.SUCCESS;
}

public func (mtx: *Mutex) tryLock() : ThreadStatus {
    var ret : ThreadStatus;

    if (!mtx.mTimed) {
        ret = TryEnterCriticalSection(&(mtx.mHandle.cs))
                ? ThreadStatus.SUCCESS : ThreadStatus.BUSY;
    }
    else {
        ret = (WaitForSingleObject(mtx.mHandle.mut, 0) == WAIT_OBJECT_0)
                ? ThreadStatus.SUCCESS : ThreadStatus.BUSY;
    }

    if ((!mtx.mRecursive) && (ret == ThreadStatus.SUCCESS)) {
        if (mtx.mAlreadyLocked) {
            LeaveCriticalSection(&(mtx.mHandle.cs));
            ret = ThreadStatus.BUSY;
        }
        else {
            mtx.mAlreadyLocked = true;
        }
    }
  return ret;
}

public func (mtx: *Mutex) unlock() : ThreadStatus {
    mtx.mAlreadyLocked = false;
    if (!mtx.mTimed) {
        LeaveCriticalSection(&(mtx.mHandle.cs));
    }
    else {
        if (!ReleaseMutex(mtx.mHandle.mut)) {
            return ThreadStatus.ERROR;
        }
    }
    return ThreadStatus.SUCCESS;
}

public func (mtx: *Mutex) timedLock(ts: *TimeSpec) : ThreadStatus {
    var current_ts : TimeSpec;
    var timeoutMs : DWORD;

    if (!mtx.mTimed) {
        return ThreadStatus.ERROR;
    }

    current_ts.get(TIME_UTC);

    if ((current_ts.sec > ts.sec) ||
        ((current_ts.sec == ts.sec) &&
         (current_ts.nsec >= ts.nsec))) {
        timeoutMs = 0;
    }
    else {
        timeoutMs  = (ts.sec  - current_ts.sec) * 1_000_i64;
        timeoutMs += (ts.nsec - current_ts.nsec) / 1_000_000_i64;
        timeoutMs += 1;
    }

    /* TODO: the timeout for WaitForSingleObject doesn't include time
       while the computer is asleep. */
    switch (WaitForSingleObject(mtx.mHandle.mut, timeoutMs)) {
        case WAIT_OBJECT_0:
            break;
        case WAIT_TIMEOUT:
            return ThreadStatus.TIMEDOUT;
        case WAIT_ABANDONED:
        default:
            return ThreadStatus.ERROR;
    }

    if (!mtx.mRecursive) {
        while(mtx.mAlreadyLocked) Sleep(1); /* Simulate deadlock... */
        mtx.mAlreadyLocked = true;
    }

    return ThreadStatus.SUCCESS;
}


/*==============================================================
    Cond Public API
  ==============================================================
*/

public struct Cond {
    mEvents: [2]HANDLE;                   /* Signal and broadcast event HANDLEs. */
    mWaitersCount: u32;                   /* Count of the number of waiters. */
    mWaitersCountLock: CRITICAL_SECTION ; /* Serialize access to mWaitersCount. */
}

public func (cond: *Cond) init() : ThreadStatus {
    cond.mWaitersCount = 0;

    /* Init critical section */
    InitializeCriticalSection(&cond.mWaitersCountLock);

    /* Init events */
    cond.mEvents[_CONDITION_EVENT_ONE] = CreateEvent(null, false, false, null);
    if (cond.mEvents[_CONDITION_EVENT_ONE] == null) {
        cond.mEvents[_CONDITION_EVENT_ALL] = 0;
        return ThreadStatus.ERROR;
    }

    cond.mEvents[_CONDITION_EVENT_ALL] = CreateEvent(null, true, false, null);
    if (cond.mEvents[_CONDITION_EVENT_ALL] == null) {
        CloseHandle(cond.mEvents[_CONDITION_EVENT_ONE]);
        cond.mEvents[_CONDITION_EVENT_ONE] = 0;
        return ThreadStatus.ERROR;
    }

    return ThreadStatus.SUCCESS;
}

public func (cond: *Cond) destroy() {
    if (cond.mEvents[_CONDITION_EVENT_ONE] != null) {
        CloseHandle(cond.mEvents[_CONDITION_EVENT_ONE]);
    }
    if (cond.mEvents[_CONDITION_EVENT_ALL] != null) {
        CloseHandle(cond.mEvents[_CONDITION_EVENT_ALL]);
    }
    DeleteCriticalSection(&cond.mWaitersCountLock);
}


public func (cond: *Cond) signal() : ThreadStatus {
    var haveWaiters: bool;

    /* Are there any waiters? */
    EnterCriticalSection(&cond.mWaitersCountLock);
    haveWaiters = (cond.mWaitersCount > 0);
    LeaveCriticalSection(&cond.mWaitersCountLock);

    /* If we have any waiting threads, send them a signal */
    if(haveWaiters) {
        if (SetEvent(cond.mEvents[_CONDITION_EVENT_ONE]) == 0) {
            return ThreadStatus.ERROR;
        }
    }

    return ThreadStatus.SUCCESS;
}

public func (cond: *Cond) broadcast() : ThreadStatus {
    var haveWaiters: bool;

    /* Are there any waiters? */
    EnterCriticalSection(&cond.mWaitersCountLock);
    haveWaiters = (cond.mWaitersCount > 0);
    LeaveCriticalSection(&cond.mWaitersCountLock);

    /* If we have any waiting threads, send them a signal */
    if(haveWaiters) {
        if (SetEvent(cond.mEvents[_CONDITION_EVENT_ALL]) == 0) {
            return ThreadStatus.ERROR;
        }
    }

    return ThreadStatus.SUCCESS;
}

func (cond: *Cond) _timedWait(mtx: *Mutex, timeout: DWORD) : ThreadStatus {
    var result: DWORD;
    var lastWaiter: bool;

    /* Increment number of waiters */
    EnterCriticalSection(&cond.mWaitersCountLock);
    cond.mWaitersCount += 1;
    LeaveCriticalSection(&cond.mWaitersCountLock);

    /* Release the mutex while waiting for the condition (will decrease
     the number of waiters when done)... */
    mtx.unlock();

    /* Wait for either event to become signaled due to cnd_signal() or
     cnd_broadcast() being called */
    result = WaitForMultipleObjects(2, cond.mEvents, false, timeout);
    if (result == WAIT_TIMEOUT) {
        /* The mutex is locked again before the function returns, even if an error occurred */
        mtx.lock();
        return ThreadStatus.TIMEDOUT;
    }
    else if (result == WAIT_FAILED) {
        /* The mutex is locked again before the function returns, even if an error occurred */
        mtx.lock();
        return ThreadStatus.ERROR;
    }

    /* Check if we are the last waiter */
    EnterCriticalSection(&cond.mWaitersCountLock);
    cond.mWaitersCount -= 1;
    lastWaiter = (result == (WAIT_OBJECT_0 + _CONDITION_EVENT_ALL)) &&
                  (cond.mWaitersCount == 0);
    LeaveCriticalSection(&cond.mWaitersCountLock);

    /* If we are the last waiter to be notified to stop waiting, reset the event */
    if (lastWaiter) {
        if (ResetEvent(cond.mEvents[_CONDITION_EVENT_ALL]) == 0) {
            /* The mutex is locked again before the function returns, even if an error occurred */
            mtx.lock();
            return ThreadStatus.ERROR;
        }
    }

    /* Re-acquire the mutex */
    mtx.lock();

    return ThreadStatus.SUCCESS;
}


public func (cond: *Cond) wait(mtx: *Mutex) : ThreadStatus {
    return cond._timedWait(mtx, INFINITE)
}

public func (cond: *Cond) timedWait(mtx: *Mutex, ts: *const TimeSpec) : ThreadStatus {
    var now: TimeSpec;
    if (now.get(TIME_UTC) == TIME_UTC) {
        var nowInMilliseconds: u64 = now.sec * 1_000_u64 + now.nsec / 1_000_000_u64;
        var tsInMilliseconds: u64  = ts.sec * 1_000_u64 + ts.nsec / 1_000_000_u64;
        var delta = (tsInMilliseconds > nowInMilliseconds) ?
                        (tsInMilliseconds - nowInMilliseconds) as (DWORD) : 0 as (DWORD);
        return cond._timedWait(mtx, delta);
    }

    return ThreadStatus.ERROR;
}

/*==============================================================
    Thread Public APIs
  ==============================================================
*/

public typedef func(*void) : i32 as ThreadStartFn;
public struct Thread {
    hnd: HANDLE
}

/** Information to pass to the new thread (what to run). */
public struct ThreadStartInfo {
    mFunction: ThreadStartFn; /**< Pointer to the function to be executed. */
    mArg: *void;              /**< Function argument for the thread function. */
    allocator: *const Allocator
}


@raw("WINAPI ")
func _thrd_wrapper_function(aArg: LPVOID) : DWORD {

    /* Get thread startup information */
    var ti: *ThreadStartInfo = aArg as (*ThreadStartInfo);
    var fun = ti.mFunction;
    var arg = ti.mArg;

    /* The thread is responsible for freeing the startup information */
    ti.allocationr.free(ti as (*void));

    /* Call the actual client thread function */
    var res = fun(arg);

    if (_tinycthread_tss_head != null) {
        _tinycthread_tss_cleanup();
    }

    return res as (DWORD);
}

public func (thr: *Thread) create(
    fun: ThreadStartFn,
    arg: *void,
    allocator: *const Allocator = defaultAllocator) : ThreadStatus {
    /* Fill out the thread startup information (passed to the thread wrapper,
     which will eventually free it) */
    var ti = allocator.alloc(sizeof(:ThreadStartInfo)) as (*ThreadStartInfo);
    if (ti == null) {
        return ThreadStatus.NOMEM;
    }
    ti.mFunction = fun;
    ti.mArg = arg;
    ti.allocator = allocator;

    var state = 0; // suspend ? CREATE_SUSPENDED : 0

    thr.hnd = CreateThread(null, 0, _thrd_wrapper_function, ti as (LPVOID), state, null);

    /* Did we fail to create the thread? */
    if(!thr.hnd) {
        allocator.free(ti);
        return ThreadStatus.ERROR;
    }

    return ThreadStatus.SUCCESS;
}

public func (thr: *Thread) resume() : ThreadStatus {
    var result = ResumeThread(thr.hnd)
    return result < 0 ? ThreadStatus.ERROR : ThreadStatus.SUCCESS
}

public func (thr: *Thread) suspend() : ThreadStatus {
    var result = SuspendThread(thr.hnd)
    return result < 0 ? ThreadStatus.ERROR : ThreadStatus.SUCCESS
}

public func (thr: Thread) detach() : ThreadStatus {
    return CloseHandle(thr.hnd) ? ThreadStatus.SUCCESS : ThreadStatus.ERROR
}

public func (thr: Thread) id() : i32 {
    return GetThreadId(thr.hnd)
}

public func (thr: Thread) equal(other: Thread) : bool {
    return thr.id() == other.id()
}

public func (thr: Thread) join(res: *i32) : ThreadStatus {
    var dwRes: DWORD;

    if (WaitForSingleObject(thr.hnd, INFINITE) == WAIT_FAILED) {
        return ThreadStatus.ERROR;
    }
    if (res != null) {
        if (GetExitCodeThread(thr.hnd, &dwRes) != 0) {
            *res = dwRes as (i32);
        }
        else {
            return ThreadStatus.ERROR;
        }
    }
    CloseHandle(thr.hnd as (HANDLE));

    return ThreadStatus.SUCCESS;
}

public func (thr: Thread) yield() {
    Sleep(0)
}


public func ThreadCurrent() : Thread {
    var hnd = GetCurrentThread();
    return Thread{hnd}
}

@raw("TTHREAD_NORETURN ")
public func ThreadExit(res: i32) {
    if (_tinycthread_tss_head != null) {
        _tinycthread_tss_cleanup();
    }

    ExitThread(res as (DWORD));
}

public func ThreadSleepMSec(msec: i64) : i32 {
    var t = SleepEx(msec as (DWORD), true);

    if (t == 0) {
        return 0;
    }

    return (t == WAIT_IO_COMPLETION) ? -1 : -2;
}

public func ThreadSleep(duration: *TimeSpec, remaining: *TimeSpec = null) : i32 {
    var start: TimeSpec;
    var t: DWORD;

    start.get(TIME_UTC);

    t = SleepEx(((duration.sec * 1_000 + duration.nsec / 1_000_000 +
                (((duration.nsec % 1_000_000) == 0) ? 0 : 1))) as (DWORD), true);

    if (t == 0) {
        return 0;
    }

    if (remaining != null) {
        remaining.get(TIME_UTC);
        remaining.sec -= start.sec;
        remaining.nsec -= start.nsec;
        if (remaining.nsec < 0) {
            remaining.nsec += 1_000_000_000;
            remaining.sec -= 1;
        }
    }

    return (t == WAIT_IO_COMPLETION) ? -1 : -2;

}

public func GetNumberOfSystemThreads() : u32 {
    sysinfo: SYSTEM_INFO;
    GetSystemInfo(&sysinfo);
    return sysinfo.dwNumberOfProcessors;
}