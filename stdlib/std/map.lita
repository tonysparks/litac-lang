import "std/mem" as mem;
import "std/io";
import "std/assert";
import "std/libc";
import "std/string";


enum KeyState {
    EMPTY = 0,
    TOMBSTONE,
}

struct Entry<K, V> {
    hash: u32
    key: K
    value: V
}

public struct Map<K, V> {
    length: i32
    capacity: i32
    alloc: *const mem::Allocator

    entries: *Entry<K, V>

    emptyValue: V
    emptyKey: K
}

public struct MapIterator<K, V> {
    m: *Map<K, V>
    it: i32
    prevIt: i32
    count: i32
}

public struct MapEntry<K, V> {
    key: K
    value: V
    valuePtr: *V
}



public func StrMap<V>(emptyValue: V,
                      initialSize: i32 = 16,
                      alloc: *const mem::Allocator = null) : Map<*const char, V> {

    var m = Map<*const char, V>{};
    m.init<*const char, V>(emptyValue, initialSize, alloc);
    return m;
}

public func StringMap<V>(emptyValue: V,
                             initialSize: i32 = 16,
                             alloc: *const mem::Allocator = null) : Map<String, V> {

    var m = Map<String, V>{};
    m.init<String, V>(emptyValue, initialSize, alloc, String{.buffer = 0, .length = 0});
    return m;
}



public func (m: *Map<K, V>) init<K, V>(emptyValue: V,
                                       initialSize: i32,
                                       alloc: *const mem::Allocator = null,
                                       emptyKey: K = 0) {
    if(!alloc) {
        alloc = mem::defaultAllocator
    }

    m.length = 0;
    m.capacity = 0;
    m.entries = 0
    m.alloc = alloc;
    m.emptyValue = emptyValue;
    m.emptyKey = emptyKey;

    initialSize = nextPowerOf2(initialSize) as (i32) // TODO: switch to u32
    MapGrow<K, V>(m, initialSize);
}

public func (m: *Map<K, V>) free<K, V>() {
    if(m) {
        m.capacity = 0;
        m.length = 0;
        m.alloc.free(m.entries as (*void));

        m.entries = null;
    }
}

@inline
public func (m: *Map<K, V>) size<K, V>() : i32 {
    return m.length
}

public func (m: *Map<K, V>) empty<K, V>() : bool {
    return m.length == 0
}


public func (m: *Map<K, V>) put<K, V>(key: K, value: V) {

    if(2 * m.length >= m.capacity) {
        MapGrow<K, V>(m, 2 * m.capacity);
    }

    var hash = key.hash() + 2;
    var i = hash;
    for(;;) {
        i &= m.capacity - 1;
        var k = &m.entries[i]

        if(k.hash < 2) {
            m.length += 1
            k.key = key
            k.value = value
            k.hash = hash
            return;
        }
        if(k.hash == hash && k.key.equals(key)) {
            k.key = key
            k.value = value
            k.hash = hash
            return;
        }

        i += 1;
    }

}

public func (m: *Map<K, V>) get<K, V>(key: K) : V {
    if(m.length == 0) {
        return m.emptyValue;
    }

    var hash = key.hash() + 2
    var i = hash
    for(;;) {
        i &= m.capacity - 1;
        var k = &m.entries[i]

        if(k.hash < 1) {
            return m.emptyValue
        }

        if(k.hash == hash && k.key.equals(key)) {
            return k.value
        }

        i += 1
    }

    return m.emptyValue;
}

public func (m: *Map<K, V>) getPtr<K, V>(key: K) : *V {
    if(m.length == 0) {
        return null;
    }

    var hash = key.hash() + 2;
    var i = hash
    for(;;) {
        i &= m.capacity - 1;
        var k = &m.entries[i]

        if(k.hash < 1) {
            return null
        }

        if(k.hash == hash && k.key.equals(key)) {
            return &k.value
        }

        i += 1;
    }

    return null;
}

public func (m: *Map<K, V>) clear<K, V>() {
    m.length = 0
    for(var i = 0; i < m.capacity; i += 1) {
        var k = &m.entries[i]
        k.hash = 0
        k.key = m.emptyKey
        k.value = m.emptyValue
    }
}


public func (m: *Map<K, V>) remove<K, V>(key: K) : V {
    if(m.length == 0) {
        return m.emptyValue;
    }

    var hash = key.hash() + 2;
    var i = hash
    for(;;) {
        i &= m.capacity - 1;
        var k = &m.entries[i]

        if(k.hash < 1) {
            return m.emptyValue
        }

        if(k.hash == hash && k.key.equals(key)) {
            var v = k.value

            k.hash = 1
            k.key = m.emptyKey
            k.value = m.emptyValue

            m.length -= 1
            return v
        }

        i += 1;
    }

    return m.emptyValue;
}

public func (m: *Map<K, V>) contains<K, V>(key: K) : bool {
    if(m.length == 0) {
        return false;
    }

    var hash = key.hash() + 2;
    var i = hash
    for(;;) {
        i &= m.capacity - 1;
        var k = &m.entries[i]

        if(k.hash < 1) {
            return false
        }

        if(k.hash == hash && k.key.equals(key)) {
            return true
        }

        i += 1;
    }

    return false;
}

func MapGrow<K, V>(m: *Map<K, V>, newlength: i32) {
    if(newlength < 16) {
        newlength = 16;
    }

    var newMap = Map<K, V> {
        .length: 0,
        .capacity: newlength,
        .entries: m.alloc.calloc(newlength, sizeof(:Entry<K, V>)) as (*Entry<K, V>),
        .emptyValue = m.emptyValue,
        .emptyKey = m.emptyKey,
        .alloc: m.alloc
    }

    for(var i = 0; i < m.capacity; i+=1) {
        var k = &m.entries[i]
        if(k.hash < 2) {
            continue
        }

        newMap.put<K, V>(k.key, k.value);
    }

    m.free<K,V>();

    *m = newMap;
}


// -------------------------------------------------------

public func (m: *Map<K, V>) iter<K, V>() : MapIterator<K, V> {
    return MapIterator<K, V> {
        .m: m,
        .it: 0,
        .prevIt: 0,
        .count: 0
    }
}

public func (iter: *MapIterator<K, V>) hasNext<K, V>() : bool {
    return iter.count < iter.m.length;
}

public func (iter: *MapIterator<K, V>) next<K, V>() : MapEntry<K, V> {
    var i = iter.it;
    assert(i < iter.m.capacity);

    defer iter.it = i + 1

    for(; i < iter.m.capacity; i += 1) {
        var k = &iter.m.entries[i]
        if(k.hash < 2) {
            continue
        }


        iter.count += 1
        iter.prevIt = i

        return MapEntry<K, V> {
            .key: k.key,
            .value: k.value,
            .valuePtr: &k.value,
        }

    }

    return MapEntry<K, V>{}
}

public func (iter: *MapIterator<K, V>) remove<K, V>() {
    var i = iter.prevIt;
    assert(i > -1 && i < iter.m.capacity);

    var k = &iter.m.entries[i]
    k.hash = 1
    k.key = iter.m.emptyKey
    k.value = iter.m.emptyValue

    iter.m.length -= 1
    iter.count -= 1
}



func nextPowerOf2(v: u32) : u32 {
    var count = 0;

    // First n in the below condition
    // is for the case where n is 0
    if (v && !(v & (v - 1)))
        return v;

    while(v != 0) {
        v >>= 1;
        count += 1;
    }

    return 1 << count;
}

func (this: i32) hash() : u32 {
    return 3;
}

func (this: i32) equals(b: i32) : bool {
    return this == b;
}

func Print(m: *Map<i32,i32>) {
    printf("\n")
    for(var i = 0; i < m.capacity; i+=1) {
        var k = &m.entries[i]

        var key = k.key
        var value = k.value
        var hash = k.hash

        printf("Key: %d/%d Value: %d @ %d\n", key, hash, value, i)
    }
}

//@test
func testRemove() {
    var map = Map<i32, i32>{}
    map.init(
        .emptyValue = 0,
        .initialSize = 4,
        .alloc = mem::defaultAllocator
        //.emptyKey = 0
    )
    defer map.free()

    map.put(1, 2)
    map.put(2, 4)
    map.put(3, 8)

    map.put(1, 4)
    map.put(2, 8)
    map.put(3, 16)
    Print(&map)
    printf("X: %d\n", map.get(2))
    assert(map.get(1) == 4)
    assert(map.get(2) == 8)
    assert(map.get(3) == 16)


    map.remove(2)
    Print(&map)
    assert(map.get(1) == 4)
    assert(map.get(2) == 0)
    assert(map.get(3) == 16)

    //map.put(2, 8)
    //Print(&map)
}


import "std/system"
//import "std/libc"
import "std/hash" as hash

@test
func performanceTest() {
    {
        var start = SystemTimeMSec()
        var map = Map<i64, i32>{}
        map.init(
            .emptyValue = 0,
            .initialSize = 4,
            .alloc = mem::defaultAllocator
            //.emptyKey = 0
        )
        defer map.free()

        const COUNT = 1_000_000_0

        for(var i = 0; i < COUNT; i+=1) {
            map.put(i as (i64), i)
        }

/*
        for(var i = 0; i < COUNT; i+=1) {
            var x = map.get(i as (i64))
            assert(x == i)
        }
        for(var i = 0; i < COUNT; i+=1) {
            var x = map.remove(i as (i64))
            //assert(x == i)
        }
*/
        var end = SystemTimeMSec()

        printf("Time: %.4f\n", end-start)
    }
}