import "std/mem"
import "std/libc"

@cFile("utf8.h");


@doc("""
    A unicode codepoint
""")
public typedef i32 as rune;

@doc("'error' rune, unicode codepoint 'Replacement Character'")
public const INVALID_RUNE: rune = 0xefbfbd   // \uFFFD REPLACEMENT CHARACTER

@doc("Maximum valid unicode code point")
public const MAX_RUNE: rune     = 0x10_ffff  // \U0010FFFF

@doc("Maximum number of bytes for a UTF8 encoded unicode code point")
public const MAX_RUNE_BYTES = 4

@doc("""
    Reads a single codepoint from the UTF-8 sequence being pointed to by `str`. The maximum number of bytes read is `len`,
    unless `len` is negative (in which case up to 4 bytes are read).

    If a valid codepoint could be read, it is stored in the variable pointed to by `codepoint`, otherwise that variable will be set to -1.
    In case of success, the number of bytes read is returned; otherwise, a negative error code is returned.
""")
public func Utf8Decode(str: *const u8, len: i32, codepoint: *rune) : i32 {
    var dest = utf8codepoint(str as (*const void), codepoint) as (*const u8)
    return (dest - str) as (i32)

}

public func Utf8HexDecode(str: *const char, len: i32) : rune {
    const buffer = [9]char{}
    len = len == 4 ? 4 : 8
    for(var i = 0; i < len; i += 1) {
        buffer[i] = str[i]
    }
    buffer[len] = '\0'

    return strtol(buffer, null, 16) as (rune)
}


@doc("""
    Encodes the codepoint as an UTF-8 string in the byte array pointed to by dst. This array must be at least 4 bytes long.

    In case of success the number of bytes written is returned, and otherwise 0 is returned.

    This function does not check whether codepoint is valid Unicode.
""")
public func Utf8Encode(codepoint: rune, dst: *u8) : i32 {
    /// Credit to https://github.com/JuliaStrings/utf8proc/blob/master/utf8proc.c#L177
    if (codepoint < 0x00) {
        return 0;
    }
    else if (codepoint < 0x80) {
        dst[0] = codepoint as (u8);
        return 1;
    } else if (codepoint < 0x800) {
        dst[0] = (0xC0 + (codepoint >> 6))  as (u8);
        dst[1] = (0x80 + (codepoint & 0x3F))  as (u8);
        return 2;
        // Note: we allow encoding 0xd800-0xdfff here, so as not to change
        // the API, however, these are actually invalid in UTF-8
    } else if (codepoint < 0x10000) {
        dst[0] = (0xE0 + (codepoint >> 12))  as (u8);
        dst[1] = (0x80 + ((codepoint >> 6) & 0x3F))  as (u8);
        dst[2] = (0x80 + (codepoint & 0x3F))  as (u8);
        return 3;
    } else if (codepoint < 0x110000) {
        dst[0] = (0xF0 + (codepoint >> 18))  as (u8);
        dst[1] = (0x80 + ((codepoint >> 12) & 0x3F))  as (u8);
        dst[2] = (0x80 + ((codepoint >> 6) & 0x3F))  as (u8);
        dst[3] = (0x80 + (codepoint & 0x3F))  as (u8);
        return 4;
    }
    return 0;
}

@doc("""
    Given a codepoint, return a character width.  Width of -1 is returned for
    non-printable codepoints
""")
public func Utf8CharWidth(codepoint: rune) : i32 {

    // the common case...
    if(codepoint >= 32 && codepoint < 127) return 1;

    // The null character (U+0000) has a column width of 0.
    if(codepoint == 0) return 0;

    // Other C0/C1 control characters and DEL will lead to a return value of -1.
    if(codepoint > 0   && codepoint < 32) return -1;
    if(codepoint > 159 && codepoint < 256) return -1;
    if(codepoint == 127) return -1;

    // Non-spacing and enclosing combining characters (general category code Mn or Me in the Unicode database) have a column width of 0.
    if(codepoint == 0xD288 || codepoint == 0xD289 || codepoint == 0xE1AABE ||
      (codepoint >= 0xE2839D && codepoint <= 0xE283A4) ||
      (codepoint >= 0xEA99B0 && codepoint <= 0xEA99B2)) {
          return 0;
    }

    if((codepoint >= 0xCC80 && codepoint <= 0xCDAF) ||
       (codepoint >= 0xD283 && codepoint <= 0xD287) ||
       (codepoint >= 0xD691 && codepoint <= 0xD787) ||
       (codepoint >= 0xD890 && codepoint <= 0xDBAD) ||
       (codepoint >= 0xDC91) ||
       (codepoint >= 0xDCB0 && codepoint <= 0xDFBD)) { // TODO: Continue on... (U+07FD) https://codepoints.net/search?q=Mn
           return 0;
    }

    // SOFT HYPHEN (U+00AD) has a column width of 1.
    if(codepoint == 0xC2AD) return 1;

    // Other format characters (general category code Cf in the Unicode database) and ZERO WIDTH SPACE (U+200B) have a column width of 0.
    // TODO: https://www.compart.com/en/unicode/category/Cf
    if(codepoint == 0xE2808B) {
        return 0
    }

    // Hangul Jamo medial vowels and final consonants (U+1160-U+11FF) have a column width of 0.
    if(codepoint >= 0xE185A0 && codepoint <= 0xE187BF) {
        return 0
    }

    // Spacing characters in the East Asian Wide (W) or East Asian Full-width (F) category as defined in Unicode Technical Report #11 have a column width of 2.
    // TODO

    // All remaining characters (including all printable ISO 8859-1 and WGL4 characters, Unicode control characters, etc.) have a column width of 1.
    return 1;
}

public func Utf8CodepointValid(codepoint: rune) : bool {
    return ((codepoint as (u32)) - 0xd800 > 0x07ff) &&
            ((codepoint as (u32) < 0x110000));
}

/*
public enum NormalizeType {
    NFD  = (utf8proc_option_t.UTF8PROC_NULLTERM | utf8proc_option_t.UTF8PROC_STABLE | utf8proc_option_t.UTF8PROC_DECOMPOSE),
    NFC  = (utf8proc_option_t.UTF8PROC_NULLTERM | utf8proc_option_t.UTF8PROC_STABLE | utf8proc_option_t.UTF8PROC_COMPOSE),
    NFKD = (utf8proc_option_t.UTF8PROC_NULLTERM | utf8proc_option_t.UTF8PROC_STABLE | utf8proc_option_t.UTF8PROC_DECOMPOSE | utf8proc_option_t.UTF8PROC_COMPAT),
    NFKC = (utf8proc_option_t.UTF8PROC_NULLTERM | utf8proc_option_t.UTF8PROC_STABLE | utf8proc_option_t.UTF8PROC_COMPOSE | utf8proc_option_t.UTF8PROC_COMPAT),
    NFKC_CASEFOLD = (utf8proc_option_t.UTF8PROC_NULLTERM | utf8proc_option_t.UTF8PROC_STABLE | utf8proc_option_t.UTF8PROC_COMPOSE | utf8proc_option_t.UTF8PROC_COMPAT | utf8proc_option_t.UTF8PROC_CASEFOLD | utf8proc_option_t.UTF8PROC_IGNORE)
}

// TODO: avoid using malloc directly, and use the supplied allocator!!
public func Utf8Normalize(str: *const u8,
                          type: NormalizeType = NormalizeType.NFD,
                          allocator: *const Allocator = defaultAllocator) : *u8 {

    var retval: *u8;
    utf8proc_map(str, 0, &retval, type as (i32));
    return retval;
}
*/

@foreign
func utf8codepointsize(chr: i32) : usize;

@foreign
func utf8codepoint(str: *const void, out_codepoint: *i32) : *void;

#if TESTING
    func decode(str: *const char) {
        var r: rune = 0
        //var len = Utf8Decode(str as (*const u8), -1, &r)
        var codepoint = strtol(str, null, 16) as (rune)

        printf("%s = %d\n", str, codepoint)
    }

    @test
    func Test_Uf8Decode() {
        //var x = []u8 { 0xC2_u8, 0xA3_u8, 0_u8 }
        //var x = []u8 { 0xe2_u8, 0xb5_u8, 0x93_u8, 0_u8 }
        //var x = []u8 { 0xe2_u8, 0x0_u8, 0x93_u8, 0_u8 }
        var xx = 'ⵙ'

        //var z = '\u0021'
        //printf("Z = '%c'\n", z)
        var x = []u8 { 0xe2_u8, 0xb5_u8, 0x9a_u8, 0_u8 }

        var r: rune = 0
        var len = Utf8Decode(x, (x as (*const char)).length(), &r)
        var width = Utf8CharWidth(r)
        printf("Hello '%s' Rune: %d Len: %d Width: %d ⵓ ⵙ\n", x, r, len, width)

        var codepoint = strtol("2D5A'", null, 16) as (rune)
        printf("Codepoint: %d InString: '\u2d5a'Z\U0002B8B9z\n", codepoint)

        decode("0000")
        decode("009f")
        decode("0024")
        decode("0040")
        decode("0060")
        //var zzz = "\u2D5A"
        printf("\u2D59\n")
        /*
        printf("%s = %s\n", Utf8Normalize("ⵙ" as (*const u8)), Utf8Normalize("\u2D59"  as (*const u8)))
        {
            var u = "ⵙ" as (*const u8)
            for(var i = 0; i < strlen(u); i+=1) {
                var b = u[i]
                printf("%x ", b)
            }
        }
        printf("\n")
        {
            var u = "\u2D59" as (*const u8)
            for(var i = 0; i < strlen(u); i+=1) {
                var b = u[i]
                printf("%x ", b)
            }
        }
        printf("\n")

        printf("Comp: %d\n", strcmp(Utf8Normalize("ⵙ"), Utf8Normalize("\u2D59")))
        printf("Comp2: %d\n", strcmp("ⵙ", "\u2D59"))*/
    }

#end
