import "std/zip/miniz"
import "std/mem"
import "std/libc"
import "std/assert"
import "std/io"
import "std/system"
import "std/string_buffer"
import "std/array"
import "std/string_view"
import "std/fs"


@doc("""
    Open for either writing or reading
""")
public enum ZipOpen {
    READ,
    WRITE,
}

public enum ZipFlags {
    INCLUDE_ZIPFILE_NAME_ON_UNZIP = (1<<0),
}

public enum ZipStatus {
    OK = 0,
    ERROR_UNABLE_TO_OPEN_FILE,
    ERROR_UNABLE_TO_STAT,
    ERROR_UNABLE_CREATE_DIR,
    ERROR_UNABLE_WRITE_FILE,
    ERROR_ADDING_FILE,
    ERROR_CLOSING,
    ERROR_FINALIZING,
}

public enum ZipCompressionLevel {
    NO_COMPRESSION = 0,
    BEST_SPEED = 1,
    BEST_COMPRESSION = 9,
    UBER_COMPRESSION = 10,
    DEFAULT_LEVEL = 6,
}

public struct ZipFile {
    archive: mz_zip_archive
    type: ZipOpen
    allocator: *const Allocator
}

func ZipFileAlloc(opaque: *void, items: usize, size: usize) : *void {
    var allocator = opaque as (*const Allocator);
    if(!allocator) {
        return null
    }

    return allocator.alloc(items * size)
}

func ZipFileReAlloc(opaque: *void, address: *void, old_items: usize, old_size: usize, items: usize, size: usize) : *void {
    var allocator = opaque as (*const Allocator);
    if(!allocator) {
        return null
    }

    return allocator.realloc(address, old_items * old_size, items * size)
}

func ZipFileFree(opaque: *void, address: *void) {
    var allocator = opaque as (*const Allocator);
    if(!allocator) {
        return;
    }

    allocator.free(address)
}

public func (this: *ZipFile) open(
    filename: *const char,
    type: ZipOpen,
    allocator: *const Allocator = defaultAllocator) : ZipStatus {

    memset(&this.archive, 0, sizeof(:mz_zip_archive));

    this.type = type
    this.allocator = allocator

    this.archive.m_pAlloc = ZipFileAlloc;
    this.archive.m_pFree = ZipFileFree;
    this.archive.m_pRealloc = ZipFileReAlloc;
    this.archive.m_pAlloc_opaque = allocator as (*void);

    if(type == ZipOpen.READ) {
        var status = mz_zip_reader_init_file(&this.archive, filename, .flags = 0);
        if(!status) {
            return ZipStatus.ERROR_UNABLE_TO_OPEN_FILE
        }
    }
    else {
        var status = mz_zip_writer_init_file(&this.archive, filename, 0)
        if(!status) {
            return ZipStatus.ERROR_UNABLE_TO_OPEN_FILE
        }
    }

    return ZipStatus.OK
}

public func (this: *ZipFile) close() : ZipStatus {
    if(this.type == ZipOpen.WRITE) {
        if(!mz_zip_writer_end(&this.archive)) {
            return ZipStatus.ERROR_CLOSING
        }
        return ZipStatus.OK
    }

    if(!mz_zip_end(&this.archive)) {
        return ZipStatus.ERROR_CLOSING
    }
    return ZipStatus.OK
}


@doc("
    When writing to the zip file, finalize must be called to mark
    the completion of writing.
")
public func (this: *ZipFile) finalize() : ZipStatus {
    if(!mz_zip_writer_finalize_archive(&this.archive)) {
        return ZipStatus.ERROR_FINALIZING
    }
    return ZipStatus.OK
}

public func (this: *ZipFile) isValid() : bool {
    return mz_zip_validate_archive(&this.archive, 0)
}

public func (this: *ZipFile) getLastError() : *const char {
    return mz_zip_get_error_string(this.archive.m_last_error)
}

public func (this: *ZipFile) zipDir(
    pathToZip: *const char,
    len: i32,
    baseName: *const char,
    level: ZipCompressionLevel = ZipCompressionLevel.DEFAULT_LEVEL) : ZipStatus {

    var basePath = StringViewInit(pathToZip, len)

    var tempArch:[MAX_PATH]char;
    var tempPath:[MAX_PATH]char;

    var archiveName = StringBufferInit(tempArch, MAX_PATH, 0)
    var path = StringBufferInit(tempPath, MAX_PATH, 0)
    path.format("%.*s", basePath.length, basePath.buffer)

    return this.zipFolder(baseName, &basePath, &archiveName, &path, level)
}

func (this: *ZipFile) zipFolder(
    baseName: *const char,
    basePath: *StringView,
    archiveName: *StringBuffer,
    path: *StringBuffer,
    level: ZipCompressionLevel) : ZipStatus {

    var handle: FileHandle{}
    if(!handle.openEx(path.buffer, path.length)) {
        return ZipStatus.ERROR_UNABLE_TO_OPEN_FILE
    }
    defer handle.close()

    while(handle.next()) {
        if(handle.isDirectory()) {
            var len = path.length
            path.append("/%s", handle.name())

            var status = this.zipFolder(baseName, basePath, archiveName, path, level)
            path.length = len

            if(status != ZipStatus.OK) {
                return status
            }
        }
        else {
            archiveName.format("%s%.*s/%s",
                baseName,
                path.length - basePath.length,
                path.buffer + basePath.length,
                handle.name())

            var len = path.length
            path.append("/%s", handle.name())

            if(this.addFile(archiveName.cStr(), path.cStr(), level) != ZipStatus.OK) {
                return ZipStatus.ERROR_ADDING_FILE
            }
            path.length = len
        }
    }

    return ZipStatus.OK
}


// TODO: Expose compression levels
public func (this: *ZipFile) addFile(
    archiveName: *const char,
    filename: *const char,
    level: ZipCompressionLevel = ZipCompressionLevel.DEFAULT_LEVEL) : ZipStatus {

    if(!mz_zip_writer_add_file(
            &this.archive,
            archiveName,
            filename,
            "",
            0_u16/*,
            level as (CompressionStrategy)*/)) {
        return ZipStatus.ERROR_ADDING_FILE
    }

    return ZipStatus.OK
}

@doc("""
    dest - the destination folder to write the zipped files to
    extractedFiles - optional parameter to store the unzipped file names, if this is supplied
        than a copy of the string is stored in this Array.  It is up to the caller of this function
        to manage the memory.  The allocation uses the allocator used in ZipFile.open.
    flags - optional parameter, @see ZipFlags
""")
public func (this: *ZipFile) unzip(
    dest: *const char,
    extractedFiles: *Array<*const char> = null,
    flags: i32 = 0) : ZipStatus {

    var fileCount = mz_zip_reader_get_num_files(&this.archive)
    if(fileCount == 0) {
        return ZipStatus.OK
    }

    // Get the base filename, so that we can remove
    // it from the output path if requested
    var fileStat: mz_zip_archive_file_stat;
    if(!mz_zip_reader_file_stat(&this.archive, 0, &fileStat)) {
        return ZipStatus.ERROR_UNABLE_TO_STAT
    }

    var temp:[MAX_PATH]char;
    var temp2:[MAX_PATH]char;
    var path = StringBufferInit(temp, MAX_PATH, 0)

    var baseLen = strlen(fileStat.m_filename);
    if( (flags | ZipFlags.INCLUDE_ZIPFILE_NAME_ON_UNZIP) > 0) {
        baseLen = 0
    }

    for(var i = 0; i < fileCount; i+=1) {
        if(!mz_zip_reader_file_stat(&this.archive, i, &fileStat)) {
            continue
        }

        var filename = StringBufferInit(fileStat.m_filename + baseLen, MZ_ZIP_MAX_ARCHIVE_FILENAME_SIZE - baseLen, -1)
        path.format("%s/%.*s", dest, filename.length, filename.buffer)
        var cPath = path.cStr()

        Mkdirs(FileParent(cPath, temp2))

        if(mz_zip_reader_is_file_a_directory(&this.archive, i)) {
            Mkdir(cPath)
            if(!FileExists(cPath)) {
                return ZipStatus.ERROR_UNABLE_CREATE_DIR
            }
        }
        else if(!mz_zip_reader_extract_to_file(&this.archive, i, cPath, 0)) {
            return ZipStatus.ERROR_UNABLE_WRITE_FILE
        }

        if(extractedFiles) {
            extractedFiles.add(StringClone(filename.buffer, filename.length, this.allocator))
        }
    }

    return ZipStatus.OK
}

/*
@test
func testUnzip() {
    var zip: ZipFile{}
    defer zip.close()

    assert(zip.open("C:/Users/antho/Downloads/seventh-0.4.1-beta.zip", ZipOpen.READ) == ZipStatus.OK)
    assert(zip.unzip("C:/Users/antho/Desktop/temp") == ZipStatus.OK)
}*/


import "std/mem/linear_allocator"
/*
@test
func testZipDir() {
    var zip: ZipFile{}
    defer zip.close()

    const size = 128*MiB
    var mem = defaultAllocator.alloc(size)
    var alloc = LinearAllocator{}
    alloc.init(mem, size)

    assert(zip.open("test.zip", ZipOpen.WRITE, alloc.allocator) == ZipStatus.OK)
    assert(zip.zipDir("C:/Users/antho/git/c2litac", strlen("C:/Users/antho/git/c2litac"), "pkg") == ZipStatus.OK)
    assert(zip.finalize() == ZipStatus.OK)
}*/


@test
func testZipDir() {
    var zip: ZipFile{}
    defer zip.close()

    assert(zip.open("test.zip", ZipOpen.WRITE) == ZipStatus.OK)
    //assert(zip.addFile("pkg/pkg.json", "C:/Users/antho/git/c2litacx/pkg.json") == ZipStatus.OK)
    //assert(zip.addFile("pkg/src/test.txt", "C:/Users/antho/git/c2litacx/src/test.txt") == ZipStatus.OK)

    var path = "/home/tony/projects/libio_uring"
    var len = strlen(path)
    assert(zip.zipDir(path, len, "pkg") == ZipStatus.OK)
    assert(zip.finalize() == ZipStatus.OK)
}