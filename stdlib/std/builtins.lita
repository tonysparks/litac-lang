public typedef u64 as typeid;

public struct any {
    value: *void
    id: typeid
}

/**
========================================================================
Note declarations
========================================================================
*/

public @note compiler_option {
    cc: *const char = "default"
    os: *const char = "default"
    arch: *const char = "default"
    options: *const char
}

public @note foreign {
    alias: *const char
}


public @note alias {
    alias: *const char
}

public @note include {
    value: *const char
}

public @note static {
}

public @note raw {
    value: *const char
}

public @note cFile {
}

public @note doc {
    value: *const char
}

public @note asStr {
    name: *const char
}

public @note inline {
}

public @note no_profile {
}

public @note profile {
    value: *const char
}

@doc("""
    Marks a type that's value will be generated at compile time
""")
public @note generated {
}

@doc("""
    Marks a type that should be hidden (generated by the compiler)
    from consumers of types (i.e., LSP).  These are generally compiler
    implementation detail types (@see Traits)
""")
public @note hidden {
}

public @note module_init {
}

public @note module_destroy {
}

public @note threadlocal {
}

public @note test {
    name: *const char
    disabled: bool = false
}

public @note packed {
}

public @note extern {
    value: *const char
}

//=====================================================================================

/*
#if (REFLECTION)
    import "type";
#end
*/

/**
    Compiler script to generate Enum AsStr functions when they are noted with 'asStr'.

    Example:
    @asStr("TestAsString")
    enum Test {
        ONE,

        @asStr("DOS")
        TWO,
    }

    Will create this function:

    func TestAsString(type: Test) : *const char {
        switch(type) {
            case Test.ONE: return "ONE";
            case Test.TWO: return "DOS";
            default: return null;
        }
    }
*/
#precheck
    for(sym in getSymbolsByNote("asStr")) {
        if(sym.kind == "ENUM_DECL") {
            emitClear()
            var symName = ""

            // Look to see if there is a custom name in the enums note
            if(sym.notes) {
                for(note in sym.notes) {
                    if(note.name == "asStr" && note.arguments) {
                        symName = note.arguments[0].value
                    }
                }
            }

            if(symName == "") {
                symName = concat(sym.name, "AsStr")
            }

            if(sym.isPublic) {
                emit("public ")
            }
            emit("func %s(enumType: %s) : *const char {
                      switch(enumType) {\n", symName, sym.name);
            for(field in sym.enumDecl.fields) {
                var fieldName = field.name
                var valueName = field.name

                // Look to see if there is a custom name for the field
                if(field.notes) {
                    for(note in field.notes) {
                        if(note.name == "asStr" && note.arguments) {
                            valueName = note.arguments[0].value
                        }
                        //else if(note.name == "alias" && note.attributes) {
                        //    fieldName = note.attributes[0].name
                        //}
                    }
                }
                emit("        case %s.%s: return \"%s\";\n", sym.name, fieldName, valueName);
            }
            emit("        default: return null;
                      }
                }\n")

            addDeclaration(sym.moduleFilename, emitStr())
        }
    }
#end

/**
    Create a test main if we are in testing mode

    This will replace the current 'main' entry point of the program with a new
    function '__LitaTestMain()' which will call each @test method that either
    matches the options.testsRegex or options.testFileOnly options

*/
#precheck
    // if we are testing only, create a new main entry point
    if(TESTING) {
        var moduleName = getInputModuleFilename()

        emitClear()
        var testFunctionName = "__LitaTestMain"
        emit("@foreign(\"printf\") func __lita_test_printf(format: *const char, ...);\n")
        emit("func %s(len: i32, args: **char) : i32 {\n", testFunctionName)
        for(sym in getSymbolsToTest("test")) {
            emit("  __lita_test_printf(\"Testing '%s'\\\\n\")\n", sym.name)
            var alias = addImport(moduleName, sym.moduleFilename)
            if(alias) {
                emit("  %s::%s()\n", alias, sym.name)
            }
            else {
                emit("  %s()\n", sym.name)
            }
        }
        emit("  return 0; }")

        addDeclaration(moduleName, emitStr())
        setMainSymbol(moduleName, testFunctionName)

    }
#end

/**
    Compiler script to inject module init and destroy functions; these
    function must be public in order for them to be accessible to the
    main function

    Example:
    @module_init
    public func moduleInitialize() {

    }

    @module_destroy
    public func moduleInitialize() {

    }

    Will modify the main function to:

    func main(argc:i32, args:**char) : i32 {
        moduleInitialize()
        defer moduleDestroy()
        // main code
    }
*/
#precheck
    var mainSym = getMainSymbol()
    if(mainSym) {
        for(sym in getSymbolsByNote("module_destroy")) {
            if(sym.kind == "FUNC_DECL" && sym.isPublic) {
                var alias = addImport(mainSym.moduleFilename, sym.moduleFilename)
                if(alias) {
                    emitClear()
                    emit("defer %s::%s()", alias, sym.name)
                    astInsert(mainSym.declPtr, emitStr(), 0)
                }
                else {
                    emitClear()
                    emit("defer %s()", sym.name)
                    astInsert(mainSym.declPtr, emitStr(), 0)
                }
            }
        }
        for(sym in getSymbolsByNote("module_init")) {
            if(sym.kind == "FUNC_DECL" && sym.isPublic) {
                var alias = addImport(mainSym.moduleFilename, sym.moduleFilename)
                if(alias) {
                    emitClear()
                    emit("%s::%s()", alias, sym.name)
                    astInsert(mainSym.declPtr, emitStr(), 0)
                }
                else {
                    emitClear()
                    emit("%s()", sym.name)
                    astInsert(mainSym.declPtr, emitStr(), 0)
                }
            }
        }
    }
#end

