import "std/mem"
import "std/libc"

#postparse
const USE_WINDOWS = false;
#end

#if (USE_WINDOWS)
    import "std/io/io_win"

    public struct File {
        handle: HANDLE
        _position: i64
    }
#else
    public struct File {
        file: *FILE
        _position: i64
    }
#end


@asStr
public enum FileStatus {
    Ok = 0,
    FileNotFoundError,
    IOError,
    EndOfFile,
}

public enum FileOpenOp {
    // Opens a file for reading only, will fail if it doesn't exist
    READ_ONLY,
    READ_ONLY_BINARY,

    // Will open an existing file or create a new one for write operations.
    // This will remove the existing contents if any for an existing file
    WRITE,
    WRITE_BINARY,

    // Will open an existing file or create a new one for write operations.
    // This will retain any existing contents and any write operations will
    // start at the end of the file
    WRITE_APPEND,
    WRITE_APPEND_BINARY,
}

public func (file: *File) open(filename: *const char, op: FileOpenOp) : FileStatus {
#if (USE_WINDOWS)
    return WinFileOpen(file, filename, op)
#else
    var opStr = "rb"
    switch(op) {
        case FileOpenOp.READ_ONLY_BINARY: {
            opStr = "rb"
            break;
        }
        case FileOpenOp.READ_ONLY:
            opStr = "r"
            break;

        case FileOpenOp.WRITE_BINARY: {
            opStr = "wb"
            break
        }
        case FileOpenOp.WRITE: {
            opStr = "w"
            break
        }
        case FileOpenOp.WRITE_APPEND: {
            opStr = "a"
            break;
        }
        case FileOpenOp.WRITE_APPEND_BINARY: {
            opStr = "ab"
            break;
        }
    }

    file.file = fopen(filename, opStr)
    file._position = 0

    if(file.file == null) {
        return FileStatus.FileNotFoundError;
    }

    return FileStatus.Ok
#end
}

public func (file: *File) length() : i64 {
#if (USE_WINDOWS)
    // TODO?
    return 0
#else
    if(!file || !file.file) {
        return 0
    }


    if (fseek(file.file, 0, SEEK_END)) {
        return 0;
    }

    const len = ftell(file.file)
    return len;
#end
}

public func (file: *File) handle() : i32 {
#if (USE_WINDOWS)
    // TODO?
    return 0
#else
    return fileno(file.file)
#end
}

public func (file: *File) position() : i64 {
    return file._position
}

public func (this: *File) seek(pos: i64) : FileStatus {
    if (fseek(this.file, this._position, SEEK_SET)) {
        return FileStatus.IOError;
    }
    this._position = pos
    return FileStatus.Ok;
}

public func (file: *File) close() {
#if (USE_WINDOWS)
    WinFileClose(file)
#else
    if(file && file.file) {
        fclose(file.file)
    }
#end
}



public func (this: *File) readBytes(
                     buffer: *char,
                     length: usize) : FileStatus {

    if (fseek(this.file, this._position, SEEK_SET)) {
        return FileStatus.IOError;
    }

    var bytesRead = fread(buffer, sizeof(:char), length, this.file);
    if(ferror(this.file)) {
        return FileStatus.IOError;
    }

    if(bytesRead > 0) {
        this._position += bytesRead as (i64)
        return FileStatus.Ok;
    }

    return FileStatus.EndOfFile
}


public func (this: *File) writeBytes(buffer: *const char, len: usize) : FileStatus {
#if (USE_WINDOWS)
    return WinWriteBytes(this, buffer, len)
#else
    if (fseek(this.file, this._position, SEEK_SET)) {
        return FileStatus.IOError;
    }

    var bytesWritten = fwrite(buffer as (*const void), sizeof(:char), len, this.file)
    if(bytesWritten > 0) {
        this._position += bytesWritten as (i64)
    }

    if(bytesWritten != len) {
        return FileStatus.IOError;
    }

    return FileStatus.Ok
#end
}

//----------------------------------------------------

public func FileLength(fileName: *const char) : i64 {
    var fp = fopen(fileName, "r")
    if(fp == null) {
        return -1;
    }
    defer fclose(fp)

    if (fseek(fp, 0, SEEK_END)) {
        return -1;
    }

    const len = ftell(fp)
    return len;
}

public func ReadFile(fileName: *const char,
                     data: **char,
                     length: *usize,
                     alloc: *const Allocator = defaultAllocator) : FileStatus {
#if (USE_WINDOWS)
    return WinReadFile(fileName, data, length, alloc)
#else
    var fp = fopen(fileName, "r")
    if(fp == null) {
        *length = -1;
        return FileStatus.FileNotFoundError;
    }
    defer fclose(fp)

    if (fseek(fp, 0, SEEK_END)) {
        *length = -1;
        return FileStatus.IOError;
    }

    const len = ftell(fp)
    if(len < 0_i64) {
        *length = -1;
        return FileStatus.IOError;
    }

    if (fseek(fp, 0, SEEK_SET)) {
        *length = -1;
        return FileStatus.IOError;
    }

    var buf = alloc.alloc(sizeof(:char) * (len as(u64) + 1_u64)) as (*char);
    (*data) = buf;

    // stupid Windows and /r/n, the newLen will be different than that of ftell
    var newLen = fread(buf, sizeof(:char), len, fp);
    if(ferror(fp)) {
        *length = -1;
        return FileStatus.IOError;
    }

    buf[newLen] = '\0';
    *length = newLen;

    return FileStatus.Ok;
#end
}



public func WriteFile(fileName: *const char, buffer: *const char, len: usize) : FileStatus {
#if (USE_WINDOWS)
    return WinWriteFile(fileName, buffer, len)
#else
    var fp = fopen(fileName, "w")
    if(fp == null) {
        return FileStatus.FileNotFoundError;
    }
    defer fclose(fp)

    var file = File{.file = fp}
    return file.writeBytes(buffer, len)
#end
}

/*
@test
func TestReadFile() {
    var data: *char = null
    var length: usize = 0

    var data2: *char = null
    var length2: usize = 0

    var status = WinReadFile("C:/Users/antho/git/litac-lang/test/tests/bucket_allocator.json", &data, &length)
    var status2 = ReadFile("C:/Users/antho/git/litac-lang/test/tests/bucket_allocator.json", &data2, &length2)
    //var status = WinReadFile("C:/Users/antho/Desktop/test.txt", &data, &length)
    printf("Status: %s\n%.*s\n", FileStatusAsStr(status), length as (i32), data)
    printf("Status: %s\n%.*s\n", FileStatusAsStr(status2), length2 as (i32), data2)

    printf("%zu vs %zu\n", length, length2)

    defaultAllocator.free(data)
    defaultAllocator.free(data2)
}*/