
// TODO: fix bug with module notes being included, even if
// the module isn't included because of a compile_time if

@raw("""
#if !defined(_WIN32) && !defined(_WIN64) && !defined(__CYGWIN__)
    #include <sys/time.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <limits.h>

    typedef struct timeval timeval;
    typedef struct stat FileStat;
#endif

#ifndef PATH_MAX
#define PATH_MAX 256
#endif

""");


import "std/libc"
import "std/assert"
import "std/string_buffer"
import "std/string_view"
import "std/system"


@foreign
func rmdir(filename: *const char) : i32;


@foreign("PATH_MAX")
public const MAX_PATH: i32; /* NAME_MAX=255, PATH_MAX=4096 */

@foreign
struct FileStat {
    st_mode: i32
};

@foreign
func stat(filename: *const char, stat: *FileStat) : i32;


@no_profile
public func _SystemInit() : bool {
    return true
}

@foreign
func getcwd(buf: *char, size: usize) : *char;

const pwd = [MAX_PATH]char{0};
public func _CurrentWorkingPath() : *const char {
    @static var path: [MAX_PATH]char;
    if(pwd[0] == 0) {
        var result = getcwd(path, MAX_PATH)
        if(result) {
            GetAbsolutePath("", path, pwd)
        }
    }

    return pwd;
}

@foreign
typedef i32 as mode_t;

@foreign
const S_IRWXU :i32;
@foreign
const S_IRWXG:i32;
@foreign
const S_IROTH:i32;
@foreign
const S_IXOTH:i32;


@foreign
func mkdir(path: *const char, mode: mode_t) : i32;

public func _Mkdir(dir: *const char) : bool {
    mkdir(dir, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH)

    var view = StringViewInit(dir)
    // we have to do this non-sense because tinycc stat doesn't like
    // trailing /
    if(view.endsWith("/")) {
        var path = [MAX_PATH]char{0}
        var normalized = StringInit(path, MAX_PATH, 0)
        normalized.format("%.*s", view.length - 1, view.buffer)
        return FileExists(normalized.cStr())
    }
    return FileExists(dir)
}

@foreign("S_ISDIR")
func S_ISDIR(mode: i32) : bool;

public func _FileIsDir(filename: *const char) : bool {
    var s: FileStat;
    if (stat(filename, &s) != 0) {
        return false
    }
    return S_ISDIR(s.st_mode)
}

@inline
public func _FileTruncate(filename: *const char, newLength: usize) : bool {
    var file = fopen(filename, "rw");
    return _FileTruncateFile(file, newLength)
}

@inline
public func _FileTruncateFile(file: *FILE, newLength: usize) : bool {
    if(!file) {
        return false;
    }

    var fd = fileno(file)
    return ftruncate(fd, newLength);
}

@inline
public func _FileDelete(filename: *const char) : bool {
    if(_FileIsDir(filename)) {
        return rmdir(filename) == 0
    }

    return remove(filename) == 0
}

@foreign
struct timeval {
    tv_sec: f64
    tv_usec: f64
}

@foreign
func gettimeofday(t: *timeval, tzp: *void) : i32;



@no_profile
public func _SystemTimeMSec() : f64 {
    var t0: timeval;
    gettimeofday(&t0, null);

    var time = ((t0.tv_sec as (f64) * 1000f64) + (t0.tv_usec as (f64) / 1000f64))
    return time / 1_000f64
}

