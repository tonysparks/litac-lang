
import "std/libc"
import "std/assert"
import "std/string"
import "std/string_view"


@raw("""
#include <stdlib.h>

#include <stdio.h>
#include <time.h>
""");

#if (OS == "WINDOWS")
    import using "std/system/system_win"
#else
    import using "std/system/system_posix"
#end

@raw("""
typedef enum Lita_OSType {
    Lita_OSType_WINDOWS,
    Lita_OSType_ANDROID,
    Lita_OSType_LINUX,
    Lita_OSType_BSD,
    Lita_OSType_IOS,
    Lita_OSType_MAC,
    Lita_OSType_OTHER
} Lita_OSType;


#if defined(_WIN32)
    // Windows
    Lita_OSType litaOS = Lita_OSType_WINDOWS;
#elif defined(_WIN64)
    // Windows
    Lita_OSType litaOS = Lita_OSType_WINDOWS;
#elif defined(__CYGWIN__) && !defined(_WIN32)
    // Windows (Cygwin POSIX under Microsoft Window)
    Lita_OSType litaOS = Lita_OSType_WINDOWS;
#elif defined(__ANDROID__)
    // Android (implies Linux, so it must come first)
    Lita_OSType litaOS = Lita_OSType_ANDROID;
#elif defined(__linux__)
    // Debian, Ubuntu, Gentoo, Fedora, openSUSE, RedHat, Centos and other
    Lita_OSType litaOS = Lita_OSType_LINUX;
#elif defined(__unix__) || !defined(__APPLE__) && defined(__MACH__)
    #include <sys/param.h>
    #if defined(BSD)
        // FreeBSD, NetBSD, OpenBSD, DragonFly BSD
        Lita_OSType litaOS = Lita_OSType_BSD;
    #endif
#elif defined(__hpux)
    // HP-UX
    Lita_OSType litaOS = Lita_OSType_OTHER;
#elif defined(_AIX)
    // IBM AIX
    Lita_OSType litaOS = Lita_OSType_OTHER;
#elif defined(__APPLE__) && defined(__MACH__) // Apple OSX and iOS (Darwin)
    #include <TargetConditionals.h>
    #if TARGET_IPHONE_SIMULATOR == 1
        // Apple iOS
        Lita_OSType litaOS = Lita_OSType_IOS;
    #elif TARGET_OS_IPHONE == 1
        // Apple iOS
        Lita_OSType litaOS = Lita_OSType_IOS;
    #elif TARGET_OS_MAC == 1
        // Apple OSX
        Lita_OSType litaOS = Lita_OSType_MAC;
    #endif
#elif defined(__sun) && defined(__SVR4)
    // Oracle Solaris, Open Indiana
    Lita_OSType litaOS = Lita_OSType_OTHER;
#else
    Lita_OSType litaOS = Lita_OSType_OTHER;
#endif


typedef struct tm tm;

""");

// Define architecture
@raw("""
typedef enum Lita_ArchType {
    Lita_ArchType_UNKNOWN,
    Lita_ArchType_ARM32,
    Lita_ArchType_ARM64,
    Lita_ArchType_X86,
    Lita_ArchType_X86_64,
    Lita_ArchType_SPARC,
} Lita_ArchType;

#if defined(_M_IX86) || defined(__i386__) || defined(__i386) || defined(__i486__) || defined(__i486) || defined(i386)
#define LITA_X86 1
#else
#define LITA_X86 0
#endif

#if defined(_M_X64) || defined(__ia64__) || defined(__x86_64__)
#define LITA_X64 1
#else
#define LITA_X64 0
#endif

#if defined(__arm__)
#define LITA_ARM32 1
#else
#define LITA_ARM32 0
#endif

#if defined(__aarch64__)
#define LITA_ARM64 1
#else
#define LITA_ARM64 0
#endif

#if defined(__sparc__)
#define LITA_SPARC 1
#else
#define LITA_SPARC 0
#endif

#if LITA_ARM32
    Lita_ArchType litaArch = Lita_ArchType_ARM32;
#elif LITA_ARM64
    Lita_ArchType litaArch = Lita_ArchType_ARM64;
#elif LITA_X86
    Lita_ArchType litaArch = Lita_ArchType_X86;
#elif LITA_X64
    Lita_ArchType litaArch = Lita_ArchType_X86_64;
#elif LITA_SPARC
    Lita_ArchType litaArch = Lita_ArchType_SPARC;
#else
    Lita_ArchType litaArch = Lita_ArchType_UNKNOWN;
#endif

""");

@foreign("Lita_ArchType")
public enum Arch {
    @alias("Lita_ArchType_UNKNOWN")
    @asStr("UNKNOWN")
    Lita_ArchType_UNKNOWN,

    @alias("Lita_ArchType_ARM32")
    @asStr("ARM32")
    Lita_ArchType_ARM32,

    @alias("Lita_ArchType_ARM64")
    @asStr("ARM64")
    Lita_ArchType_ARM64,

    @alias("Lita_ArchType_X86")
    @asStr("X86")
    Lita_ArchType_X86,

    @alias("Lita_ArchType_X86_64")
    @asStr("X86_64")
    Lita_ArchType_X86_64,

    @alias("Lita_ArchType_SPARC")
    @asStr("SPARC")
    Lita_ArchType_SPARC,
}

public func ArchAsStr(type: Arch) : *const char {
    switch(type) {
        case Arch.Lita_ArchType_UNKNOWN: return "UNKNOWN";
        case Arch.Lita_ArchType_ARM32: return "ARM32";
        case Arch.Lita_ArchType_ARM64: return "ARM64";
        case Arch.Lita_ArchType_X86: return "X86";
        case Arch.Lita_ArchType_X86_64: return "X86_64";
        case Arch.Lita_ArchType_SPARC: return "SPARC";
        default: return null;
    }
}

public func ArchFromStr(str: *const char, len: usize) : Arch {
    if(!str) {
        return Arch.Lita_ArchType_UNKNOWN
    }

    if(strcicmp(str, "ARM32", len) == 0) {
        return Arch.Lita_ArchType_ARM32
    }

    if(strcicmp(str, "ARM64", len) == 0) {
        return Arch.Lita_ArchType_ARM64
    }

    if(strcicmp(str, "X86", len) == 0) {
        return Arch.Lita_ArchType_X86
    }

    if(strcicmp(str, "X86_64", len) == 0) {
        return Arch.Lita_ArchType_X86_64
    }

    if(strcicmp(str, "SPARC", len) == 0) {
        return Arch.Lita_ArchType_SPARC
    }

    return Arch.Lita_ArchType_UNKNOWN
}

// TODO - should allow for 'compile time interface' types
// defined in OS specific module...
//public const MAX_PATH: i32;

@foreign("Lita_OSType")
//@asStr TODO, this isn't working, function not in scope??
public enum OS {
    @alias("Lita_OSType_WINDOWS")
    @asStr("WINDOWS")
    Lita_OSType_WINDOWS,

    @alias("Lita_OSType_ANDROID")
    @asStr("ANDROID")
    Lita_OSType_ANDROID,

    @alias("Lita_OSType_LINUX")
    @asStr("LINUX")
    Lita_OSType_LINUX,

    @alias("Lita_OSType_BSD")
    @asStr("BSD")
    Lita_OSType_BSD,

    @alias("Lita_OSType_IOS")
    @asStr("IOS")
    Lita_OSType_IOS,

    @alias("Lita_OSType_MAC")
    @asStr("MAC")
    Lita_OSType_MAC,

    @alias("Lita_OSType_OTHER")
    @asStr("OTHER")
    Lita_OSType_OTHER
}

// TODO: Why is asStr annotation not working???
public func OSAsStr(type: OS) : *const char {
    switch(type) {
        case OS.Lita_OSType_WINDOWS: return "WINDOWS";
        case OS.Lita_OSType_ANDROID: return "ANDROID";
        case OS.Lita_OSType_LINUX: return "LINUX";
        case OS.Lita_OSType_BSD: return "BSD";
        case OS.Lita_OSType_IOS: return "IOS";
        case OS.Lita_OSType_MAC: return "MAC";
        case OS.Lita_OSType_OTHER: return "OTHER";
        default: return null;
    }
}

public func OSFromStr(str: *const char, len: usize) : OS {
    if(!str) {
        return OS.Lita_OSType_OTHER
    }

    if(strcicmp(str, "WINDOWS", len) == 0) {
        return OS.Lita_OSType_WINDOWS
    }

    if(strcicmp(str, "ANDROID", len) == 0) {
        return OS.Lita_OSType_ANDROID
    }

    if(strcicmp(str, "LINUX", len) == 0) {
        return OS.Lita_OSType_LINUX
    }

    if(strcicmp(str, "BSD", len) == 0) {
        return OS.Lita_OSType_BSD
    }

    if(strcicmp(str, "IOS", len) == 0) {
        return OS.Lita_OSType_IOS
    }

    if(strcicmp(str, "MAC", len) == 0) {
        return OS.Lita_OSType_MAC
    }

    return OS.Lita_OSType_OTHER
}

@foreign("litaOS")
const os: OS;

@foreign("litaArch")
const arch: Arch;

@foreign
struct FileStat {
    st_mode: i32;
};


#if OS == "WINDOWS"
    const OPEN_MODE = "rt";

    @foreign("_stat")
    func stat(filename: *const char, s: *FileStat) : i32;


    @foreign("_popen")
    func popen(command: *const char, mode: *const char) : *FILE;

    @foreign("_pclose")
    func pclose(pipe: *FILE) : void;

    // TODO: Move this into io module?
    public const PATH_SEPARATOR = "\\"
#else
    const OPEN_MODE = "r";

    @foreign("stat")
    func stat(filename: *const char, s: *FileStat) : i32;

    @foreign("popen")
    func popen(command: *const char, mode: *const char) : *FILE;

    @foreign("pclose")
    func pclose(pipe: *FILE) : void;

    // TODO: Move this into io module?
    public const PATH_SEPARATOR = "/"
#end

@foreign
func getenv(varname: *const char) : *char;


@module_init
@no_profile
public func SystemInit() : bool {
    return _SystemInit()
}

public func GetOS() : OS {
    return os;
}

public func GetArch() : Arch {
    return arch;
}

public func GetEnv(varName: *const char) : *char {
    return getenv(varName)
}

/** TODO: Move these to IO packages... */

public func CurrentWorkingPath() : *const char {
    return _CurrentWorkingPath()
}

public func FileTruncate(filename: *const char, newLength: usize) : bool {
    return _FileTruncate(filename, newLength)
}

public func FileTruncateFile(file: *FILE, newLength: usize) : bool {
    return _FileTruncateFile(file, newLength)
}

public func FileDelete(filename: *const char) : bool {
    return _FileDelete(filename)
}

public func FileExists(filename: *const char) : bool {
    var s: FileStat;
    return stat(filename, &s) == 0
}

public func FileMove(srcFilename: *const char, destFilename: *const char) : bool {
    return rename(srcFilename, destFilename) == 0
}

public func FileIsDir(filename: *const char) : bool {
    return _FileIsDir(filename)
}

public func Mkdir(dir: *const char) : bool {
    return _Mkdir(dir)
}

public func Mkdirs(dir: *const char) : bool {
    var temp: [MAX_PATH]char;
    var path = StringInit(temp, MAX_PATH, 0)

    var workingPath = StringViewInit(dir)
    var index = 0

    // check Windows C:/ style path
    if(workingPath.length > 2) {
        if(workingPath.buffer[2] == ':') {
            path.append("%.*s", 2, workingPath.buffer)
            index = 3
        }
    }

    while(index >= 0) {
        index = workingPath.indexOfAt("/", 1, .fromIndex = index)
        if(index > -1) {
            path.format("%.*s", index, workingPath.buffer)
            _Mkdir(path.cStr())
            index += 1
        }
        else {
            break
        }
    }

    return _Mkdir(dir)
}

public func FilePath(filename: *const char, out:[MAX_PATH]char) : *char {
    var index = 0

    if(!filename) {
        goto end;
    }

    var len = strlen(filename)
    if(len > 0) {
        for(index = len-1; index >= 0; index -= 1) {
            var c = filename[index]
            if(c == '/' || c == '\\') {
                memcpy(out, filename, index)
                goto end;
            }
        }
        index = 0
    }

end:
    out[index] = '\0'
    return out
}

public func FileParent(filename: *const char, out:[MAX_PATH]char, length: *i32 = null) : *char {
    var index = 0

    if(!filename) {
        goto end;
    }

    var len = strlen(filename)
    if(len > 0) {
        index = len - 1
        if(filename[len-1] == '/') {
            index -= 1
        }
        for(; index >= 0; index -= 1) {
            var c = filename[index]
            if(c == '/' || c == '\\') {
                memcpy(out, filename, index)
                goto end;
            }
        }
        index = 0
    }

end:
    if(length) {
        (*length) = index
    }
    out[index] = '\0'
    return out
}

public func PathNormalize(filename: *const char, out:[MAX_PATH]char) : *char {
    if(!filename) {
        goto end;
    }

    var len = strlen(filename)

    var i = 0
    for(; i < len; i += 1) {
        var c = filename[i]
        if(c == '\\') {
           c = '/'
        }
        out[i] = c
    }


end:
    out[i] = '\0'
    return out
}

func strcicmp(a: *const char, b: *const char, size: usize) : i32 {
    if(a==b) return 0;
    if(!a && b) return -1;
    if(a && !b) return 1;

    for (var i = 0; i < size; i += 1) {
        var ac = *a
        var bc = *b

        if(!ac && bc)  return -1;
        if(ac && !bc)  return 1;
        if(!ac && !bc) return 0;

        var d = tolower(ac) - tolower(bc);
        if (d != 0) {
            return d;
        }
        a+=1
        b+=1
    }
    return 0
}
/*
public func GetFullPathName(filename: *const char, output: [MAX_PATH]char) : *char {
    return _GetFullPathName(filename, output)
}*/

public func GetAbsolutePath(pwd: *const char, path: *const char, output: [MAX_PATH]char) : *char {
    var absStr = StringInit(output, MAX_PATH, 0);
    var pathStr = StringViewInit(path)

    if(pathStr.startsWith(".")) {
        absStr.append("%s/", pwd);
    }

    var start = path
    while(*path) {
        if(path[0] == '\\') {
            if(path[1] == '\\') {
                path += 1
            }
            absStr.appendChar('/')
        }
        else if(path[0] == '.') {
            // go up a directory
            if(path[1] == '.') {
                var len = absStr.length
                var index = len - 1
                var upCount = 0
                for(; index >= 0; index -= 1) {
                    if(absStr.buffer[index] == '/' ||
                       absStr.buffer[index] == '\\') {
                        upCount += 1
                        if(upCount > 1) {
                            break;
                        }
                    }
                }
                if(index < 0) {
                    index = 0
                }

                absStr.length = index
                if(absStr.buffer[index] == '/'||
                   absStr.buffer[index] == '\\') {
                    absStr.length = index + 1
                }
            }
            else if(path[1] == '/' || path[1] == '\\') {
                // current directory, skip both
                path += 1
            }
            else {
                absStr.appendChar('.') // part of a filename
            }
        }
        else {
            absStr.appendChar(*path)
        }
        path += 1
    }

    return absStr.cStr()
}

public func PathEquals(a: *const char, b: *const char) : bool {
    // TODO: Total BS implementation... this is downright wrong
    return strcicmp(a, b, MAX_PATH) == 0
}

const uriEscapeChars = [256]*const char {
    [' '] = "%20",
    ['!'] = "%21",
    ['#'] = "%23",
    ['$'] = "%24",
    ['%'] = "%25",
    ['&'] = "%26",
    ['\''] = "%27",
    ['('] = "%28",
    [')'] = "%29",
    ['*'] = "%2A",
    ['+'] = "%2B",
    [','] = "%2C",
    //['/'] = "%2F",
    [':'] = "%3A",
    [';'] = "%3B",
    ['='] = "%3D",
    ['?'] = "%3F",
    ['@'] = "%40",
    ['['] = "%5B",
    [']'] = "%5D",
}

public func FilePathToUri(path: *const char, output: [MAX_PATH]char) : *char {
    var outputStr = StringInit(output, MAX_PATH, 0)
    outputStr.append("%s", "file:///")

    while(*path) {
        var escaped = uriEscapeChars[*path]
        if(escaped) {
            outputStr.append("%s", escaped)
        }
        else {
            outputStr.appendChar(*path)
        }

        path+=1
    }

    return outputStr.cStr()
}

public func UriToFilePath(uri: *const char, output: [MAX_PATH]char) : *char {
    if(strncmp(uri, "file:///", 8) == 0) {
        uri = &uri[8]
    }

    var outputStr = StringInit(output, MAX_PATH, 0)
    while(*uri) {
        if(*uri == '%') {
            var escaped = [2]char{0};
            if(uri[1] == '2') {
                if(uri[2] == '0') {
                    outputStr.appendChar(' ')
                }
                else if(uri[2] == '1') {
                    outputStr.appendChar('!')
                }
                else if(uri[2] == '3') {
                    outputStr.appendChar('#')
                }
                else if(uri[2] == '4') {
                    outputStr.appendChar('$')
                }
                else if(uri[2] == '5') {
                    outputStr.appendChar('%')
                }
                else if(uri[2] == '6') {
                    outputStr.appendChar('&')
                }
                else if(uri[2] == '7') {
                    outputStr.appendChar('\'')
                }
                else if(uri[2] == '8') {
                    outputStr.appendChar('(')
                }
                else if(uri[2] == '9') {
                    outputStr.appendChar(')')
                }
                else if(uri[2] == 'A') {
                    outputStr.appendChar('*')
                }
                else if(uri[2] == 'B') {
                    outputStr.appendChar('+')
                }
                else if(uri[2] == 'C') {
                    outputStr.appendChar(',')
                }
                else if(uri[2] == 'F') {
                    outputStr.appendChar('/')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%2")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '3') {
                if(uri[2] == 'A') {
                    outputStr.appendChar(':')
                }
                else if(uri[2] == 'B') {
                    outputStr.appendChar(';')
                }
                else if(uri[2] == 'D') {
                    outputStr.appendChar('=')
                }
                else if(uri[2] == 'F') {
                    outputStr.appendChar('?')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%3")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '4') {
                if(uri[2] == '0') {
                    outputStr.appendChar('@')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%4")
                    uri += 2
                    continue
                }
            }
            else if(uri[1] == '5') {
                if(uri[2] == 'B') {
                    outputStr.appendChar('[')
                }
                else if(uri[2] == 'D') {
                    outputStr.appendChar(']')
                }
                else {
                    // invalid escaped sequence -- what to do here?
                    outputStr.append("%s", "%5")
                    uri += 2
                    continue
                }
            }
            else {
                outputStr.appendChar(*uri)
                uri += 1
                continue
            }

            uri += 3
            continue
        }

        outputStr.appendChar(*uri)
        uri += 1
    }

    return outputStr.cStr()
}

@no_profile
public func SystemTimeMSec() : f64 {
    return _SystemTimeMSec()
}

@foreign
struct time_t;

@foreign
struct tm;

@foreign
func time(t: *time_t);

@foreign
func localtime(t: *time_t) : *tm;


@foreign
func asctime(t: *tm) : *const char;

public func CurrentDateTime() : *const char {
    var rawtime: time_t;
    var timeinfo: *tm;

    time(&rawtime)
    timeinfo = localtime(&rawtime)
    return asctime(timeinfo)
}



public func SystemExec(command: *const char) : Process {
    var pipe = popen(command, OPEN_MODE)
    return Process{
        .pipe = pipe
    }
}


public struct Process {
    pipe: *FILE
}

public func (this: *Process) readOutput(buffer: *char, length: usize) : i64 {
    if(!this.pipe) {
        return -1;
    }

    return fread(buffer, sizeof(:char), length, this.pipe)
}

public func (this: *Process) writeInput(buffer: *char, length: usize) : u64 {
    if(!this.pipe) {
        return -1;
    }

    return fwrite(buffer, sizeof(:char), length, this.pipe)
}

public func (this: *Process) close() {
    if(this.pipe) pclose(this.pipe)
}


/**
    tests
*/

@test
func testAbsolutePath() {
    var path = [MAX_PATH]char{0}
    assert(strcmp(GetAbsolutePath("C:/litac", "../src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "./../src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "./..\\src/main.lita", path), "C:/src/main.lita") == 0)
    assert(strcmp(GetAbsolutePath("C:/litac", "../../src/main.lita", path), "src/main.lita") == 0)
}

@test
func testMkdirDelete() {
    Mkdir("rodgers")
    assert(FileExists("rodgers"))
    FileDelete("rodgers")
    assert(!FileExists("rodgers"))
}


// @test
// func testMkdirs() {
//     Mkdirs("C:/tony/this/test")
// }