import "std/libc" as c;
import "std/assert"

import "std/mem/libc_allocator"

@raw("""
#define LITAC_DEFAULT_ALIGNMENT (2*sizeof(void*))
""");


@foreign
public const LITAC_DEFAULT_ALIGNMENT: usize;

public const KiB:usize = 1024;
public const MiB:usize = 1024 * KiB;
public const GiB:usize = 1024 * MiB;

/**
=========================================================
// new allocates a type T
=========================================================
*/

#if (DEBUG)

    public func new<T>(a: *const Allocator = defaultAllocator,
                      file: *const char = c::__FILE__,
                      line: u64 = c::__LINE__) : *T {

        var result = a.calloc(1, sizeof(:T), file, line) as (*T)
        return result
    }

#else

    public func new<T>(a: *const Allocator = defaultAllocator) : *T {
        var result = a.calloc(1, sizeof(:T)) as (*T)
        return result
    }

#end

/**
=========================================================
// Duplicates the supplied memory
=========================================================
*/
public func memduplicate(p: *const void,
                         len: usize,
                         a: *const Allocator = defaultAllocator) : *void {
    var copy = a.alloc(len)
    c::memcpy(copy, p, len)

    return copy
}

///
// From GingerBill!!
// Reference: http://www.gingerbill.org/article/2019/02/08/memory-allocation-strategies-002/
///
public func isPowerOfTwo(x: usize) : bool {
    return (x & (x-1)) == 0
}

public func alignForward(ptr: usize, align: usize) : usize {
    assert(isPowerOfTwo(align))

    var p:usize = ptr;
    var a:usize = align;
    var modulo:usize = p & (a - 1);

    if(modulo != 0) {
        p += (a - modulo)
    }

    return p
}

/**
=========================================================
// Allocator interface
=========================================================
*/

#if (DEBUG)
    public struct Allocator {
        allocFn:   func(*const Allocator, usize, *const char, u64): *void
        callocFn:  func(*const Allocator, usize, usize, *const char, u64): *void
        reallocFn: func(*const Allocator, *void, usize, usize, *const char, u64) : *void
        freeFn:    func(*const Allocator, *void) : void
    }

    @inline
    public func (a: *const Allocator) alloc(size: usize,
                                            file: *const char = c::__FILE__,
                                            line: u64 = c::__LINE__) : *void {
        return a.allocFn(a, size, file, line)
    }

    @inline
    public func (a: *const Allocator) calloc(num: usize,
                                             size: usize,
                                             file: *const char = c::__FILE__,
                                             line: u64 = c::__LINE__) : *void {
        return a.callocFn(a, num, size, file, line)
    }

    @inline
    public func (a: *const Allocator) realloc(ptr: *void,
                                              oldsize: usize,
                                              newsize: usize,
                                              file: *const char = c::__FILE__,
                                              line: u64 = c::__LINE__) : *void {
        return a.reallocFn(a, ptr, oldsize, newsize, file, line)
    }

    @inline
    public func (a: *const Allocator) free(ptr: *void) {
        return a.freeFn(a, ptr)
    }

#else

    public struct Allocator {
        allocFn:   func(*const Allocator, usize): *void
        callocFn:  func(*const Allocator, usize, usize): *void
        reallocFn: func(*const Allocator, *void, usize, usize) : *void
        freeFn:    func(*const Allocator, *void) : void
    }

    @inline
    public func (a: *const Allocator) alloc(size: usize) : *void {
        return a.allocFn(a, size)
    }

    @inline
    public func (a: *const Allocator) calloc(num: usize, size: usize) : *void {
        return a.callocFn(a, num, size)
    }

    @inline
    public func (a: *const Allocator) realloc(ptr: *void, oldsize: usize, newsize: usize) : *void {
        return a.reallocFn(a, ptr, oldsize, newsize)
    }

    @inline
    public func (a: *const Allocator) free(ptr: *void) {
        a.freeFn(a, ptr)
    }

#end


#if (DEBUG)
    public func GenericMalloc<T>(alloc: *const Allocator,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size);
        return result
    }

    public func GenericCalloc<T>(alloc: *const Allocator,
                        num: usize,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    public func GenericRealloc<T>(alloc: *const Allocator,
                        ptr: *void,
                        oldSize: usize,
                        size: usize,
                        file: *const char = c::__FILE__,
                        line: u64 = c::__LINE__) : *void {
        if(ptr == null) {
            return GenericMalloc<T>(alloc, size)
        }

        var this = alloc as (*T);

        var result = this.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)
        }

        return result
    }

#else
    public func GenericMalloc<T>(alloc: *const Allocator,
                        size: usize) : *void {
        var this = alloc as (*T);
        return this.malloc(size);
    }

    public func GenericCalloc<T>(alloc: *const Allocator,
                        num: usize,
                        size: usize) : *void {
        var this = alloc as (*T);
        var result = this.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    public func GenericRealloc<T>(alloc: *const Allocator,
                        ptr: *void,
                        oldSize: usize,
                        size: usize) : *void {
        if(ptr == null) {
            return GenericMalloc<T>(alloc, size)
        }

        var this = alloc as (*T);

        var result = this.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)
        }

        return result
    }
#end


/**
=========================================================
// Default allocator
=========================================================
*/

#if (DEBUG)
    import "std/mem/debug_allocator"

    // @threadlocal
    // TODO: This isn't thread safe :(
    public var defaultAllocator: *const Allocator = (&DebugAllocator {
    }) as (*const Allocator);

    @module_init
    public func ModuleInit() {
        var debugAllocator = defaultAllocator as (*DebugAllocator)
        debugAllocator.init(cAllocator);
    }

    @module_destroy
    public func ModuleDestroy() {
        var debugAllocator = defaultAllocator as (*DebugAllocator)
        debugAllocator.report();
        debugAllocator.free();
    }

#else

    @threadlocal
    public var defaultAllocator: *const Allocator = (&Allocator {
            .allocFn:   &cMalloc,
            .callocFn:  &cCalloc,
            .reallocFn: &cRealloc,
            .freeFn:    &cFree
        }) as (*const Allocator);

#end

@test
func testLineNumber() {
    var mem = defaultAllocator.alloc(1024)
}