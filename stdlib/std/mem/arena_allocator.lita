import "std/mem"
import "std/assert"
import "std/libc" as c


/**
=========================================================
// Arena allocator
=========================================================
*/
public struct ArenaAllocator {
    allocator: Allocator
    decorated: *const Allocator
    arena: *Arena

    pageSize: usize

    numberOfArenas: u32
    numberOfBytesAllocated: usize
}

struct Arena {
    size: usize
    current: usize
    next: *Arena
    region: *u8
}

const PAGE_SIZE:usize = 4096_u64 as (usize)

public func (this: *ArenaAllocator) init(size: usize = PAGE_SIZE,
                                         alloc: *const Allocator = defaultAllocator) {
    this.decorated = alloc
    this.allocator = Allocator {
        .allocFn:   &ArenaMalloc,
        .callocFn:  &ArenaCalloc,
        .reallocFn: &ArenaRealloc,
        .freeFn:    &ArenaFree
    }

    var mem = this.decorated.alloc(sizeof(:Arena) + sizeof(:u8) * size) as (*void)
    this.arena = mem as (*Arena)
    this.arena.size = size
    this.arena.current = 0
    this.arena.next = null
    this.arena.region = (mem + sizeof(:Arena)) as (*u8)

    this.numberOfArenas = 1
    this.numberOfBytesAllocated = size;
    this.pageSize = size;
}

public func (this: *ArenaAllocator) free() {
    this.numberOfArenas = 0
    this.numberOfBytesAllocated = 0;

    var alloc = this.decorated

    var last = this.arena;
    if(!last) {
        return;
    }

    var next: *Arena = null

    do {
        next = last.next
        last.next = null

        alloc.free(last as (*void))
        last = next
    }
    while(next != null)
}

public func (this: *ArenaAllocator) clear() {
    var a = this.arena

    while(a != null) {
        a.current = 0;
        c::memset(a.region, 0, a.size);
        a = a.next
    }
}

public func (this: *ArenaAllocator) unusedBytes() : usize {
    var numberOfUnusedBytes:usize = 0;
    var a = this.arena

    while(a != null) {
        var delta = a.size - a.current;
        numberOfUnusedBytes += delta
        a = a.next
    }

    return numberOfUnusedBytes;
}


#if (DEBUG)
    public func (this: *ArenaAllocator) malloc(size: usize,
                                               file: *const char = c::__FILE__,
                                               line: u64 = c::__LINE__) : *void {
        var a = this.arena
        var last = a

        while(a != null) {
            if((a.size - a.current) > size) {
                a.current += size
                return (a.region + (a.current - size)) as (*void)
            }

            last = a
            a = a.next
        }

        var asize = size > this.pageSize ? size : this.pageSize;

        var mem = this.decorated.alloc(sizeof(:Arena) + sizeof(:char) * asize, file, line) as (*void)
        var next: *Arena = mem as (*Arena)
        next.size = asize
        next.current = 0
        next.next = null
        next.region = (mem + sizeof(:Arena)) as (*u8)

        last.next = next
        next.current += size

        this.numberOfArenas += 1;
        this.numberOfBytesAllocated += asize;

        return next.region as (*void)
    }


    func ArenaMalloc(alloc: *const Allocator,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var arena = alloc as (*ArenaAllocator);
        return arena.malloc(size);
    }

    func ArenaCalloc(alloc: *const Allocator,
                     num: usize,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var arena = alloc as (*ArenaAllocator);
        var result = arena.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func ArenaRealloc(alloc: *const Allocator,
                      ptr: *void,
                      oldSize: usize,
                      size: usize,
                      file: *const char = c::__FILE__,
                      line: u64 = c::__LINE__) : *void {
        if(ptr == null) {
            return ArenaMalloc(alloc, size)
        }

        var arena = alloc as (*ArenaAllocator);

        var result = arena.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)

            ArenaFree(alloc, ptr)
        }

        return result

    }

#else

    public func (this: *ArenaAllocator) malloc(size: usize) : *void {
        var a = this.arena
        var last = a

        while(a != null) {
            if((a.size - a.current) > size) {
                a.current += size
                return (a.region + (a.current - size)) as (*void)
            }

            last = a
            a = a.next
        }

        var asize = size > this.pageSize ? size : this.pageSize;

        var mem = this.decorated.alloc(sizeof(:Arena) + sizeof(:char) * asize) as (*void)
        var next: *Arena = mem as (*Arena)
        next.size = asize
        next.current = 0
        next.next = null
        next.region = (mem + sizeof(:Arena)) as (*u8)


        last.next = next
        next.current += size

        this.numberOfArenas += 1;
        this.numberOfBytesAllocated += asize;

        return next.region as (*void)
    }

    func ArenaMalloc(alloc: *const Allocator, size: usize) : *void {
        var arena = alloc as (*ArenaAllocator);
        return arena.malloc(size);
    }

    func ArenaCalloc(alloc: *const Allocator, num: usize, size: usize) : *void {
        var arena = alloc as (*ArenaAllocator);
        var result = arena.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func ArenaRealloc(alloc: *const Allocator, ptr: *void, oldSize: usize, size: usize) : *void {
        if(ptr == null) {
            return ArenaMalloc(alloc, size)
        }

        var arena = alloc as (*ArenaAllocator);

        var result = arena.malloc(size);
        if(result) {
            var len = c::MIN(oldSize, size)
            c::memcpy(result, ptr, len)

            ArenaFree(alloc, ptr)
        }

        return result

    }

#end

func ArenaFree(alloc: *const Allocator, ptr: *void) {
    // do nothing
}


@test
func testArena() {

    var arena = ArenaAllocator{}
    arena.init(64)

    var allocator:*const Allocator = &arena.allocator

    c::printf("Alloc 1024\n")
    var mem = allocator.alloc(1024)
    c::printf("NumberOfArenas: %d\n", arena.numberOfArenas);
    c::printf("NumberOfBytesAllocated: %zu\n", arena.numberOfBytesAllocated);
    c::printf("NumberOfUnused: %zu\n", arena.unusedBytes());

    c::printf("Alloc 32\n")
    allocator.alloc(32)

    c::printf("NumberOfArenas: %d\n", arena.numberOfArenas);
    c::printf("NumberOfBytesAllocated: %zu\n", arena.numberOfBytesAllocated);
    c::printf("NumberOfUnused: %zu\n", arena.unusedBytes());

    c::printf("Alloc 16\n")
    allocator.alloc(16)

    c::printf("NumberOfArenas: %d\n", arena.numberOfArenas);
    c::printf("NumberOfBytesAllocated: %zu\n", arena.numberOfBytesAllocated);
    c::printf("NumberOfUnused: %zu\n", arena.unusedBytes());

    c::printf("clear\n")
    arena.clear()
    c::printf("NumberOfArenas: %d\n", arena.numberOfArenas);
    c::printf("NumberOfBytesAllocated: %zu\n", arena.numberOfBytesAllocated);
    c::printf("NumberOfUnused: %zu\n", arena.unusedBytes());

    arena.free()
}