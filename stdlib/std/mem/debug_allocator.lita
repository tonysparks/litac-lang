import "std/mem"
import "std/array"
import "std/libc" as c

/**
=========================================================
// Debug Leak Detection allocator
=========================================================
*/
const MAX_PATH = 256

#if (DEBUG)
public struct Allocation {
    addr: *void
    size: usize
    line: u64
    filename: [MAX_PATH]char
}
#else
public struct Allocation {
    addr: *void
    size: usize
}
#end

public struct DebugAllocator {
    alloc: Allocator
    decorated: *const Allocator
    allocations: Array<*Allocation>
    totalAllocations: u32
    totalBytesAllocated: usize
    totalBytesFreed: usize
}

public func (d: *DebugAllocator) init(alloc: *const Allocator = defaultAllocator) {
    d.alloc = Allocator {
        .allocFn:   &DebugMalloc,
        .callocFn:  &DebugCalloc,
        .reallocFn: &DebugRealloc,
        .freeFn:    &DebugFree
    }
    d.decorated = alloc
    d.allocations.init(128, alloc)
    d.totalBytesAllocated = 0
    d.totalAllocations = 0
}

public func (d: *DebugAllocator) free() {
    d.allocations.free()
}

#if (DEBUG)
    public func (d: *DebugAllocator) report() {
        c::printf("Leaked Allocations: {\n")
        for(var i = 0; i < d.allocations.size(); i += 1) {
            var a = d.allocations.get(i)
            if(a.line > 0) {
                c::printf("   Leak at %p (%zu bytes) allocated in '%s' at line: %ju\n", a.addr, a.size, a.filename, a.line)
            }
            else {
                c::printf("   Leak at %p (%zu bytes)\n", a.addr, a.size)
            }
        }
        c::printf("}\n")
    }

    public func (d: *DebugAllocator) malloc(size: usize,
                                            file: *const char,
                                            line: u64) : *void {

        var allocationSize = sizeof(:Allocation) + size;
        var mem = d.decorated.alloc(allocationSize, file, line);
        if(!mem) {
            return null;
        }

        var allocation = mem as (*Allocation)
        allocation.addr = mem + sizeof(:Allocation)
        allocation.size = size
        allocation.line = line
        c::strncpy(allocation.filename, file, MAX_PATH)

        d.allocations.add(allocation)
        d.totalBytesAllocated += size
        d.totalAllocations += 1

        /*var mem = d.decorated.alloc(size)
        if(mem) {
            var allocation = new<Allocation>(d.decorated);
            allocation.addr = mem
            allocation.size = size
            allocation.line = line
            c::strncpy(allocation.filename, file, MAX_PATH)

            d.allocations.add(allocation)
            d.totalBytesAllocated += size
            d.totalAllocations += 1
        }*/

        return allocation.addr;
    }


    func DebugMalloc(alloc: *const Allocator,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var debug = alloc as (*DebugAllocator);
        return debug.malloc(size, file, line);
    }

    func DebugCalloc(alloc: *const Allocator,
                     num: usize,
                     size: usize,
                     file: *const char = c::__FILE__,
                     line: u64 = c::__LINE__) : *void {
        var debug = alloc as (*DebugAllocator);
        var result = debug.malloc(size * num, file, line);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func DebugRealloc(alloc: *const Allocator,
                      ptr: *void,
                      oldSize: usize,
                      size: usize,
                      file: *const char = c::__FILE__,
                      line: u64 = c::__LINE__) : *void {
        if(ptr == null) {
            return DebugMalloc(alloc, size, file, line)
        }

        var debug = alloc as (*DebugAllocator);

        var result = debug.malloc(size, file, line);
        if(result) {
            var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)
            var len = c::MIN(allocation.size, size)

            c::memcpy(result, ptr, len)

            DebugFree(alloc, ptr)
        }

        return result
    }

#else
    public func (d: *DebugAllocator) report() {
        c::printf("Leaked Allocations: {\n")
        for(var i = 0; i < d.allocations.size(); i += 1) {
            var a = d.allocations.get(i)
            c::printf("   Leak at %p (%zu bytes)\n", a.addr, a.size)
        }
        c::printf("}\n")
    }

    public func (d: *DebugAllocator) malloc(size: usize) : *void {
        var allocationSize = sizeof(:Allocation) + size;
        var mem = d.decorated.alloc(allocationSize);
        if(!mem) {
            return null;
        }

        var allocation = mem as (*Allocation)
        allocation.addr = mem + sizeof(:Allocation)
        allocation.size = size

        d.allocations.add(allocation)
        d.totalBytesAllocated += size
        d.totalAllocations += 1

        return allocation.addr;
    }

    func DebugMalloc(alloc: *const Allocator, size: usize) : *void {
        var debug = alloc as (*DebugAllocator);
        return debug.malloc(size);
    }

    func DebugCalloc(alloc: *const Allocator, num: usize, size: usize) : *void {
        var debug = alloc as (*DebugAllocator);
        var result = debug.malloc(size * num);
        if(result) {
            c::memset(result, 0, size * num)
        }

        return result
    }

    func DebugRealloc(alloc: *const Allocator, ptr: *void, oldSize: usize, size: usize) : *void {
        if(ptr == null) {
            return DebugMalloc(alloc, size)
        }

        var debug = alloc as (*DebugAllocator);

        var result = debug.malloc(size);
        if(result) {
            var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)
            var len = c::MIN(allocation.size, size)

            c::memcpy(result, ptr, len)

            DebugFree(alloc, ptr)
        }

        return result
    }

#end

func DebugFree(alloc: *const Allocator, ptr: *void) {
    if(ptr == null) {
        return;
    }

    var debug = alloc as (*DebugAllocator);
    var allocation = (ptr - sizeof(:Allocation)) as (*Allocation)

    var addr = ptr;

    var found = false
    for(var i = 0; i < debug.allocations.size();) {
        var allocation = debug.allocations.get(i)
        if(allocation.addr == addr) {
            debug.totalBytesFreed += allocation.size
            debug.allocations.removeAt(i)
            debug.decorated.free(allocation)
            found = true
            break
        }
        else {
            i += 1
        }
    }

    if(!found) {
        c::printf("Allocation not found: %p\n", ptr)
        debug.decorated.free(ptr)
    }

}
