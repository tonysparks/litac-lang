import "std/mem" as mem;
import "std/assert"
import "std/libc"

/*
    Simple dynamically expandle array
*/
public struct Array<T> {
    length: i32
    capacity: i32
    elements: *T
    alloc: *const mem::Allocator
}

public func ArrayInit<T>(initialSize: i32 = 16,
                         alloc: *const mem::Allocator = mem::defaultAllocator) : Array<T> {
    var array = Array<T>{}
    array.init(initialSize, alloc)
    return array;
}

public func (a: *Array<T>) init<T>(initialSize: i32 = 16,
                                   alloc: *const mem::Allocator = mem::defaultAllocator) {
    a.alloc = alloc;
    a.length = 0;
    a.capacity = initialSize;

    var length = (sizeof(:T) * initialSize as (u64));
    if(initialSize > 0) {
        a.elements = alloc.alloc(length) as (*T)
    }
    else {
        a.elements = null
    }
}

public func (a: *Array<T>) free<T>() {
    if(a && a.elements) {
        a.alloc.free(a.elements as (*void))
        a.elements = null
        a.length = 0
        a.capacity = 0
    }
}

public func (a: *Array<T>) add<T>(element: T) {
    if(a.length + 1 > a.capacity) {
        ArrayGrow<T>(a, 1)
    }

    #if (getTypeKind("element") == "ARRAY")
        memcpy(&a.elements[a.length], element as (*void), sizeof(:T));
    #else
        a.elements[a.length] = element;
    #end

    a.length += 1
}

public func (a: *Array<T>) push<T>(element: T) {
    a.add<T>(element)
}

public func (a: *Array<T>) get<T>(index: i32) : T {
    assert(index >= 0 && index < a.length)

    return a.elements[index]
}

public func (a: *Array<T>) getPtr<T>(index: i32) : *T {
    assert(index >= 0 && index < a.length)

    return &a.elements[index]
}

public func (a: *Array<T>) set<T>(index: i32, element: T) {
    assert(index >= 0 && index < a.length);

    #if (getTypeKind("element") == "ARRAY")
        memcpy(&a.elements[index], element as (*void), sizeof(:T));
    #else
        a.elements[index] = element;
    #end
}

public func (a: *Array<T>) first<T>() : T {
    assert(a.length != 0)

    return a.elements[0]
}

public func (a: *Array<T>) firstPtr<T>() : *T {
    assert(a.length != 0)

    return &a.elements[0]
}

public func (a: *Array<T>) last<T>() : T {
    assert(a.length != 0)

    return a.elements[a.length - 1]
}

public func (a: *Array<T>) lastPtr<T>() : *T {
    assert(a.length != 0)

    return &a.elements[a.length - 1]
}

public func (a: *Array<T>) pop<T>() : T {
    assert(a.length != 0)

    var r = a.elements[a.length - 1]
    a.length -= 1

    return r
}

public func (a: *Array<T>) swap<T>(aIndex: i32, bIndex: i32) {
    assert(aIndex > -1 && aIndex < a.length && bIndex > -1 && bIndex < a.length)

    var aValue = a.elements[aIndex]
    a.elements[aIndex] = a.elements[bIndex]
    a.elements[bIndex] = aValue
}


public func (a: *Array<T>) removeAt<T>(index: i32) : T {
    assert(index >= 0 && index < a.length)

    var r = a.elements[index]
    if(index < a.length - 1) {
        memmove((&a.elements[index]) as (*void),
                (&a.elements[index + 1]) as (*const void),
                ((a.length - 1) - index) * sizeof(:T))
    }

    a.length -= 1
    return r
}

public func (a: *Array<T>) insertAt<T>(index: i32, element: T) {
    assert(index >= 0 && index <= a.length)

    if(index == a.length) {
        a.add(element)
        return;
    }

    a.length += 1

    // not optimal at all -- potential repeated mem moves
    if(a.length + 1 > a.capacity) {
        ArrayGrow<T>(a, 1)
    }

    memmove((&a.elements[index + 1]) as (*void),
            (&a.elements[index]) as (*const void),
            (a.length - index) * sizeof(:T))

    a.set<T>(index, element)
}

public func (a: *Array<T>) addAll<T>(other: *Array<T>) {
    if(!other || other.length == 0) {
        return;
    }

    if(a.length + other.length > a.capacity) {
        ArrayGrow<T>(a, other.length)
    }

    memcpy((&a.elements[a.length]) as (*void),
           (&other.elements[0]) as (*const void),
            other.length * sizeof(:T))
    a.length += other.length
}

public func (a: *Array<T>) forEach<T>(fn : func<T>(T) : bool) {
    for(var i = 0; i < a.length; i+=1) {
        if(fn<T>(a.elements[i])) {
            break;
        }
    }
}

@inline
public func (a: *Array<T>) empty<T>() : bool {
    return a.length == 0
}

@inline
public func (a: *Array<T>) size<T>() : i32 {
    return a.length
}

@inline
public func (a: *Array<T>) clear<T>() {
    a.length = 0
}


public typedef func<T>(T, T) : i32 as SortFunc<T>;

public func (a: *Array<T>) sort<T>(sorter: SortFunc<T>) {
    QuickSort<T>(a, sorter)
}

public func (a: *Array<T>) copy<T>(allocator: *const mem::Allocator = null) : Array<T> {
    var copy = ArrayInit<T>(a.length, allocator ? allocator : a.alloc)
    memcpy(copy.elements, a.elements, a.length * sizeof(:T))
    copy.length = a.length
    return copy
}

func ArrayGrow<T>(a: *Array<T>, increment: i32) {
    var doubleCurrent = a.capacity * 2
    var minReq = a.length + increment
    var n = minReq

    if(doubleCurrent > minReq) {
        n = doubleCurrent
    }

    var newlength = (sizeof(:T) * n as (usize));
    var oldlength = (sizeof(:T) * a.capacity as(usize));
    a.elements = a.alloc.realloc(a.elements as (*void), oldlength, newlength) as (*T)
    a.capacity = n;
}


const MAX_LEVELS = 300
func QuickSort<T>(array: *Array<T>, comp: SortFunc<T>) {
    var beg = [MAX_LEVELS]i32{}
    var end = [MAX_LEVELS]i32{}

    var i = 0
    var L = 0
    var R = 0
    var swap = 0

    var piv: T;

    beg[0] = 0;
    end[0] = array.length;

    while(i >= 0) {
        L = beg[i];
        R = end[i]-1;

        if(L < R) {
            piv = array.elements[L];

            while(L < R) {
                while (L < R && comp(array.elements[R], piv) >= 0) {
                    R -= 1;
                }
                if (L < R) {
                    array.elements[L] = array.elements[R];
                    L+=1
                }

                while (L < R && comp(array.elements[L], piv) <= 0) {
                    L += 1;
                }
                if (L < R) {
                    array.elements[R] = array.elements[L];
                    R -= 1
                }

                array.elements[L] = piv;
                beg[i+1] = L+1;
                end[i+1] = end[i];
                end[i+0] = L;
                i+=1

                if (end[i]-beg[i]>end[i-1]-beg[i-1]) {
                    swap = beg[i];
                    beg[i] = beg[i-1];
                    beg[i-1] = swap;

                    swap = end[i];
                    end[i] = end[i-1];
                    end[i-1] = swap;
                }
            }
        }
        else {
            i -= 1;
        }
    }
}