
import "std/string_buffer"
import "std/net"
import "std/libc"
import "std/net/posix_socket"

@generated
public enum SocketFlags {
    MSG_CONFIRM     = MSG_CONFIRM,
    MSG_DONTROUTE   = MSG_DONTROUTE,
    MSG_DONTWAIT    = MSG_DONTWAIT,
    MSG_EOR         = MSG_EOR,
    MSG_MORE        = MSG_MORE,
    MSG_NOSIGNAL    = MSG_NOSIGNAL,
    MSG_OOB         = MSG_OOB,
    MSG_FASTOPEN    = MSG_FASTOPEN,
}


/*
===================================================
Address API
===================================================
*/

@generated
public const MAX_ADDRESS_SIZE = INET_ADDRSTRLEN;

@generated
public struct SocketAddress {
    type: AddressType;
    _address: [INET_ADDRSTRLEN]char
    _port: u16

    // internal implementation information
    addr: sockaddr_in
}

@generated
public func FromIPAddress(ip: *const char, port: u16, result: *SocketAddress) : *SocketAddress {
    memset(&result.addr, 0, sizeof(result.addr))
    if(inet_pton(AF_INET, ip, (&result.addr.sin_addr) as (*void)) < 0) {
        return null
    }

    StringCopy(.src = ip, .dest = result._address, .size = MAX_ADDRESS_SIZE)
    result._port = port
    result.type = AddressType.IPV4

    result.addr.sin_family = AF_INET
    result.addr.sin_port = htons(port)

    return result
}

@generated
public func FromPort(port: u16, result: *SocketAddress) : *SocketAddress {
    StringCopy(.src = "0.0.0.0", .dest = result._address, .size = MAX_ADDRESS_SIZE)
    result._port = port
    result.type = AddressType.IPV4

    memset(&result.addr, 0, sizeof(result.addr))
    result.addr.sin_family = AF_INET
    result.addr.sin_addr.s_addr = INADDR_ANY
    result.addr.sin_port = htons(port)

    return result
}

@generated
public func (this: *SocketAddress) address(): *const char {
    return this._address;
}

@generated
public func (this: *SocketAddress) port(): u16 {
    return this._port
}

public func (this: *SocketAddress) toString() : *const char {
    @static var buffer:[INET_ADDRSTRLEN]char;
    inet_ntop(AF_INET, &this.addr.sin_addr, buffer, INET_ADDRSTRLEN);
    return buffer
}

/*
===================================================
Socket API
===================================================
*/

@generated
public struct Socket {
    socket: i32
    address: SocketAddress
}

@generated
public func (this: *Socket) create(type: SocketType = SocketType.STREAM) : bool {
    var sck = type == SocketType.STREAM ? SOCK_STREAM : SOCK_DGRAM;

    this.socket = socket(AF_INET, sck, 0)
    return this.socket > -1
}

@generated
public func (this: *Socket) socketAddress() : *SocketAddress {
    return &this.address
}

@generated
public func (this: *Socket) bind() : bool {
    var addr = (&this.address.addr) as (*sockaddr);
    var len = sizeof(this.address.addr) as (socklen_t);
    return bind(this.socket, addr, len) > -1
}

@generated
public func (this: *Socket) listen(backlog: i32 = 128) : bool {
    return listen(this.socket, backlog) > -1
}

@generated
public func (this: *Socket) accept(clientSocket: *Socket) : *Socket {
    var socketLen: socklen_t = sizeof(clientSocket.address.addr) as (socklen_t)
    var addr = (&clientSocket.address.addr) as (*sockaddr)


    clientSocket.socket = accept(this.socket, addr, &socketLen)
    if(clientSocket.socket < 0) {
        return null
    }

    inet_ntop(AF_INET, &clientSocket.address.addr.sin_addr, clientSocket.address._address, INET_ADDRSTRLEN);
    clientSocket.address._port = ntohs(clientSocket.address.addr.sin_port)

    return clientSocket
}

@generated
public func (this: *Socket) setSocketOpt(option: SocketOption, value: *const void, len: usize) : i32 {
    var nativeOption = 0
    switch(option) {
        case SocketOption.SO_DEBUG: nativeOption = SO_DEBUG; break;
        case SocketOption.SO_BROADCAST: nativeOption = SO_BROADCAST; break;
        case SocketOption.SO_REUSEADDR: nativeOption = SO_REUSEADDR; break;
        case SocketOption.SO_KEEPALIVE: nativeOption = SO_KEEPALIVE; break;
        case SocketOption.SO_LINGER: nativeOption = SO_LINGER; break;
        case SocketOption.SO_OOBINLINE: nativeOption = SO_OOBINLINE; break;
        case SocketOption.SO_SNDBUF: nativeOption = SO_SNDBUF; break;
        case SocketOption.SO_RCVBUF: nativeOption = SO_RCVBUF; break;
        case SocketOption.SO_DONTROUTE: nativeOption = SO_DONTROUTE; break;
        case SocketOption.SO_RCVLOWAT: nativeOption = SO_RCVLOWAT; break;
        case SocketOption.SO_RCVTIMEO: nativeOption = SO_RCVTIMEO; break;
        case SocketOption.SO_SNDLOWAT: nativeOption = SO_SNDLOWAT; break;
        case SocketOption.SO_SNDTIMEO: nativeOption = SO_SNDTIMEO; break;
        default: return -1;
    }
    return setsockopt(this.socket, SOL_SOCKET, nativeOption, value, len as (socklen_t))
}

@generated
public func (this: *Socket) read(buffer: *void, len: usize) : i64 {
    return recv(this.socket, buffer, len, 0)
}

@generated
public func (this: *Socket) write(buffer: *void, len: usize, flags: i32 = 0) : i64 {
    return send(this.socket, buffer, len, flags)
}

@generated
public func (this: *Socket) handle() : i32 {
    return this.socket
}

@generated
public func (this: *Socket) close() {
    close(this.socket)
}
