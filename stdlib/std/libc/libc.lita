@compiler_option(
    .os = "linux",
    .options = "-lm"
);

@compiler_option(
    .os = "mac",
    .options = "-lm"
);

@include("<stdarg.h>");
@include("<stdio.h>");
@include("<stdlib.h>");
@include("<math.h>");
@include("<ctype.h>");
@include("<limits.h>");
@include("<string.h>");
@include("<errno.h>");

@raw("""
#ifndef MIN
#define MIN(x, y) ((x) <= (y) ? (x) : (y))
#endif

#ifndef MAX
#define MAX(x, y) ((x) >= (y) ? (x) : (y))
#endif

#ifndef ABS
#define ABS(x)    ((x < 0) ? (x) * -1 : (x))
#endif

#if defined(_WIN32) || defined(WIN32) || defined(__CYGWIN__) || defined(__MINGW32__) || defined(__BORLANDC__)
#define OS_WIN
#endif

#if !defined(OS_WIN) || defined(__TINYC__)
size_t strnlen(const char * s, size_t len) {
    size_t i = 0;
    for ( ; i < len && s[i] != '\0'; ++i);
    return i;
}
#endif

#if defined(OS_WIN)
#define strncasecmp(a, b, n)  _strnicmp((a), (b), (n))
#endif

#if defined(_MSC_VER) || defined(__TINYC__) && (defined(_WIN32) || defined(_WIN64))
#include <io.h>

#define ftruncate(fd, sz) (-(_chsize_s((fd), (sz)) != 0))
#define fileno _fileno
#endif

""");

// mem
@foreign public func malloc(size: usize) : *void;
@foreign public func realloc(ptr:*void, size: usize) : *void;
@foreign public func calloc(num: usize, size: usize) : *void;
@foreign public func free(ptr:*void) : void;

@foreign public func memset(ptr: *void, value: i32, num: usize) : *void;
@foreign public func memcpy (dest: *void, src: *const void, num: usize) : *void;
@foreign public func memmove (dest: *void, src: *const void, num: usize) : *void;

// io
@foreign public struct FILE;
@foreign public const stderr : *FILE;
@foreign public const stdout : *FILE;
@foreign public const stdin  : *FILE;
@foreign public func printf(s:*const char, ...) : void;
@foreign public func fprintf(stream: *FILE, s:*const char, ...) : void;
@foreign public func fflush(stream: *FILE) : void;
@foreign public func fopen(fileName:*const char, openType:*const char) : *FILE;
@foreign public func fgets(buf: *char, n:i64, stream: *FILE): *char;
@foreign public func fputc(c: i32, stream: *FILE): i32;
@foreign public func fread(buf: *char, size:usize, n:usize, stream: *FILE) : usize;
@foreign public func fwrite(buf: *const void, sizeOfElements: usize, numOfElements: usize, stream: *FILE) : usize;
@foreign public func fclose(stream: *FILE) : void;
@foreign public func fseek(stream: *FILE, offset : i64, whence : i32) : i32;
@foreign public func ftell(stream: *FILE) : i64;
@foreign public func ferror(stream: *FILE) : i32;
@foreign public func remove(filename: *const char) : i32;
@foreign public func rename(src: *const char, dst: *const char) : i32;
@foreign public func scanf(format: *const char, ...) : i32;
@foreign public func fscanf(stream: *FILE, format: *const char, ...) : i32;
@foreign public func getchar() : i32;
@foreign public func fileno(stream: *FILE) : i32;
@foreign public func ftruncate(fd: i32, size: usize) : bool;
@foreign public const SEEK_SET : i32;
@foreign public const SEEK_CUR : i32;
@foreign public const SEEK_END : i32;

// TODOL move errno into separate module
@foreign public var errno: i32;
@foreign public func perror(str: *const char);

// Math operations
@foreign public func MAX<T>(a: T, b: T) : T;
@foreign public func MIN<T>(a: T, b: T) : T;
@foreign public func ABS<T>(a: T) : T;
@foreign public func sqrt(v: f64) : f64;
@foreign public func sqrtf(v: f32) : f32;
@foreign public func cos(v: f64) : f64;
@foreign public func cosf(v: f32) : f32;
@foreign public func sin(v: f64) : f64;
@foreign public func sinf(v: f32) : f32;
@foreign public func asinf(v: f32) : f32;
@foreign public func fabs(v: f32) : f32;
@foreign public func tan(v: f64) : f64;
@foreign public func exp2(v: f64) : f64;
@foreign public func pow(base: f64, exponent: f64) : f64;
@foreign public const M_PI: f64;

@foreign public const RAND_MAX: i64;
@foreign public func rand() : i32;
@foreign public func srand(seed: u32);

// Varargs
@foreign public struct va_list;
@foreign public func va_start<T>(args: va_list, firstArg: T);
@foreign public func va_end(args: va_list);
@foreign public func va_copy(a: va_list, b: va_list);
@foreign("va_arg") public func native_va_arg<T>(a: va_list, type: T) : T;
public func va_arg<T>(args: va_list) : T {
    return native_va_arg(args, T)
}
@foreign public func vprintf(format: *const char, ap: va_list) : i32;
@foreign public func vfprintf(f:*FILE, format: *const char, args: va_list);
@foreign public func vsprintf_s(ptr: *void, len: u64, format: *const char, args: va_list) : i32;
@foreign public func vsnprintf(buffer: *char, len: u64, format: *const char, args: va_list) : i32;
@foreign public func vsnprintf_s(ptr: *void, len: u64, max: u64, format: *const char, args: va_list) : i32;
@foreign public func fputs(format: *const char,f:*FILE);

// algorithms
@foreign public func qsort<T>(ptr: *void, count: usize, size: usize, comp: func<T>(T, T) : i32);

// system
@foreign public func exit(code: i32);
@foreign public func system(cmd: *const char) : i32;
@foreign public func abort();

// string operations
@foreign public func strcat(dest: *char, src: *const char) : *char;
@foreign public func strncat(dest: *char, src: *const char, num: usize) : *char;
@foreign public func strncpy(dest: *char, src: *const char, num: usize) : *char;
@foreign public func strcpy(dest: *char, src: *const char) : *char;
@foreign public func strlen(str: *const char) : i32;
@foreign public func strnlen(str: *const char, len: usize) : i32;
@foreign public func strncmp(a: *const char, b: *const char, num: usize) : i32;
@foreign public func strcmp(a: *const char, b: *const char) : i32;
@foreign public func snprintf(s: *char, n: usize, format: *const char, ...): i32;
@foreign public func sprintf(b: *char, format: *const char, ...) : i32;
@foreign public func strtok(str: *char, delim: *const char) : *char;
@foreign public func strtol(str: *const char, end: **char, base: i32) : i64;
@foreign public func strtoul(str: *const char, end: **char, base: i32) : u64;
@foreign public func strtod(str: *const char, end: **char) : f64;
@foreign public func sscanf(str: *const char, format: *const char, ...) : i32;
@foreign public func isdigit(arg: i32) : i32;
@foreign public func isxdigit(arg: i32) : i32;
@foreign public func tolower(arg: i32) : i32;
@foreign public func toupper(arg: i32) : i32;
@foreign public func isalnum(arg: i32) : i32;
@foreign public func isspace(arg: i32) : i32;
@foreign public func isalpha(c: char) : bool;
@foreign public func atoi(str: *const char) : i32;

// numbers
@foreign public const EOF: i32;
@foreign public const CHAR_BIT: i32;
@foreign public const SCHAR_MIN: i32;
@foreign public const SCHAR_MAX: i32;
@foreign public const CHAR_MIN: i32;
@foreign public const CHAR_MAX: i32;
@foreign public const SHRT_MIN: i32;
@foreign public const SHRT_MAX: i32;
@foreign public const USHRT_MAX: i32;
@foreign public const INT_MIN: i32;
@foreign public const INT_MAX: i32;
@foreign public const UINT_MAX: i32;
@foreign public const LONG_MIN: i32;
@foreign public const LONG_MAX: i32;
@foreign public const ULLONG_MAX: i64;
@foreign public const HUGE_VAL: f64;


@foreign
public const __FILE__: *const char;

@foreign
public const __FUNCTION__: *const char;

@foreign
public const __LINE__: usize;

/**
    Because vsnprintf does not return consistent behavior
*/
#if (OS == "WINDOWS")
    @foreign public func _vscprintf(format: *const char, args: va_list) : i32;
#else
    public func _vscprintf(format: *const char, args: va_list) : i32 {
        var argcopy: va_list;
        va_copy(argcopy, args);
        var retval: i32 = vsnprintf(null, 0, format, argcopy);
        va_end(argcopy);

        return retval;
    }
#end