@cFile("./subprocess.h");
@raw("""
typedef struct subprocess_s subprocess_s;
""");

import "std/libc"

@foreign
public struct subprocess_s;


@foreign
public enum subprocess_option_e {
  // stdout and stderr are the same FILE.
  subprocess_option_combined_stdout_stderr = 0x1,

  // The child process should inherit the environment variables of the parent.
  subprocess_option_inherit_environment = 0x2,

  // Enable asynchronous reading of stdout/stderr before it has completed.
  subprocess_option_enable_async = 0x4
};


/// @brief Create a process.
/// @param command_line An array of strings for the command line to execute for
/// this process. The last element must be NULL to signify the end of the array.
/// @param options A bit field of subprocess_option_e's to pass.
/// @param out_process The newly created process.
/// @return On success 0 is returned.
@foreign
public func subprocess_create(command_line: **const char, options: i32, out_process: *const subprocess_s) : i32;

/// @brief Create a process (extended create).
/// @param command_line An array of strings for the command line to execute for
/// this process. The last element must be NULL to signify the end of the array.
/// The memory backing this parameter only needs to persist until this function
/// returns.
/// @param options A bit field of subprocess_option_e's to pass.
/// @param environment An optional array of strings for the environment to use
/// for a child process (each element of the form FOO=BAR). The last element
/// must be NULL to signify the end of the array.
/// @param out_process The newly created process.
/// @return On success zero is returned.
///
/// If `options` contains `subprocess_option_inherit_environment`, then
/// `environment` must be NULL.
@foreign
public func subprocess_create_ex(
  command_line: **const char,
  options: i32,
  environment: **const char,
  process_cwd: *const char,
  out_process: *const subprocess_s) : i32;

/// @brief Get the standard input file for a process.
/// @param process The process to query.
/// @return The file for standard input of the process.
///
/// The file returned can be written to by the parent process to feed data to
/// the standard input of the process.
@foreign
public func subprocess_stdin(process: *const subprocess_s) : *FILE;

/// @brief Get the standard output file for a process.
/// @param process The process to query.
/// @return The file for standard output of the process.
///
/// The file returned can be read from by the parent process to read data from
/// the standard output of the child process.
@foreign
public func subprocess_stdout(process: *const subprocess_s) : *FILE;

/// @brief Get the standard error file for a process.
/// @param process The process to query.
/// @return The file for standard error of the process.
///
/// The file returned can be read from by the parent process to read data from
/// the standard error of the child process.
///
/// If the process was created with the subprocess_option_combined_stdout_stderr
/// option bit set, this function will return NULL, and the subprocess_stdout
/// function should be used for both the standard output and error combined.
@foreign
public func subprocess_stderr(process: *const subprocess_s) : *FILE;

/// @brief Wait for a process to finish execution.
/// @param process The process to wait for.
/// @param out_return_code The return code of the returned process (can be
/// NULL).
/// @return On success 0 is returned.
///
/// Joining a process will close the stdin pipe to the process.
@foreign
public func subprocess_join(process: *const subprocess_s, out_return_code: *const i32) : i32;

/// @brief Destroy a previously created process.
/// @param process The process to destroy.
/// @return On success 0 is returned.
///
/// If the process to be destroyed had not finished execution, it may out live
/// the parent process.
@foreign
public func subprocess_destroy(process: *const subprocess_s) : i32;

/// @brief Terminate a previously created process.
/// @param process The process to terminate.
/// @return On success 0 is returned.
///
/// If the process to be destroyed had not finished execution, it will be
/// terminated (i.e killed).
@foreign
public func subprocess_terminate(process: *const subprocess_s) : i32;

/// @brief Read the standard output from the child process.
/// @param process The process to read from.
/// @param buffer The buffer to read into.
/// @param size The maximum number of bytes to read.
/// @return The number of bytes actually read into buffer. Can only be 0 if the
/// process has complete.
///
/// The only safe way to read from the standard output of a process during it's
/// execution is to use the `subprocess_option_enable_async` option in
/// conjuction with this method.
@foreign
public func subprocess_read_stdout(process: *const subprocess_s, buffer: *const char, size: u32) : u32;

/// @brief Read the standard error from the child process.
/// @param process The process to read from.
/// @param buffer The buffer to read into.
/// @param size The maximum number of bytes to read.
/// @return The number of bytes actually read into buffer. Can only be 0 if the
/// process has complete.
///
/// The only safe way to read from the standard error of a process during it's
/// execution is to use the `subprocess_option_enable_async` option in
/// conjuction with this method.
@foreign
public func subprocess_read_stderr(process: *const subprocess_s, buffer: *const char, size: u32) : u32;