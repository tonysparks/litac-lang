import "std/string_buffer"
import "std/string_view"
import "std/libc"
import "std/libc/signal"
import "std/web/mongoose"
import "std/mem"
import "std/map"
import "std/atomic"

import using "std/web/web_request"

@doc("""

A hello world web application:

```litac
import "std/web"

@get_request(.uri = "/echo")
public func Hello(ctx: *WebContext) : i32 {
    var req = ctx.request.getQueryValue("say")


    return 200
}

func main(len: i32, args: **char) : i32 {
    var server: WebServer;
    var config = WebConfig{}
    printf("Starting http server: %s\n", config.addr)

    server.init(&config)

    server.start()

    printf("Terminated http server")
    return 0
}
```

""");

var globalSignalNumber: Atomic<i32>;

func signalHandler(signo: i32) {
    globalSignalNumber.set(signo)
}

@doc("Callback function from a web request annotation")
public typedef func(*WebContext): i32 as WebController;

/**
    This will scan all symbols for web annotations.  Functions annotated with
    'get_request', 'delete_request', 'post_request', 'put_request' or 'web_request'
    are automatically bound to a URI and incoming web requests are matched against
    these annotations.  If a match is found, the corresponding WebController is
    called.
*/
#precheck
    "request_preprocessor.ape"
#end

func Web404Controller(ctx: *WebContext) : i32 {
    return 404
}

public struct WebContext {
    conn: *mg_connection
    request: *WebRequest
    response: *WebResponse
    userdata: *void
}

public const MAX_HTTP_HEADERS = MG_MAX_HTTP_HEADERS;

public struct WebResponse {
    status: i32
    headers: Map<*const char, *const char>
    body: StringBuffer
}

public struct WebConfig {
    addr: *const char = "http://0.0.0.0:8080"
    poll: i32
    userdata: *void
    disableSignals: bool
}

public enum WebStatus {
    OK,
    ERROR,
}

public struct WebServer {
    allocator: *const Allocator
    config: *WebConfig
    mg: mg_mgr
    poll: i32

    scratch: StringBuffer

    connection: *mg_connection
}


@doc("""
    Initializes the web server
""")
public func (this: *WebServer) init(config: *WebConfig,
                                    allocator: *const Allocator = defaultAllocator) : WebStatus {
    this.allocator = allocator
    this.config = config

    this.scratch = StringBufferInit(2046, allocator)

    mg_mgr_init(&this.mg)
    this.connection = mg_http_listen(&this.mg, config.addr, WebCallbackFn, this)
    if(!this.connection) {
        return WebStatus.ERROR
    }

    if(!this.config.disableSignals) {
        globalSignalNumber.init(0)
        signal(SIGINT, signalHandler)
        signal(SIGTERM, signalHandler)
    }

    return WebStatus.OK
}

@doc("""
    Starts the web server, blocks indefinetly
""")
public func (this: *WebServer) start() {
    if(this.config.disableSignals) {
        for(;;) {
            mg_mgr_poll(&this.mg, this.poll)
        }
    }
    else {
        while(globalSignalNumber.get() == 0) {
            mg_mgr_poll(&this.mg, this.poll)
        }
    }

    mg_mgr_free(&this.mg)
}


func GetWebController(msg: *mg_http_message) : WebController {
    if(mg_vcmp(msg.method, "GET") == 0) {
        return GET_WebController(msg)
    }
    else if(mg_vcmp(msg.method, "POST") == 0) {
        return POST_WebController(msg)
    }
    else if(mg_vcmp(msg.method, "PUT") == 0) {
        return PUT_WebController(msg)
    }
    else if(mg_vcmp(msg.method, "DELETE") == 0) {
        return DELETE_WebController(msg)
    }

    return WEB_WebController(msg)
}

/**
    Handle a mongoose event, this will just delegate to a WebController
    which are registered via the precheck script
*/
func WebCallbackFn(conn: *mg_connection, ev: i32, ev_data: *void, fn_data: *void) {
    var server = fn_data as (*WebServer)

    if(ev == MgEvent.MG_EV_HTTP_MSG) {
        var msg = ev_data as (*mg_http_message)

        var request = WebRequest {
            .msg = msg
        }

        var response = WebResponse {}
        response.headers = StrMap<*const char>(null, 16, server.allocator)
        response.body.init(1024, server.allocator)

        var context = WebContext {
            .conn = conn,
            .request = &request,
            .response = &response,
            .userdata = server.config.userdata,
        }

        var controller = GetWebController(msg)
        response.status = controller(&context)

        server.scratch.clear()
        ConvertHeaders(&response.headers, &server.scratch)

        // TODO: Switch on response types
        // 1) Directory
        // 2) File
        // 3) Chunk
        // 4) standard reply

        /* Send http response */
        mg_http_reply(
            conn,
            response.status,
            server.scratch.cStr(),
            response.body.cStr());
    }
}

func ConvertHeaders(headers: *Map<*const char, *const char>, buffer: *StringBuffer) {
    for(var it = headers.iter(); it.hasNext();) {
        var entry = it.next()
        buffer.append("%s: %s\r\n", entry.key, entry.value)
    }
}
