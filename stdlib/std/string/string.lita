import "std/libc"
import "std/mem" as mem
import "std/assert"


// Defined in builtin.lita
// public struct String {
//     buffer: *const char
//     length: i32
// }

public func StringInit(buffer: *const char, length: i32 = -1) : String {
    if(buffer == null) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    return String {
        .buffer = buffer,
        .length = (length < 0) ? buffer.length() : length
    }
}

public func (b: String) hash() : u32 {
    var hash = 5381_u32;
    for(var i = 0; i < b.length; i+=1) {
        hash = ((hash << 5_u32) + hash) + ((b.buffer[i]) as (u32));
    }
    return hash;
}

public func (b: String) substring(start: i32, end: i32 = -1) : String {
    var endIndex = end < 0 ? b.length : end

    if(endIndex <= start || start < 0 || start >= b.length) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    return String {
        .buffer = &b.buffer[start],
        .length = endIndex - start
    }
}

public func (b: String) substringOf(str: String) : String {
    var index = b.indexOf(str)
    if(index < 0) {
        return String{}
    }

    return b.substring(0, index)
}

public func (b: String) startsWith(prefix: String, fromIndex: i32 = 0) : bool {
    if(prefix.length < 1) {
        return false
    }

    var ta = b.buffer;
    var to = fromIndex;
    var pa = prefix.buffer;
    var po = 0;
    var pc = prefix.length;

    if ((fromIndex < 0) || (fromIndex > b.length - pc)) {
        return false;
    }

    while ((pc -= 1) >= 0) {
        if (ta[to] != pa[po]) {
            return false;
        }
        to+=1
        po+=1
    }
    return true;
}

public func (b: String) endsWith(suffix: String) : bool {
    return b.startsWith(suffix, b.length - suffix.length)
}

public func (b: String) equalsString(str: *const char, len: i32 = -1) : bool {
    if(!str) {
        return b.buffer == null;
    }

    len = (len < 0) ? str.length() : len;
    if(b.length != len) {
        return false;
    }

    return strncmp(b.buffer, str, len) == 0
}

public func (b: String) equals(other: String) : bool {
    return b.equalsString(other.buffer, other.length)
}

public func (b: String) equalsIgnoreCase(str: String) : bool {
    if(b.length != str.length) {
        return false;
    }

    var len = str.length
    while(len) {
        var c1 = tolower(*b.buffer)
        var c2 = tolower(*str.buffer)

        if(c1 != c2) {
            return false
        }

        if(c1 == '\0') {
            return true
        }

        b.buffer += 1
        str.buffer += 1
        len -= 1
    }
    return true
}

public func (b: String) contains(str: String) : bool {
    return b.indexOf(str) > -1;
}

public func (b: String) endIndexOf(str: String) : i32 {
    return b.endIndexOfAt(str, 0)
}

public func (b: String) endIndexOfAt(str: String, fromIndex: i32 = 0) : i32 {
    var index = b.indexOfAt(str, fromIndex)
    if(index < 0) return -1
    return index + str.length
}

public func (b: String) indexOf(str: String) : i32 {
    return b.indexOfAt(str, 0)
}

public func (b: String) indexOfAt(str: String, fromIndex: i32 = 0) : i32 {
    if(str.length < 1) {
        return -1;
    }

    var target = str.buffer
    var source = b.buffer

    var targetOffset = 0;
    var sourceOffset = 0;

    var first = target[0];

    var len = str.length
    var targetCount = len

    var max = sourceOffset + (b.length - targetCount);

    for (var i = sourceOffset + fromIndex; i <= max; i += 1) {
        /* Look for first character. */
        if (source[i] != first) {
            while (i <= max && source[i] != first) {
                i+=1
            }
        }

        /* Found first character, now look at the rest of v2 */
        if (i <= max) {
            var j = i + 1;
            var end = j + targetCount - 1;
            for (var k = targetOffset + 1; j < end && source[j] == target[k];) {
                j += 1;
                k += 1;
            }

            if (j == end) {
                /* Found whole string. */
                return i - sourceOffset;
            }
        }
    }
    return -1;
}

public func (b: String) lastIndexOfAt(str: String, fromIndex: i32 = -1) : i32 {
    var len = str.length
    var sourceCount = b.length
    var targetCount = len

    var targetOffset = 0
    var sourceOffset = 0

    var source = b.buffer
    var target = str.buffer

    var rightIndex = sourceCount - targetCount;
    if (fromIndex < 0) {
        fromIndex = sourceCount
    }
    if (fromIndex > rightIndex) {
        fromIndex = rightIndex;
    }
    /* Empty string always matches. */
    if (targetCount == 0) {
        return fromIndex;
    }

    var strLastIndex = targetOffset + targetCount - 1;
    var strLastChar = target[strLastIndex];
    var min = sourceOffset + targetCount - 1;
    var i = min + fromIndex;

startSearchForLastChar:
    while (true) {
        while (i >= min && source[i] != strLastChar) {
            i-=1;
        }
        if (i < min) {
            return -1;
        }
        var j = i - 1;
        var start = j - (targetCount - 1);
        var k = strLastIndex - 1;

        while (j > start) {
            if (source[j] != target[k]) {
                i -= 1;
                goto startSearchForLastChar;
            }
            j -= 1
            k -= 1
        }
        return start - sourceOffset + 1;
    }

}

public struct SplitIter {
    str: String
    split: String

    lastIndex: i32
    currentIndex: i32
}

public func (this: *SplitIter) hasNext() : bool {
    this.currentIndex = this.str.endIndexOfAt(this.split, this.lastIndex)
    return this.currentIndex > -1 || this.lastIndex < this.str.length
}

public func (this: *SplitIter) next() : String {
    var result = this.str.substring(this.lastIndex, this.currentIndex - this.split.length)

    this.lastIndex = this.currentIndex
    if(this.lastIndex < 0) this.lastIndex = this.str.length

    return result
}

public func (this: *SplitIter) remaining() : String {
    if(this.currentIndex < 0 || this.currentIndex >= this.str.length) {
        return String{}
    }

    var offset = (&this.str.buffer[this.currentIndex] - this.str.buffer) as (i32);
    return String {
        .buffer = this.str.buffer + this.currentIndex,
        .length = this.str.length - offset
    }
}

public func (this: String) split(str: String): SplitIter {
    return SplitIter {
        .str = this,
        .split = str,
        .lastIndex = 0,
        .currentIndex = 0,
    }
}

public func (this: String) leftTrim(): String {
    var i = 0
    while(i < this.length) {
        var c = this.buffer[i]
        if(!isspace(c)) {
            break
        }
        i+=1
    }
    return this.substring(i)
}

public func (this: String) rightTrim(): String {
    var i = this.length - 1
    while(i >= 0) {
        var c = this.buffer[i]
        if(!isspace(c)) {
            break
        }
        i -= 1
    }
    return this.substring(0, i + 1)
}

public func (this: String) trim(): String {
    var left = this.leftTrim()
    return left.rightTrim()
}

public func (b: String) copyTo(buf: *char, len: i32, addZero: bool = true) : i32 {
    if(!buf || len == 0) return 0;

    var bytesCopied = len
    if(b.length < len) {
        bytesCopied = b.length
    }

    memcpy(buf as (*void),
          (&b.buffer[0]) as (*const void),
           bytesCopied * sizeof(:char))

    if(addZero) buf[bytesCopied] = '\0'

    return (bytesCopied)
}

public func (s: String) copy(allocator: *const mem::Allocator = mem::defaultAllocator) : String {
    if(s.length < 1) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    var copiedStr = allocator.alloc((s.length + 1) * sizeof(:char)) as (*char)
    memcpy(copiedStr, s.buffer, s.length)

    copiedStr[s.length] = '\0'

    return String{
        .buffer = copiedStr,
        .length = s.length
    }
}

public func (b: String) forEach(fn : func(char) : bool) {
    for(var i = 0; i < b.length; i+=1) {
        if(fn(b.buffer[i])) {
            break;
        }
    }
}

public func (b: String) empty() : bool {
    return b.length == 0
}

public func (b: String) size() : i32 {
    return b.length
}

public func (b: String) get(index: i32) : char {
    if(index < 0 || index >= b.length) {
        return '\0'
    }

    return b.buffer[index]
}



public func StringClone(original: *const char, len: i32 = -1, allocator: *const mem::Allocator = mem::defaultAllocator) : *char {
    if(!original) {
        return null
    }

    if(len < 0) {
        len = original.length()
    }

    var copiedStr: *char = null

    if(len > 0) {
        copiedStr = allocator.alloc((len + 1) * sizeof(:char)) as (*char)
        memcpy(copiedStr, original, len)

        copiedStr[len] = '\0'
    }
    return copiedStr
}

public func StringCopy(src: *const char, dest: *char, size: usize) : *char {
    if(!src) {
        return null
    }

    if (size > 0) {
        var i:usize;
        for (i = 0; i < size - 1 && src[i]; i+=1) {
             dest[i] = src[i];
        }
        dest[i] = '\0';
    }
    return dest;
}

public func StringHashLen(str: *const char, size: usize) : u32 {
    var hash = 5381_u32;

    var index = 0_usize
    while (index < size) {
        hash = ((hash << 5_u32) + hash) ^ ((*str) as (u32));
        str   += 1;
        index += 1;
    }
    return hash;
}

public func StringHash(str: *const char) : u32 {
    var hash = 5381_u32;

    while (*str) {
        hash = ((hash << 5_u32) + hash) ^ ((*str) as (u32));
        str += 1;
    }
    return hash;
}

public func StringEqualLen(a: *const char, b: *const char, size: usize) : bool {
    if(!a && !b) return true
    if(!a || !b) return false

    return strncmp(a, b, size) == 0
}

public func StringEqual(a: *const char, b: *const char) : bool {
    if(!a && !b) return true
    if(!a || !b) return false

    return strcmp(a, b) == 0
}

public func (str: *const char) hash() : u32 {
    return StringHash(str)
}

public func (str: *const char) equals(other: *const char) : bool {
    if(!str && !other) return true
    if(!str || !other) return false

    return strcmp(str, other) == 0
}

public func (str: *const char) equalsString(other: String) : bool {
    return StringEqualLen(str, other.buffer, other.length)
}

public func (str: *const char) length() : i32 {
    return strlen(str)
}


public func (str: *const char) empty() : bool {
    return str[0] == '\0'
}

public func (str: *const char) toString() : String {
    return String {
        .buffer = str,
        .length = strlen(str)
    }
}


@test("equals")
func testEquals() {
    var a = StringInit("Hello World")
    var b = StringInit("Bye World")
    var c = a
    var d = StringInit("HelloWorld")
    var e = StringInit(null)

    assert(a.equalsString(c.buffer, c.length) == true)
    assert(a.equalsString("Hell") == false)
    assert(a.equalsString("Hello World") == true)
    assert(a.equalsString(b.buffer, b.length) == false)
    assert(a.equalsString(d.buffer, d.length) == false)
    assert(e.equalsString(d.buffer, d.length) == false)
    assert(a.equalsString(e.buffer, e.length) == false)
}


@test("contains")
func testContains() {
    var a = $"Hello World"
    var e = StringInit(null)

    assert(a.contains($"World") == true)
    assert(a.contains($"d") == true)
    assert(a.contains($"H") == true)
    assert(a.contains($"Which".substring(0, 1)) == true)
    assert(e.contains($"World") == false)
    assert(a.contains(e) == false)
}

@test("startsWith")
func testStartsWith() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.startsWith($"World") == false)
    assert(a.startsWith($"d") == false)
    assert(a.startsWith($"H") == true)
    assert(a.startsWith($"Hell") == true)
    assert(a.startsWith($"Hello World") == true)
    assert(a.startsWith($"Hello World!") == false)
    assert(a.startsWith($"Which", 1) == false)
    assert(a.startsWith($"ello", 1) == true)
    assert(e.startsWith($"World") == false)
    assert(a.startsWith(e) == false)
}

@test("endsWith")
func testEndsWith() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.endsWith($"World") == true)
    assert(a.endsWith($"d") == true)
    assert(a.endsWith($"H") == false)
    assert(a.endsWith($"Hell") == false)
    assert(a.endsWith($"Hello World") == true)
    assert(a.endsWith($"Hello World!") == false)
}

@test("indexOf")
func testIndexOf() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.indexOfAt($"World", 2) == 6)
    assert(a.indexOfAt($"World", 7) == -1)
    assert(a.indexOfAt($"d") == 10)
    assert(a.indexOfAt($"H") == 0)
    assert(a.indexOfAt($"H", 2) == -1)

    assert(e.indexOfAt($"World") == -1)
    assert(a.indexOfAt(e) == -1)
}


@test("lastIndexOf")
func testLastIndexOf() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.lastIndexOfAt($"World") == 6)
    assert(a.lastIndexOfAt($"World", .fromIndex: 5) == -1)
    assert(a.lastIndexOfAt($"World", .fromIndex: 7) == 6)
    assert(a.lastIndexOfAt($"l") == 9)
    assert(a.lastIndexOfAt($"o") == 7)
    assert(a.lastIndexOfAt($"z") == -1)

    assert(e.lastIndexOfAt($"World") == -1)
}

@test("splitSingle")
func testSplitSingle() {
    var str = StringInit("a=xxx&b=yyy")
    var it = str.split($"&")

    var count = 0
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("a=xxx"))
        count += 1
    }

    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("b=yyy"))
        count += 1
    }

    assert(it.hasNext() == false)

    assert(count == 2)
}

@test("splitMulti")
func testSplitMulti() {
    var str = StringInit("a=xxx&&b=yyy")
    var it = str.split($"&&")

    var count = 0
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("a=xxx"))
        count += 1
    }

    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("b=yyy"))
        count += 1
    }

    assert(it.hasNext() == false)

    assert(count == 2)
}


@test("splitOne")
func testSplitOne() {
    var str = StringInit("a=xxx")
    var it = str.split($"&&")

    var count = 0
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("a=xxx"))
        count += 1
    }

    assert(it.hasNext() == false)

    assert(count == 1)
}

@test("splitOneFirst")
func testSplitOneFirst() {
    var str = StringInit("&&a=xxx")
    var it = str.split($"&&")

    var count = 0
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString(""))
        count += 1
    }
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("a=xxx"))
        count += 1
    }

    assert(it.hasNext() == false)

    assert(count == 2)
}

@test("splitOneLast")
func testSplitOneLast() {
    var str = StringInit("a=xxx&&")
    var it = str.split($"&&")

    var count = 0
    {
        assert(it.hasNext())
        var n1 = it.next()
        printf("N='%.*s'\n", n1.length, n1.buffer)
        assert(n1.equalsString("a=xxx"))
        count += 1
    }

    assert(it.hasNext() == false)

    assert(count == 1)
}

@test("leftTrim")
func testLeftTrim() {
    var str = StringInit("  x yz")
    assert(str.leftTrim().equalsString("x yz"))

    str = StringInit("\n\tx yz")
    assert(str.leftTrim().equalsString("x yz"))

    str = StringInit("")
    assert(str.leftTrim().equalsString(""))

    str = StringInit("x ")
    assert(str.leftTrim().equalsString("x "))
}

@test("rightTrim")
func testRightTrim() {
    var str = StringInit("xy z  ")
    assert(str.rightTrim().equalsString("xy z"))

    str = StringInit("xy z\n\t")
    assert(str.rightTrim().equalsString("xy z"))

    str = StringInit("")
    assert(str.rightTrim().equalsString(""))

    str = StringInit(" x")
    assert(str.rightTrim().equalsString(" x"))
}

@test("trim")
func testTrim() {
    var str = StringInit("  xy z  ")
    assert(str.trim().equalsString("xy z"))

    str = StringInit("\n\txy z\n\t")
    assert(str.trim().equalsString("xy z"))

    str = StringInit("")
    assert(str.trim().equalsString(""))

    str = StringInit("x")
    assert(str.trim().equalsString("x"))
}