import "std/libc"
import "std/mem" as mem
import "std/assert"


public struct String {
    buffer: *const char
    length: i32
}

public func StringInit(str: *const char, len: i32 = -1) : String {
    if(str == null) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    return String {
        .buffer = str,
        .length = (len < 0) ? str.length() : len
    }
}

public func (b: String) hash() : u32 {
    var hash = 5381_u32;
    for(var i = 0; i < b.length; i+=1) {
        hash = ((hash << 5_u32) + hash) + ((b.buffer[i]) as (u32));
    }
    return hash;
}

public func (b: String) substring(start: i32, end: i32 = -1) : String {
    var endIndex = end < 0 ? b.length : end

    if(endIndex <= start || start < 0 || start >= b.length) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    return String {
        .buffer = &b.buffer[start],
        .length = endIndex - start
    }
}

public func (b: String) startsWith(prefix: *const char, len: i32 = -1, fromIndex: i32 = 0) : bool {
    if(!prefix) return false;

    var ta = b.buffer;
    var to = fromIndex;
    var pa = prefix;
    var po = 0;
    var pc = (len < 0) ? prefix.length() : len;

    if ((fromIndex < 0) || (fromIndex > b.length - pc)) {
        return false;
    }

    while ((pc -= 1) >= 0) {
        if (ta[to] != pa[po]) {
            return false;
        }
        to+=1
        po+=1
    }
    return true;
}

public func (b: String) endsWith(suffix: *const char, len: i32 = -1) : bool {
    if(!suffix) return false;

    len = (len < 0) ? suffix.length() : len;
    return b.startsWith(suffix, len, b.length - len)
}

public func (b: String) equals(str: *const char, len: i32 = -1) : bool {
    if(!str) {
        return b.buffer == null;
    }

    len = (len < 0) ? str.length() : len;
    if(b.length != len) {
        return false;
    }

    return strncmp(b.buffer, str, len) == 0
}

public func (b: String) equalsString(other: String) : bool {
    return b.equals(other.buffer, other.length)
}



public func (b: String) equalsIgnoreCase(str: *const char, len: i32 = -1) : bool {
    if(!str) {
        return b.buffer == null;
    }

    len = (len < 0) ? str.length() : len;
    if(b.length != len) {
        return false;
    }

    while(len) {
        var c1 = tolower(*b.buffer)
        var c2 = tolower(*str)

        if(c1 != c2) {
            return false
        }

        if(c1 == '\0') {
            return true
        }

        b.buffer += 1
        str += 1
        len -= 1
    }
    return true
}

public func (b: String) contains(str: *const char, len: i32 = -1) : bool {
    return b.indexOf(str, len) > -1;
}

public func (b: String) indexOf(str: *const char, len: i32 = -1) : i32 {
    return b.indexOfAt(str, len, 0)
}

public func (b: String) indexOfAt(str: *const char, len: i32 = -1, fromIndex: i32 = 0) : i32 {
    if(!str) return -1;

    var target = str
    var source = b.buffer

    var targetOffset = 0;
    var sourceOffset = 0;

    var first = target[0];

    var targetCount = len
    if(len < 0) {
        targetCount = str.length();
    }

    var max = sourceOffset + (b.length - targetCount);

    for (var i = sourceOffset + fromIndex; i <= max; i += 1) {
        /* Look for first character. */
        if (source[i] != first) {
            while (i <= max && source[i] != first) {
                i+=1
            }
        }

        /* Found first character, now look at the rest of v2 */
        if (i <= max) {
            var j = i + 1;
            var end = j + targetCount - 1;
            for (var k = targetOffset + 1; j < end && source[j] == target[k];) {
                j += 1;
                k += 1;
            }

            if (j == end) {
                /* Found whole string. */
                return i - sourceOffset;
            }
        }
    }
    return -1;
}

public func (b: String) lastIndexOfAt(str: *const char, len: i32 = -1, fromIndex: i32 = -1) : i32 {
    var sourceCount = b.length
    var targetCount = len < 0 ? str.length() : len

    var targetOffset = 0
    var sourceOffset = 0

    var source = b.buffer
    var target = str

    var rightIndex = sourceCount - targetCount;
    if (fromIndex < 0) {
        fromIndex = sourceCount
    }
    if (fromIndex > rightIndex) {
        fromIndex = rightIndex;
    }
    /* Empty string always matches. */
    if (targetCount == 0) {
        return fromIndex;
    }

    var strLastIndex = targetOffset + targetCount - 1;
    var strLastChar = target[strLastIndex];
    var min = sourceOffset + targetCount - 1;
    var i = min + fromIndex;

startSearchForLastChar:
    while (true) {
        while (i >= min && source[i] != strLastChar) {
            i-=1;
        }
        if (i < min) {
            return -1;
        }
        var j = i - 1;
        var start = j - (targetCount - 1);
        var k = strLastIndex - 1;

        while (j > start) {
            if (source[j] != target[k]) {
                i -= 1;
                goto startSearchForLastChar;
            }
            j -= 1
            k -= 1
        }
        return start - sourceOffset + 1;
    }

}

public func (b: String) copyTo(buf: *char, len: i32, addZero: bool = true) : i32 {
    if(!buf || len == 0) return 0;

    var bytesCopied = len
    if(b.length < len) {
        bytesCopied = b.length
    }

    memcpy(buf as (*void),
          (&b.buffer[0]) as (*const void),
           bytesCopied * sizeof(:char))

    if(addZero) buf[bytesCopied] = '\0'

    return (bytesCopied)
}

public func (s: String) copy(allocator: *const mem::Allocator = mem::defaultAllocator) : String {
    if(s.length < 1) {
        return String {
            .buffer = null,
            .length = 0
        }
    }

    var copiedStr = allocator.alloc((s.length + 1) * sizeof(:char)) as (*char)
    memcpy(copiedStr, s.buffer, s.length)

    copiedStr[s.length] = '\0'

    return String{
        .buffer = copiedStr,
        .length = s.length
    }
}

public func (b: String) forEach(fn : func(char) : bool) {
    for(var i = 0; i < b.length; i+=1) {
        if(fn(b.buffer[i])) {
            break;
        }
    }
}

public func (b: String) empty() : bool {
    return b.length == 0
}

public func (b: String) size() : i32 {
    return b.length
}

public func (b: String) clear() {
    b.length = 0
}

public func (b: String) get(index: i32) : char {
    if(index < 0 || index >= b.length) {
        return '\0'
    }

    return b.buffer[index]
}



public func StringClone(original: *const char, len: i32 = -1, allocator: *const mem::Allocator = mem::defaultAllocator) : *char {
    if(!original) {
        return null
    }

    if(len < 0) {
        len = original.length()
    }

    var copiedStr: *char = null

    if(len > 0) {
        copiedStr = allocator.alloc((len + 1) * sizeof(:char)) as (*char)
        memcpy(copiedStr, original, len)

        copiedStr[len] = '\0'
    }
    return copiedStr
}

public func StringCopy(src: *const char, dest: *char, size: usize) : *char {
    if(!src) {
        return null
    }

    if (size > 0) {
        var i:usize;
        for (i = 0; i < size - 1 && src[i]; i+=1) {
             dest[i] = src[i];
        }
        dest[i] = '\0';
    }
    return dest;
}

public func StringHashLen(str: *const char, size: usize) : u32 {
    var hash = 5381_u32;

    var index = 0
    while (index < size) {
        hash = ((hash << 5_u32) + hash) ^ ((*str) as (u32));
        str   += 1;
        index += 1;
    }
    return hash;
}

public func StringHash(str: *const char) : u32 {
    var hash = 5381_u32;

    while (*str) {
        hash = ((hash << 5_u32) + hash) ^ ((*str) as (u32));
        str += 1;
    }
    return hash;
}

public func StringEqualLen(a: *const char, b: *const char, size: usize) : bool {
    if(!a && !b) return true
    if(!a || !b) return false

    return strncmp(a, b, size) == 0
}

public func StringEqual(a: *const char, b: *const char) : bool {
    if(!a && !b) return true
    if(!a || !b) return false

    return strcmp(a, b) == 0
}

public func (str: *const char) hash() : u32 {
    return StringHash(str)
}

public func (str: *const char) equals(other: *const char) : bool {
    if(!str && !other) return true
    if(!str || !other) return false

    return strcmp(str, other) == 0
}

public func (str: *const char) length() : i32 {
    return strlen(str)
}


public func (str: *const char) empty() : bool {
    return str[0] == '\0'
}



@test("equals")
func testEquals() {
    var a = StringInit("Hello World")
    var b = StringInit("Bye World")
    var c = a
    var d = StringInit("HelloWorld")
    var e = StringInit(null)

    assert(a.equals(c.buffer, c.length) == true)
    assert(a.equals("Hell") == false)
    assert(a.equals("Hello World") == true)
    assert(a.equals(b.buffer, b.length) == false)
    assert(a.equals(d.buffer, d.length) == false)
    assert(e.equals(d.buffer, d.length) == false)
    assert(a.equals(e.buffer, e.length) == false)
}


@test("contains")
func testContains() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.contains("World") == true)
    assert(a.contains("d") == true)
    assert(a.contains("H") == true)
    assert(a.contains("Which", 1) == true)
    assert(e.contains("World") == false)
    assert(a.contains(e.buffer, e.length) == false)
}

@test("startsWith")
func testStartsWith() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.startsWith("World") == false)
    assert(a.startsWith("d") == false)
    assert(a.startsWith("H") == true)
    assert(a.startsWith("Hell") == true)
    assert(a.startsWith("Hello World") == true)
    assert(a.startsWith("Hello World!") == false)
    assert(a.startsWith("Which", 1) == false)
    assert(a.startsWith("Hhich", 1) == true)
    assert(e.startsWith("World") == false)
    assert(a.startsWith(e.buffer, e.length) == false)
}

@test("endsWith")
func testEndsWith() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.endsWith("World") == true)
    assert(a.endsWith("d") == true)
    assert(a.endsWith("H") == false)
    assert(a.endsWith("Hell") == false)
    assert(a.endsWith("Hello World") == true)
    assert(a.endsWith("Hello World!") == false)
}

@test("indexOf")
func testIndexOf() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.indexOfAt("World", 2) == 6)
    assert(a.indexOfAt("World", 7) == -1)
    assert(a.indexOfAt("d") == 10)
    assert(a.indexOfAt("H") == 0)
    assert(a.indexOfAt("H", 2) == -1)

    assert(e.indexOfAt("World") == -1)
    assert(a.indexOfAt(e.buffer, e.length) == -1)
}


@test("lastIndexOf")
func testLastIndexOf() {
    var a = StringInit("Hello World")
    var e = StringInit(null)

    assert(a.lastIndexOfAt("World") == 6)
    assert(a.lastIndexOfAt("World", .fromIndex: 5) == -1)
    assert(a.lastIndexOfAt("World", .fromIndex: 7) == 6)
    assert(a.lastIndexOfAt("l") == 9)
    assert(a.lastIndexOfAt("o") == 7)
    assert(a.lastIndexOfAt("z") == -1)

    assert(e.lastIndexOfAt("World") == -1)
}